<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>git学习</title>
      <link href="/2023/08/21/git%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/08/21/git%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="1-git教程"><a href="#1-git教程" class="headerlink" title="1 git教程"></a>1 git教程</h1><p>代码托管平台: github、acgit(基于开源的gitlab搭建)、gitee、</p><h2 id="1-1-git基本概念"><a href="#1-1-git基本概念" class="headerlink" title="1.1 git基本概念"></a>1.1 git基本概念</h2><ul><li>工作区: 仓库的目录。工作区是独立于各个分支的。</li><li>暂存区: 数据暂时存放的区域。类似于工作区写入版本前的暂存区。暂存区是独立于各个分支的。</li><li>版本库: 存放所有已经提交到本地仓库的代码版本。</li><li>版本结构: 树结构,树中每个节点代表一个代码版本</li></ul><h2 id="1-2-git常用命令"><a href="#1-2-git常用命令" class="headerlink" title="1.2 git常用命令"></a>1.2 git常用命令</h2><p>1.<font color="red"><code>git config --global user.name xtzy</code></font>: 设置全局用户名,信息记录在<font color="red"><code>~/.gitconfig</code></font>文件中</p><p>2.<font color="red"><code>git config --global user.email xxx@xxx.com</code></font>: 设置全局邮箱地址,信息记录在<font color="red"><code>~/.gitconfig</code></font>文件中</p><p>3.<font color="red"><code>git init</code></font>： 将当前目录配置成git仓库，信息记录在隐藏的.git文件夹中</p><p>4.<font color="red"><code>git add xx</code></font>: 将xx文件添加到暂存区</p><ul><li><font color="red"><code>git add .</code></font>: 将所有待加入暂存区的文件加入暂存区</li></ul><p>5.<font color="red"><code>git rm --cached xx</code></font>： 将文件从仓库索引目录中删除(不希望管理哪个文件就用这个)</p><p>6.<font color="red"><code>git commit -m &quot;备注信息&quot;</code></font>: 将暂存区的内容提交到当前分支(执行完 暂存区的内容都会删除)</p><p>7.<font color="red"><code>git status</code></font>: 查看仓库状态</p><p>8.<font color="red"><code>git diff xx</code></font>： 查看xx文件相对于暂存区修改了哪些内容</p><p>9.<font color="red"><code>git log</code></font>： 查看当前分支的所有版本</p><ul><li><font color="red"><code>git log --pretty=oneline</code></font>： 一行显示，更加清楚</li></ul><p>10.<font color="red"><code>git reflog</code></font>： 查看HEAD指针的移动历史(包括被回滚的版本)</p><p>11.<font color="red"><code>git reset --hard HEAD^</code></font> 或<font color="red"><code>git reset --hard HEAD~</code></font>: 将代码库回滚到上一个版本(内容不会删掉)</p><ul><li><font color="red"><code>got reset --hard HEAD^^</code></font>： 往上回滚两次,以此类推</li><li><font color="red"><code>git reset --hard HEAD~100</code></font>: 往上回滚100个版本</li><li><font color="red"><code>git reset --hard 版本号</code></font>： 回滚到某一个特定版本</li></ul><p>12.<font color="red"><code>git checkout xx </code></font>或 <font color="red"><code>git restore xx </code></font>: 将xx文件尚未加入暂存区的修改全部撤销</p><p><mark>(工作区相对于暂存区的修改全部删除 即回滚到暂存区的内容)</mark></p><p>13.<font color="red"><code>git remote add origin git@git.acwing.com:xxx/XXX.git</code></font>： 将本地仓库关联到远程仓库</p><p>14.<font color="red"><code>git push -u (第一次需要-u以后不需要)</code></font>: 将当前分支推送到远程仓库</p><ul><li><font color="red"><code>git push origin branch_name</code></font>：将本地的某个分支推送到远程仓库</li></ul><p>15.<font color="red"><code>git clone git@git.acwing.com:xxx/XXX.git</code></font>： 将远程仓库XXX下载到当前目录下</p><p>16.<font color="red"><code>git checkout -b branch_name</code></font>: 创建并切换到<font color="red"><code>branch_name</code></font>这个分支</p><p>17.<font color="red"><code>git branch</code></font>： 查看分支</p><p>18.<font color="red"><code>git checkout branch_name</code></font>： 切换到<font color="red"><code>branch_name</code></font>这个分支</p><p>19.<font color="red"><code>git merge branch_name</code></font>： 将分支<font color="red"><code>branch_name</code></font>合并到当前分支上</p><p>20.<font color="red"><code>git branch -d branch_name</code></font>： 删除本地仓库的<font color="red"><code>branch_name</code></font>分支</p><p>21.<font color="red"><code>git branch branch_name</code></font>: 创建新分支</p><p>22.<font color="red"><code>git push --set -upstream orgin branch_name</code></font>： 设置本地的<font color="red"><code>branch_name</code></font>分支对应远程仓库的<font color="red"><code>branch_name</code></font>分支</p><p>23.<font color="red"><code>git push -d origin branch_name</code></font>: 删除远程仓库的<font color="red"><code>branch_name</code></font>分支</p><p>24.<font color="red"><code>git pull</code></font>： 将远程仓库的当前分支与本地仓库的当前分支合并</p><ul><li>.<font color="red"><code>git pull origin branch_name</code></font>：将远程仓库的<font color="red"><code>branch_name</code></font>分支与本地仓库的当前分支合并</li></ul><p>25.<font color="red"><code>git branch --set upstream-to=origin/branch_name1 branch_name2</code></font>：将远程的<font color="red"><code>branch_name1</code></font>分支与本地的<font color="red"><code>branch_name2</code></font>分支对应</p><p>26.<font color="red"><code>git checkout -t origin/branch_name</code></font>： 将远程的<font color="red"><code>branch_name</code></font>分支拉取到本地</p><p>27.<font color="red"><code>git stash</code></font>： 将工作区和暂存区尚未提交的修改存入栈中</p><p>28.<font color="red"><code>git stash apply</code></font>: 将栈顶存储的修改恢复到当前分支,但不删除栈顶元素</p><p>29.<font color="red"><code>git stash drop</code></font>： 删除栈顶存储的修改</p><p>30.<font color="red"><code>git stash pop</code></font>： 将栈顶存储的修改恢复到当前分支,同时删除栈顶元素</p><p>31.<font color="red"><code>git stash list</code></font>： 查看栈中所有元素</p><p>31.<font color="red"><code>git restored --stage xx </code></font>： 将暂存区的文件从暂存区撤出,但不会更改文件 （我还要管理这个文件）</p><h3 id="1-2-1-误删代码进行回滚-直接回滚历史版本也行-看自己需求"><a href="#1-2-1-误删代码进行回滚-直接回滚历史版本也行-看自己需求" class="headerlink" title="1.2.1 误删代码进行回滚(直接回滚历史版本也行 看自己需求)"></a>1.2.1 误删代码进行回滚(直接回滚历史版本也行 看自己需求)</h3><p>首先用<font color="red"><code>git status </code></font>查看状态,若已经<font color="red"><code>git add .</code></font>存入暂存区,则须使用<font color="red"><code>git restore --staged xx </code></font> 将误删文件撤离暂存区(即从暂存区扔出来)</p><p>然后使用<font color="red"><code>git retore xx</code></font>将误删文件进行回滚。</p><h3 id="1-2-2-回退到历史版本-然后再回到当前版本"><a href="#1-2-2-回退到历史版本-然后再回到当前版本" class="headerlink" title="1.2.2 回退到历史版本,然后再回到当前版本"></a>1.2.2 回退到历史版本,然后再回到当前版本</h3><p>首先用<font color="red"><code>git reset --hard 版本号 </code></font>进行回滚, 然后用<font color="red"><code>git reflog </code></font>查看head指针,取出最新版本前七位的版本号</p><p>使用<font color="red"><code>git reset --hard 版本号 </code></font>回到最新版本</p><h3 id="1-2-3-结点怎么删掉？-用的不多-想用就查-狠狠的查"><a href="#1-2-3-结点怎么删掉？-用的不多-想用就查-狠狠的查" class="headerlink" title="1.2.3 结点怎么删掉？(用的不多,想用就查,狠狠的查)"></a>1.2.3 结点怎么删掉？(用的不多,想用就查,狠狠的查)</h3><h3 id="1-2-4-其实本地就可以进行代码管理-管理代码都存在-git文件夹里"><a href="#1-2-4-其实本地就可以进行代码管理-管理代码都存在-git文件夹里" class="headerlink" title="1.2.4 其实本地就可以进行代码管理,管理代码都存在.git文件夹里"></a>1.2.4 其实本地就可以进行代码管理,管理代码都存在.git文件夹里</h3><h3 id="1-2-5-将当前目录映射到git上的一个仓库目录-本地和远程对应起来"><a href="#1-2-5-将当前目录映射到git上的一个仓库目录-本地和远程对应起来" class="headerlink" title="1.2.5 将当前目录映射到git上的一个仓库目录(本地和远程对应起来)"></a>1.2.5 将当前目录映射到git上的一个仓库目录(本地和远程对应起来)</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">add</span> origin git@git.acwing.com:xtzy/project.git<span class="token function">git</span> push <span class="token parameter variable">-u</span> origin master //即可完成操作<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-2-6-将项目迁移到全新服务器"><a href="#1-2-6-将项目迁移到全新服务器" class="headerlink" title="1.2.6 将项目迁移到全新服务器"></a>1.2.6 将项目迁移到全新服务器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 模拟 先把project删除</span><span class="token function">rm</span> project <span class="token parameter variable">-rf</span><span class="token function">git</span> clone git@git.acwing.com:xtzy/project.git<span class="token comment"># 引用记录为空</span><span class="token comment"># 本地不用担心误删啦  随时随地可以把项目文件夹克隆下来</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-3-分支操作-在公司用到"><a href="#1-3-分支操作-在公司用到" class="headerlink" title="1.3 分支操作(在公司用到)"></a>1.3 分支操作(在公司用到)</h2><p><mark>多人开发一般不会在主分支上开发,需要开多分支。</mark></p><h3 id="1-3-1-合并分支"><a href="#1-3-1-合并分支" class="headerlink" title="1.3.1 合并分支"></a>1.3.1 合并分支</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 模拟场景</span><span class="token comment">#创建分支  从master结点继承下来的  和当前版本表示一样</span><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> dev<span class="token comment"># 查看分支</span><span class="token function">git</span> branch<span class="token comment"># 改变readme.txt值 +777    (暂存区和分支是独立的)</span><span class="token function">vim</span> readme.txt<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token comment"># 持久化操作 (当前在dev分支上)</span><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"add 777"</span><span class="token comment"># 回到master目录</span><span class="token function">git</span> checkout master<span class="token comment"># 合并 dev 分支  用的是快速合并模式(没有产生复制，直接将master分支的head结点指向了dev) </span><span class="token comment"># 如果要强行复制 + -noff (用的不多)</span><span class="token function">git</span> merge dev<span class="token comment"># 删除dev分支   master和dev共用这个点 然后把dev分支删掉</span><span class="token function">git</span> branch <span class="token parameter variable">-d</span> dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-2-合并分支时产生冲突"><a href="#1-3-2-合并分支时产生冲突" class="headerlink" title="1.3.2 合并分支时产生冲突"></a>1.3.2 合并分支时产生冲突</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 如果有冲突 </span><span class="token comment"># 还原冲突场景</span><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> dev2<span class="token comment"># 加一个 999</span><span class="token function">vim</span> readme.txt<span class="token function">git</span> add.<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"888"</span><span class="token comment"># 切换master分支</span><span class="token function">git</span> checkout master<span class="token comment"># 加 888</span><span class="token function">vim</span> readme.txt<span class="token comment"># 此时合并会产生冲突</span><span class="token function">git</span> merge dev2<span class="token comment"># 这时候read.txt 会多东西  需要手动合并</span><span class="token function">vim</span> read.txt<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> status<span class="token comment"># 持久化</span><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"fix conflicts"</span><span class="token comment"># 删除分支dev2 </span><span class="token function">git</span> branch <span class="token parameter variable">-d</span> dev2<span class="token comment"># 将本地的分支提交到云端 第一次需要加-u</span><span class="token function">git</span> push<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-3-将本地的分支推向云端"><a href="#1-3-3-将本地的分支推向云端" class="headerlink" title="1.3.3 将本地的分支推向云端"></a>1.3.3 将本地的分支推向云端</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 模拟场景</span><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> dev3<span class="token comment"># 添加aaa</span><span class="token function">vim</span> read.txt<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"aaa"</span><span class="token comment"># 错了 当前分支没有云端分支 </span><span class="token comment">#git push</span><span class="token function">git</span> push --set-upstream origin dev3<span class="token comment"># 删除分支 需要去其他分支才能删</span><span class="token function">git</span> checkout master<span class="token comment"># 云端分支和本地分支比较独立 这里删了 云端的分支也不会删除</span><span class="token function">git</span> branch <span class="token parameter variable">-d</span> dev3<span class="token comment"># 删除云端分支</span><span class="token function">git</span> push <span class="token parameter variable">-d</span> origin dev3  <span class="token comment"># 项目在wsl里 做到此处  后面的基本差不多搞清楚了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-4-云端分支传到本地"><a href="#1-3-4-云端分支传到本地" class="headerlink" title="1.3.4 云端分支传到本地"></a>1.3.4 云端分支传到本地</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建新分支dev4</span><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> dev4<span class="token comment"># 添加bbb</span><span class="token function">vim</span> readme.txt<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"bbb"</span><span class="token comment"># push到云端</span><span class="token function">git</span> push --set-upstream origin dev4<span class="token comment"># 切换到master分支 删除dev4  这时云端有dev4 本地没有</span><span class="token function">git</span> checkout master<span class="token function">git</span> branch <span class="token parameter variable">-d</span> dev4<span class="token comment"># 把云端的分支push到本地</span><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> dev4  <span class="token comment"># 先创建分支 最好和云端的分支名字一样 </span><span class="token function">git</span> branch --set-upstream-to<span class="token operator">=</span>origin/dev4 dev4 <span class="token comment"># 将本地和云端的分支绑定到一块</span><span class="token function">git</span> pull <span class="token comment"># 拉取云端分支  简单认为 拿下来 在 merge</span><span class="token comment"># 然后就可以在本地将master 和 dev4 分支合并</span><span class="token function">git</span> checkout master<span class="token function">git</span> merge dev4 <span class="token comment"># 此时readme.txt 里有bbb</span><span class="token function">vim</span> readme.txt<span class="token comment"># 现在就可以删除本地和云端的dev4分支</span><span class="token function">git</span> branch <span class="token parameter variable">-d</span> dev4<span class="token function">git</span> push <span class="token parameter variable">-d</span> origin dev4<span class="token function">git</span> status<span class="token function">git</span> push <span class="token comment"># 将远程的分支合并到当前分支</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 也可以是云端某个分支传到本地某个分支</span><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> dev5<span class="token comment"># 添加ccc</span><span class="token function">vim</span> readme.txt<span class="token function">git</span> add.<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"777"</span><span class="token function">git</span> push --set-upstream origin dev5<span class="token comment"># 切换master分支  将本地分支删除</span><span class="token function">git</span> checkout master<span class="token function">git</span> branch <span class="token parameter variable">-d</span> dev5 <span class="token comment"># 此时云端多了个分支dev5 比master分支多了写内容</span><span class="token comment"># 云端的分支合并到本地的某个分支</span><span class="token function">git</span> pull origin dev5  <span class="token comment"># 云端的dev5分支合并到master分支  当前处于master分支</span><span class="token comment"># 本地可以合并本地的 本地可以合并云端的  云端合并云端(纯在页面操作)</span><span class="token function">git</span> push <span class="token comment"># 删除云端分支dev5</span><span class="token function">git</span> push <span class="token parameter variable">-d</span> origin dev4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-4-stash操作"><a href="#1-4-stash操作" class="headerlink" title="1.4  stash操作"></a>1.4  stash操作</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> dev6<span class="token comment"># 加ddd</span><span class="token function">vim</span> readme.txt<span class="token function">git</span> <span class="token function">add</span> readme.txt<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"ddd"</span><span class="token comment"># 再修改一个 加eee</span><span class="token function">vim</span> readme.txt  <span class="token comment"># 此时工作区和暂存区都有修改内容  </span><span class="token comment"># 如果此时服务器挂了  要修改又不希望将当前日志内容提交到版本库里</span><span class="token function">git</span> stash  <span class="token comment"># 将当前修改存在一个栈里   这样工作区和暂存区就没有东西了 可以使用git status查看</span><span class="token function">git</span> stash list <span class="token comment"># 查看栈里的所有内容</span><span class="token comment"># 创建新分支</span><span class="token function">git</span> checkout dev7<span class="token comment"># 添加 fff</span><span class="token function">vim</span> readme.txt<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token comment"># 持久化</span><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"fff"</span><span class="token function">git</span> checkout dev6<span class="token function">git</span> merge dev7<span class="token function">git</span> branch <span class="token parameter variable">-d</span> dev7<span class="token comment"># 着手把刚刚没做完的内容回复回来</span><span class="token function">git</span> stash pop  <span class="token function">git</span> status<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"fff"</span> <span class="token function">git</span> checkout master<span class="token function">git</span> merge dev6<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"fix confilcts"</span> <span class="token comment"># 可能没有冲突</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-5-多个同学合作"><a href="#1-5-多个同学合作" class="headerlink" title="1.5 多个同学合作"></a>1.5 多个同学合作</h2><p>多人开发一般都不会再master上开发,在dev分支上开发</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> dev<span class="token comment"># 传到云端</span><span class="token function">git</span> push --set-upstream origin dev<span class="token comment"># 另一个服务器 新的机器</span><span class="token comment"># 先加新机器的公钥传到云端 加到账户里</span><span class="token function">ssh</span> keygen<span class="token builtin class-name">cd</span> .ssh/<span class="token punctuation">..</span>.<span class="token comment"># 拉取代码  clone 一般只有一个分支</span><span class="token function">git</span> clone  <span class="token function">git</span> clone git@git.acwing.com:xtzy/project.git<span class="token function">git</span> checkout <span class="token parameter variable">-d</span> dev <span class="token function">git</span> branch --set-upstream-to<span class="token operator">=</span>origin/dev dev <span class="token comment"># 本地的和云端的分支对应</span><span class="token function">git</span> pull<span class="token comment"># 然后我们在本地修改了代码 小伙伴也修改了 修改的内容不同  且都持久化了</span><span class="token function">vim</span> readme.txt<span class="token comment"># 现在状态是云端有一个dev分支 我们自己也有一个dev分支  小伙伴也有一个dev分支 但内容不一样</span><span class="token comment"># 且小伙伴已经push上去了 这意味着云端分支就是小伙伴的内容</span><span class="token comment"># 这时候我们push上去  就会报错   有冲突</span><span class="token comment"># 这时候要解决冲突  要git pull将云端的分支拉到分支解决冲突</span><span class="token comment"># 这个一般不会发生 以为写的是不同文件 如果写的是相同文件的化冲突就会发生</span><span class="token function">git</span> pull<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> commit <span class="token parameter variable">-t</span> <span class="token string">"fix conflict"</span><span class="token function">git</span> push <span class="token comment"># 这样云端的分支就会更新为你处理冲突完之后的版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-6-用git来统计代码量"><a href="#1-6-用git来统计代码量" class="headerlink" title="1.6 用git来统计代码量"></a>1.6 <strong>用git来统计代码量</strong></h2><pre class="line-numbers language-none"><code class="language-none">find -name &#39;*.java&#39; | xargs cat | wc -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh学习</title>
      <link href="/2023/08/21/ssh%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/08/21/ssh%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="SSH登录"><a href="#SSH登录" class="headerlink" title="SSH登录"></a>SSH登录</h1><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>远程登录服务器：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> user@hostname<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><font color="red"><code>user</code></font>: 用户名<br><font color="red"><code>hostname</code></font>: IP地址或域名<br>第一次登录时会提示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">The authenticity of <span class="token function">host</span> <span class="token string">'123.57.47.211 (123.57.47.211)'</span> can't be established.ECDSA key fingerprint is SHA256:iy237yysfCe013/l+kpDGfEG9xxHxm0dnxnAbJTPpG8.Are you sure you want to <span class="token builtin class-name">continue</span> connecting <span class="token punctuation">(</span>yes/no/<span class="token punctuation">[</span>fingerprint<span class="token punctuation">]</span><span class="token punctuation">)</span>?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>输入<font color="red"><code>yes</code></font>，然后回车即可。<br>这样会将该服务器的信息记录在<font color="red"><code>~/.ssh/known_hosts</code></font>文件中。</p><p>然后输入密码即可登录到远程服务器中。</p><p>默认登录端口号为22。如果想登录某一特定端口：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> user@hostname <span class="token parameter variable">-p</span> <span class="token number">22</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置文件<br>创建文件。<font color="red"><code> ~/.ssh/config</code></font></p><p>然后在文件中输入：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Host myserver1    HostName IP地址或域名    User 用户名Host myserver2    HostName IP地址或域名    User 用户名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后再使用服务器时，可以直接使用别名<font color="red"><code>myserver1</code></font>、<font color="red"><code>myserver2</code></font>。</p><h2 id="密钥登录"><a href="#密钥登录" class="headerlink" title="密钥登录"></a>密钥登录</h2><p>创建密钥：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后一直回车即可。</p><p>执行结束后，<font color="red"><code>~/.ssh/</code></font>目录下会多两个文件：</p><p><font color="red"><code>id_rsa</code></font>：私钥<br><font color="red"><code>id_rsa.pub</code></font>：公钥<br>之后想免密码登录哪个服务器，就将公钥传给哪个服务器即可。</p><p>例如，想免密登录<font color="red"><code>myserver</code></font>服务器。则将公钥中的内容，复制到<font color="red"><code>myserver</code></font>中的<font color="red"><code>~/.ssh/authorized_keys</code></font>文件里即可。</p><p>也可以使用如下命令一键添加公钥：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-copy-id myserver<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行命令<br>命令格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> user@hostname <span class="token builtin class-name">command</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> user@hostname <span class="token function">ls</span> <span class="token parameter variable">-a</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 单引号中的$i可以求值 在服务器端执行  标准输出重定向到当前terminal</span><span class="token function">ssh</span> myserver <span class="token string">'for ((i = 0; i &lt; 10; i ++ )) do echo $i; done'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 双引号中的$i不可以求值</span><span class="token function">ssh</span> myserver <span class="token string">"for <span class="token variable"><span class="token punctuation">((</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">))</span></span> do echo <span class="token variable">$i</span>; done"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="scp传文件"><a href="#scp传文件" class="headerlink" title="scp传文件"></a>scp传文件</h1><p>基本用法<br>命令格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> <span class="token builtin class-name">source</span> destination<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将<font color="red"><code> source</code></font>路径下的文件复制到<font color="red"><code> destination</code></font>中</p><p>一次复制多个文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> source1 source2 destination<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>复制文件夹：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> <span class="token parameter variable">-r</span> ~/tmp myserver:/home/acs/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将本地家目录中的<font color="red"><code> tmp</code></font>文件夹复制到<font color="red"><code> myserver</code></font>服务器中的&#x2F;home&#x2F;acs&#x2F;目录下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> <span class="token parameter variable">-r</span> ~/tmp myserver:homework/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将本地家目录中的<font color="red"><code> tmp</code></font>文件夹复制到<font color="red"><code> myserver</code></font>服务器中的~&#x2F;homework&#x2F;目录下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> <span class="token parameter variable">-r</span> myserver:homework <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将myserver服务器中的<font color="red"><code> ~/homework/</code></font>文件夹复制到本地的当前路径下。</p><p>指定服务器的端口号：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> <span class="token parameter variable">-P</span> <span class="token number">22</span> source1 source2 destination<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：<font color="red"><code>  scp</code></font>的 <font color="red"><code> -r</code></font><font color="red"><code> -P</code></font>等参数尽量加在<font color="red"><code> source</code></font>和<font color="red"><code> destination</code></font>之前。</p><p>使用<font color="red"><code> scp</code></font>配置其他服务器的vim和tmux</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> ~/.vimrc ~/.tmux.conf myserver:处。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用cat命令 开头点一下,结尾点一下,就可以复制出来辣</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell学习</title>
      <link href="/2023/08/21/shell%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/08/21/shell%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="概论"><a href="#概论" class="headerlink" title="概论"></a>概论</h1><p>shell是我们通过命令行与操作系统沟通的语言。</p><p>shell脚本可以直接在命令行中执行，也可以将一套逻辑组织成一个文件，方便复用。</p><p>AC Terminal中的命令行可以看成是一个<strong>“shell脚本在逐行执行”</strong>。</p><p>Linux中常见的shell脚本有很多种，常见的有：</p><ul><li>Bourne Shell<font color="red"><code>(/usr/bin/sh或/bin/sh)</code></font></li><li>Bourne Again Shell<font color="red"><code>(/bin/bash)</code></font></li><li>C Shell<font color="red"><code>(/usr/bin/csh)</code></font></li><li>K Shell<font color="red"><code>(/usr/bin/ksh)</code></font></li><li>zsh</li></ul><p>Linux系统中一般默认使用bash，所以接下来讲解bash中的语法。<br>文件开头需要写<font color="red"><code>#! /bin/bash</code></font>，指明bash为脚本解释器。</p><p>学习技巧<br>不要死记硬背，遇到含糊不清的地方，可以在Terminal里实际运行一遍。</p><p>脚本示例<br>新建一个<font color="red"><code>test.sh</code></font>文件，内容如下：</p><p>#! &#x2F;bin&#x2F;bash<br>echo “Hello World!”<br>运行方式<br>作为可执行文件(需要权限)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xtzy@DESKTOP-8LBB6V0:~$ <span class="token function">chmod</span> +x test.sh  <span class="token comment"># 使脚本具有可执行权限</span>xtzy@DESKTOP-8LBB6V0:~$ ./test.sh  <span class="token comment"># 当前路径下执行</span>Hello World<span class="token operator">!</span>  <span class="token comment"># 脚本输出</span>xtzy@DESKTOP-8LBB6V0:~$ /home/acs/test.sh  <span class="token comment"># 绝对路径下执行</span>Hello World<span class="token operator">!</span>  <span class="token comment"># 脚本输出</span>xtzy@DESKTOP-8LBB6V0:~$ ~/test.sh  <span class="token comment"># 家目录路径下执行</span>Hello World<span class="token operator">!</span>  <span class="token comment"># 脚本输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用解释器执行(不需要权限)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xtzy@DESKTOP-8LBB6V0:~$ <span class="token function">bash</span> test.shHello World<span class="token operator">!</span>  <span class="token comment"># 脚本输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>权限: <font color="red"><code>用户本身 用户组 其他用户</code></font></p><p>增加可执行的权限： <font color="red"><code>chmod +x test.sh</code></font></p><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p><strong>单行注释</strong><br>每行中 <font color="red"><code>#</code></font>之后的内容均是注释。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 这是一行注释</span><span class="token builtin class-name">echo</span> <span class="token string">'Hello World'</span>  <span class="token comment">#  这也是注释</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>多行注释<br>格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">:<span class="token operator">&lt;&lt;</span><span class="token string">EOF第一行注释第二行注释第三行注释EOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<font color="red"><code>EOF</code></font>可以换成其它任意字符串。例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">:<span class="token operator">&lt;&lt;</span><span class="token string">abc第一行注释第二行注释第三行注释abc</span>:<span class="token operator">&lt;&lt;</span><span class="token operator">!</span>第一行注释第二行注释第三行注释<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a><strong>定义变量</strong></h2><p>定义变量，不需要加<font color="red"><code>$</code></font>符号，例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">name1</span><span class="token operator">=</span><span class="token string">'xtzy'</span>  <span class="token comment"># 单引号定义字符串</span><span class="token assign-left variable">name2</span><span class="token operator">=</span><span class="token string">"xtzy"</span>  <span class="token comment"># 双引号定义字符串</span><span class="token assign-left variable">name3</span><span class="token operator">=</span>xtzy    <span class="token comment"># 也可以不加引号，同样表示字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a><strong>使用变量</strong></h2><p>使用变量，需要加上<font color="red"><code>$</code></font>符号，或者${}<font color="red"><code>$&#123;&#125;</code></font>符号。花括号是可选的，主要为了帮助解释器识别变量边界。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">name</span><span class="token operator">=</span>xtzy<span class="token builtin class-name">echo</span> <span class="token variable">$name</span>  <span class="token comment"># 输出xtzy</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;name&#125;</span>  <span class="token comment"># 输出xtzy</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;name&#125;</span>acwing  <span class="token comment"># 输出xtzycwing</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="只读变量"><a href="#只读变量" class="headerlink" title="只读变量"></a><strong>只读变量</strong></h2><p>使用readonly或者declare可以将变量变为只读。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">name</span><span class="token operator">=</span>xtzy<span class="token builtin class-name">readonly</span> name<span class="token builtin class-name">declare</span> <span class="token parameter variable">-r</span> name  <span class="token comment"># 两种写法均可</span><span class="token assign-left variable">name</span><span class="token operator">=</span>abc  <span class="token comment"># 会报错，因为此时name只读</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a><strong>删除变量</strong></h2><p><font color="red">unset</font>可以删除变量。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">name</span><span class="token operator">=</span>xtzy<span class="token builtin class-name">unset</span> name<span class="token builtin class-name">echo</span> <span class="token variable">$name</span>  <span class="token comment"># 输出空行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a><strong>变量类型</strong></h2><p>tips: 使用<font color="red">bash</font>命令会新开到一个新的bash  退出是<font color="red">exit</font></p><p>​按<font color="red">top</font>查看进程 按<font color="red">q</font>退出</p><p>1.自定义变量（局部变量）<br>    子进程不能访问的变量<br>2.环境变量（全局变量）<br>    子进程可以访问的变量</p><h3 id="自定义变量改成环境变量："><a href="#自定义变量改成环境变量：" class="headerlink" title="自定义变量改成环境变量："></a><strong>自定义变量改成环境变量：</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xtzy@DESKTOP-8LBB6V0:~$ <span class="token assign-left variable">name</span><span class="token operator">=</span>xtzy  <span class="token comment"># 定义变量</span>xtzy@DESKTOP-8LBB6V0~$ <span class="token builtin class-name">export</span> name  <span class="token comment"># 第一种方法</span>xtzy@DESKTOP-8LBB6V0~$ <span class="token builtin class-name">declare</span> <span class="token parameter variable">-x</span> name  <span class="token comment"># 第二种方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="环境变量改为自定义变量："><a href="#环境变量改为自定义变量：" class="headerlink" title="环境变量改为自定义变量："></a><strong>环境变量改为自定义变量：</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xtzy@DESKTOP-8LBB6V0:~$ <span class="token builtin class-name">export</span> <span class="token assign-left variable">name</span><span class="token operator">=</span>xtzy  <span class="token comment"># 定义环境变量</span>xtzy@DESKTOP-8LBB6V0:~$ <span class="token builtin class-name">declare</span> +x name  <span class="token comment"># 改为自定义变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>字符串</strong><br>字符串可以用单引号，也可以用双引号，也可以不用引号。</p><p><strong>单引号与双引号的区别：</strong></p><ul><li>单引号中的内容会原样输出，不会执行、不会取变量；</li><li>双引号中的内容可以执行、可以取变量；</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">name</span><span class="token operator">=</span>xtzy  <span class="token comment"># 不用引号</span><span class="token builtin class-name">echo</span> <span class="token string">'hello, $name \"hh\"'</span>  <span class="token comment"># 单引号字符串，输出 hello, $name \"hh\"</span><span class="token builtin class-name">echo</span> <span class="token string">"hello, <span class="token variable">$name</span> <span class="token entity" title="\&quot;">\"</span>hh<span class="token entity" title="\&quot;">\"</span>"</span>  <span class="token comment"># 双引号字符串，输出 hello, xtzy "hh"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>获取字符串长度</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"xtzy"</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;<span class="token operator">#</span>name&#125;</span>  <span class="token comment"># 输出4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>提取子串</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"hello, xtzy"</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;name<span class="token operator">:</span>0<span class="token operator">:</span>5&#125;</span>  <span class="token comment"># 提取从0开始的5个字符</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="默认变量"><a href="#默认变量" class="headerlink" title="默认变量"></a>默认变量</h1><p><strong>文件参数变量</strong><br>在执行shell脚本时，可以向脚本传递参数。<font color="red">$1</font>是第一个参数，<font color="red">$2</font>是第二个参数，以此类推。特殊的，<font color="red">$0</font>是文件名（包含路径）。例如：</p><p>创建文件<font color="red">test.sh</font>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token builtin class-name">echo</span> <span class="token string">"文件名："</span><span class="token variable">$0</span><span class="token builtin class-name">echo</span> <span class="token string">"第一个参数："</span><span class="token variable">$1</span><span class="token builtin class-name">echo</span> <span class="token string">"第二个参数："</span><span class="token variable">$2</span><span class="token builtin class-name">echo</span> <span class="token string">"第三个参数："</span><span class="token variable">$3</span><span class="token builtin class-name">echo</span> <span class="token string">"第四个参数："</span><span class="token variable">$4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后执行该脚本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xtzy@DESKTOP-8LBB6V0:~$ <span class="token function">chmod</span> +x test.sh xtzy@DESKTOP-8LBB6V0:~$ ./test.sh <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span>文件名：./test.sh第一个参数：1第二个参数：2第三个参数：3第四个参数：4其它参数相关变量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>其它参数相关变量</strong></p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><font color="red">$#</font></td><td>代表文件传入的参数个数，如上例中值为4</td></tr><tr><td><font color="red">$*</font></td><td>由所有参数构成的用空格隔开的字符串，如上例中值为”$1 $2 $3 $4”</td></tr><tr><td><font color="red">$@</font></td><td>每个参数分别用双引号括起来的字符串，如上例中值为”$1” “$2” “$3” “$4”</td></tr><tr><td><font color="red">$</font></td><td>脚本当前运行的进程ID</td></tr><tr><td><font color="red">$?</font></td><td>上一条命令的退出状态（注意不是stdout，而是exit code）。0表示正常退出，其他值表示错误</td></tr><tr><td><font color="red">$(command)</font></td><td>返回command这条命令的stdout（可嵌套</td></tr><tr><td><font color="red">&#96;&#96;command 、&#96;</font></td><td>返回command这条命令的stdout（不可嵌套）</td></tr></tbody></table><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>数组中可以存放多个不同类型的值，只支持一维数组，初始化时不需要指明数组大小。<br>数组<strong>下标从0开始</strong>。</p><p><strong>定义</strong><br>数组用小括号表示，元素之间用空格隔开。例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span> abc <span class="token string">"def"</span> xtzy<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以直接定义数组中某个元素的值：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>abcarray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"def"</span>array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>xtzy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>读取数组中某个元素的值</strong><br>格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$&#123;array<span class="token punctuation">[</span>index<span class="token punctuation">]</span>&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span> abc <span class="token string">"def"</span> yxc<span class="token punctuation">)</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;array<span class="token punctuation">[</span>0<span class="token punctuation">]</span>&#125;</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;array<span class="token punctuation">[</span>1<span class="token punctuation">]</span>&#125;</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;array<span class="token punctuation">[</span>2<span class="token punctuation">]</span>&#125;</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;array<span class="token punctuation">[</span>3<span class="token punctuation">]</span>&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>读取整个数组</strong><br>格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$&#123;array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>  <span class="token comment"># 第一种写法</span><span class="token variable">$&#123;array<span class="token punctuation">[</span>*<span class="token punctuation">]</span>&#125;</span>  <span class="token comment"># 第二种写法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span> abc <span class="token string">"def"</span> xtzy<span class="token punctuation">)</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>  <span class="token comment"># 第一种写法</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;array<span class="token punctuation">[</span>*<span class="token punctuation">]</span>&#125;</span>  <span class="token comment"># 第二种写法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>数组长度</strong><br>类似于字符串</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$&#123;<span class="token operator">#</span>array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>  <span class="token comment"># 第一种写法</span><span class="token variable">$&#123;<span class="token operator">#</span>array<span class="token punctuation">[</span>*<span class="token punctuation">]</span>&#125;</span>  <span class="token comment"># 第二种写法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span> abc <span class="token string">"def"</span> xtzy<span class="token punctuation">)</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;<span class="token operator">#</span>array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>  <span class="token comment"># 第一种写法</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;<span class="token operator">#</span>array<span class="token punctuation">[</span>*<span class="token punctuation">]</span>&#125;</span>  <span class="token comment"># 第二种写法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="expr命令"><a href="#expr命令" class="headerlink" title="expr命令"></a>expr命令</h1><p><strong>(第三方命令,不是bash内部命令)</strong></p><p><font color="red"><code>expr</code></font>命令用于求表达式的值，格式为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">expr</span> 表达式<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="表达式说明："><a href="#表达式说明：" class="headerlink" title="表达式说明："></a>表达式说明：</h2><ul><li>用空格隔开每一项</li><li>用反斜杠放在shell特定的字符前面（发现表达式运行错误时，可以试试转义）</li><li>对包含空格和其他特殊字符的字符串要用引号括起来</li><li>expr会在<font color="red"><code>stdout</code></font>中输出结果。如果为逻辑关系表达式，则结果为真时，<font color="red"><code>stdout</code></font>输出1，否则输出0。</li><li>expr的<font color="red"><code>exit code</code></font>：如果为逻辑关系表达式，则结果为真时，<font color="red"><code>exit code</code></font>为0，否则为1。</li></ul><h2 id="字符串表达式"><a href="#字符串表达式" class="headerlink" title="字符串表达式"></a>字符串表达式</h2><ul><li><font color="red"><code>length STRING</code></font><br>返回<font color="red"><code>STRING</code></font>的长度</li><li><font color="red"><code>index STRING CHARSET</code></font><br><font color="red"><code>CHARSET</code></font>中任意单个字符在<font color="red"><code>STRING</code></font>中最前面的字符位置，下标从1开始。如果在STRING中完全不存在CHARSET中的字符，则返回0。</li><li><font color="red"><code>substr STRING POSITION LENGTH</code></font><br>返回<font color="red"><code>STRING</code></font>字符串中从<font color="red"><code>POSITION</code></font>开始，长度最大为<font color="red"><code>LENGTH</code></font>的子串。如果<font color="red"><code>POSITION</code></font>或<font color="red"><code>LENGTH</code></font>为负数，0或非数值，则返回空字符串。</li></ul><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">str</span><span class="token operator">=</span><span class="token string">"Hello World!"</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> length <span class="token string">"<span class="token variable">$str</span>"</span><span class="token variable">`</span></span>  <span class="token comment"># ``不是单引号，表示执行该命令，输出12</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> index <span class="token string">"<span class="token variable">$str</span>"</span> aWd<span class="token variable">`</span></span>  <span class="token comment"># 输出7，下标从1开始</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> substr <span class="token string">"<span class="token variable">$str</span>"</span> <span class="token number">2</span> <span class="token number">3</span><span class="token variable">`</span></span>  <span class="token comment"># 输出 ell</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="整数表达式"><a href="#整数表达式" class="headerlink" title="整数表达式"></a>整数表达式</h2><p><font color="red"><code>expr</code></font>支持普通的算术操作，算术表达式优先级低于字符串表达式，高于逻辑关系表达式。</p><ul><li><font color="red"><code>+ -</code></font><br>加减运算。两端参数会转换为整数，如果转换失败则报错。</li></ul><ul><li><font color="red"><code> * / %</code></font><br>乘，除，取模运算。两端参数会转换为整数，如果转换失败则报错。</li></ul><p>​<strong>乘法运算的 * 的使用除转义外，还有直接加单引号这种方式也可以</strong></p><p> <font color="red">()</font>可以改变优先级，但需要用反斜杠转义</p><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">3</span><span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">4</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a + $b<span class="token variable">`</span></span>  <span class="token comment"># 输出7</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a - $b<span class="token variable">`</span></span>  <span class="token comment"># 输出-1</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a <span class="token punctuation">\</span>* $b<span class="token variable">`</span></span>  <span class="token comment"># 输出12，*需要转义</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a / $b<span class="token variable">`</span></span>  <span class="token comment"># 输出0，整除</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a % $b<span class="token variable">`</span></span> <span class="token comment"># 输出3</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> <span class="token punctuation">\</span><span class="token punctuation">(</span> $a + <span class="token number">1</span> <span class="token punctuation">\</span><span class="token punctuation">)</span> <span class="token punctuation">\</span>* <span class="token punctuation">\</span><span class="token punctuation">(</span> $b + <span class="token number">1</span> <span class="token punctuation">\</span><span class="token punctuation">)</span><span class="token variable">`</span></span>  <span class="token comment"># 输出20，值为(a + 1) * (b + 1)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="逻辑关系表达式"><a href="#逻辑关系表达式" class="headerlink" title="逻辑关系表达式"></a><strong>逻辑关系表达式</strong></h2><ul><li><font color="red"><code>|</code></font><br>如果第一个参数非空且非0，则返回第一个参数的值，否则返回第二个参数的值，但要求第二个参数的值也是非空或非0，否则返回0。如果第一个参数是非空或非0时，不会计算第二个参数。</li><li><font color="red"><code>&amp;</code></font><br>如果第一个参数非<br>如果两个参数都非空且非0，则返回第一个参数，否则返回0。如果第一个参为0或为空，则不会计算第二个参数。</li><li><font color="red"><code>&lt; &lt;= = == != &gt;= &gt;</code></font><br>比较两端的参数，如果为true，则返回1，否则返回0。”&#x3D;&#x3D;”是”&#x3D;”的同义词。”expr”首先尝试将两端参数转换为整数，并做算术比较，如果转换失败，则按字符集排序规则做字符比较。</li><li><font color="red"><code>() </code></font>可以改变优先级，但需要用反斜杠转义</li></ul><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">3</span><span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">4</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a <span class="token punctuation">\</span><span class="token operator">></span> $b<span class="token variable">`</span></span>  <span class="token comment"># 输出0，>需要转义</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a <span class="token string">'&lt;'</span> $b<span class="token variable">`</span></span>  <span class="token comment"># 输出1，也可以将特殊字符用引号引起来</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a <span class="token string">'>='</span> $b<span class="token variable">`</span></span>  <span class="token comment"># 输出0</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a <span class="token punctuation">\</span><span class="token operator">&lt;</span><span class="token punctuation">\</span><span class="token operator">=</span> $b<span class="token variable">`</span></span>  <span class="token comment"># 输出1</span><span class="token assign-left variable">c</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">d</span><span class="token operator">=</span><span class="token number">5</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $c <span class="token punctuation">\</span><span class="token operator">&amp;</span> $d<span class="token variable">`</span></span>  <span class="token comment"># 输出0</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a <span class="token punctuation">\</span><span class="token operator">&amp;</span> $b<span class="token variable">`</span></span>  <span class="token comment"># 输出3</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $c <span class="token punctuation">\</span><span class="token operator">|</span> $d<span class="token variable">`</span></span>  <span class="token comment"># 输出5</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a <span class="token punctuation">\</span><span class="token operator">|</span> $b<span class="token variable">`</span></span>  <span class="token comment"># 输出3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="read命令"><a href="#read命令" class="headerlink" title="read命令"></a>read命令</h1><p><font color="red"><code>read </code></font>命令用于从标准输入中读取单行数据。当读到文件结束符时，<font color="red"><code>exit code</code></font>为1，否则为0。</p><p>参数说明</p><ul><li><font color="red"><code>-p</code></font>: 后面可以接提示信息</li><li><font color="red"><code>-t </code></font>：后面跟秒数，定义输入字符的等待时间，超过等待时间后会自动忽略此命令<br>实例：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xtzy@DESKTOP-8LBB6V0::~$ <span class="token builtin class-name">read</span> name  <span class="token comment"># 读入name的值</span>acwing xtzy  <span class="token comment"># 标准输入</span>xtzy@DESKTOP-8LBB6V0::~$ <span class="token builtin class-name">echo</span> <span class="token variable">$name</span>  <span class="token comment"># 输出name的值</span>acwing xtzy  <span class="token comment">#标准输出</span>xtzy@DESKTOP-8LBB6V0::~$ <span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">"Please input your name: "</span> <span class="token parameter variable">-t</span> <span class="token number">30</span> name  <span class="token comment"># 读入name的值，等待时间30秒</span>Please input your name: acwing xtzy  <span class="token comment"># 标准输入</span>xtzy@DESKTOP-8LBB6V0::~$ <span class="token builtin class-name">echo</span> <span class="token variable">$name</span>  <span class="token comment"># 输出name的值</span>acwing xtzy  <span class="token comment"># 标准输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="echo命令"><a href="#echo命令" class="headerlink" title="echo命令"></a>echo命令</h1><p><font color="red"><code>echo </code></font>用于输出字符串。命令格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> STRING<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="显示普通字符串"><a href="#显示普通字符串" class="headerlink" title="显示普通字符串"></a>显示普通字符串</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"Hello AC Terminal"</span><span class="token builtin class-name">echo</span> Hello AC Terminal  <span class="token comment"># 引号可以省略</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="显示转义字符"><a href="#显示转义字符" class="headerlink" title="显示转义字符"></a>显示转义字符</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token entity" title="\&quot;">\"</span>Hello AC Terminal<span class="token entity" title="\&quot;">\"</span>"</span>  <span class="token comment"># 注意只能使用双引号，如果使用单引号，则不转义</span><span class="token builtin class-name">echo</span> <span class="token punctuation">\</span>"Hello AC Terminal<span class="token punctuation">\</span>"  <span class="token comment"># 也可以省略双引号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="显示变量"><a href="#显示变量" class="headerlink" title="显示变量"></a>显示变量</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">name</span><span class="token operator">=</span>xtzy<span class="token builtin class-name">echo</span> <span class="token string">"My name is <span class="token variable">$name</span>"</span>  <span class="token comment"># 输出 My name is xtzy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="显示换行"><a href="#显示换行" class="headerlink" title="显示换行"></a>显示换行</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"Hi<span class="token entity" title="\n">\n</span>"</span>  <span class="token comment"># -e 开启转义</span><span class="token builtin class-name">echo</span> <span class="token string">"acwing"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Hiacwing<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="显示不换行"><a href="#显示不换行" class="headerlink" title="显示不换行"></a>显示不换行</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"Hi <span class="token entity" title="\c">\c</span>"</span> <span class="token comment"># -e 开启转义 \c 不换行</span><span class="token builtin class-name">echo</span> <span class="token string">"acwing"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Hi acwing<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="显示结果定向至文件"><a href="#显示结果定向至文件" class="headerlink" title="显示结果定向至文件"></a>显示结果定向至文件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"Hello World"</span> <span class="token operator">></span> output.txt  <span class="token comment"># 将内容以覆盖的方式输出到output.txt中</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="原样输出字符串，不进行转义或取变量-用单引号"><a href="#原样输出字符串，不进行转义或取变量-用单引号" class="headerlink" title="原样输出字符串，不进行转义或取变量(用单引号)"></a>原样输出字符串，不进行转义或取变量(用单引号)</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">name</span><span class="token operator">=</span>acwing<span class="token builtin class-name">echo</span> <span class="token string">'$name\"'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出结果</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$name</span><span class="token punctuation">\</span>"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示命令的执行结果</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">date</span><span class="token variable">`</span></span> <span class="token punctuation">(</span>两个点可以获取命令的标准输出<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Wed Sep <span class="token number">1</span> <span class="token number">11</span>:45:33 CST <span class="token number">2021</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="printf命令"><a href="#printf命令" class="headerlink" title="printf命令"></a>printf命令</h1><p><font color="red"><code>printf</code></font>命令用于格式化输出，类似于<font color="red"><code>C/C++</code></font>中的<font color="red"><code>printf </code></font>函数。</p><p>默认不会在字符串末尾添加换行符。</p><p>命令格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">printf</span> format-string <span class="token punctuation">[</span>arguments<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用法示例<br>脚本内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">printf</span> <span class="token string">"%10d.<span class="token entity" title="\n">\n</span>"</span> <span class="token number">123</span>  <span class="token comment"># 占10位，右对齐</span><span class="token builtin class-name">printf</span> <span class="token string">"%-10.2f.<span class="token entity" title="\n">\n</span>"</span> <span class="token number">123.123321</span>  <span class="token comment"># 占10位，保留2位小数，左对齐</span><span class="token builtin class-name">printf</span> <span class="token string">"My name is %s<span class="token entity" title="\n">\n</span>"</span> <span class="token string">"xtzy"</span>  <span class="token comment"># 格式化输出字符串</span><span class="token builtin class-name">printf</span> <span class="token string">"%d * %d = %d<span class="token entity" title="\n">\n</span>"</span>  <span class="token number">2</span> <span class="token number">3</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> <span class="token number">2</span> <span class="token punctuation">\</span>* <span class="token number">3</span><span class="token variable">`</span></span> <span class="token comment"># 表达式的值作为参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">   <span class="token number">123</span>.<span class="token number">123.12</span>    <span class="token builtin class-name">.</span>My name is yxc<span class="token number">2</span> * <span class="token number">3</span> <span class="token operator">=</span> <span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="test命令-shell内置命令-与判断符号"><a href="#test命令-shell内置命令-与判断符号" class="headerlink" title="test命令(shell内置命令)与判断符号[]"></a>test命令(shell内置命令)与判断符号[]</h1><h2 id="逻辑运算符-和"><a href="#逻辑运算符-和" class="headerlink" title="逻辑运算符&amp;&amp;和||"></a>逻辑运算符&amp;&amp;和||</h2><ul><li><font color="red"><code>&amp;&amp;</code></font> 表示与，<font color="red"><code>||</code></font> 表示或</li><li>二者具有短路原则：<br><font color="red"><code>expr1 &amp;&amp; expr2</code></font>：当expr1为假时，直接忽略expr2<br><font color="red"><code>expr1 || expr2</code></font>：当expr1为真时，直接忽略expr2</li><li>表达式的<font color="red"><code>exit code</code></font>为0，表示真；为非零，表示假。（与C&#x2F;C++<font color="red"><code>printf</code></font>中的定义相反）</li></ul><h2 id="test命令"><a href="#test命令" class="headerlink" title="test命令"></a>test命令</h2><p>在命令行中输入<font color="red"><code>man test</code></font>，可以查看<font color="red"><code>test</code></font>命令的用法。</p><p><font color="red"><code>test</code></font>命令用于判断文件类型，以及对变量做比较。</p><p><font color="red"><code>test</code></font>命令用<font color="red"><code>exit code</code></font>返回结果，而不是使用<font color="red"><code>stdout</code></font>。0表示真，非0表示假。</p><p>例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">test</span> <span class="token number">2</span> <span class="token parameter variable">-lt</span> <span class="token number">3</span>  <span class="token comment"># 为真，返回值为0</span><span class="token builtin class-name">echo</span> <span class="token variable">$?</span>  <span class="token comment"># 输出上个命令的返回值，输出0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xtzy@DESKTOP-8LBB6V0:~$ <span class="token function">ls</span>  <span class="token comment"># 列出当前目录下的所有文件</span>homework  output.txt  test.sh  tmpxtzy@DESKTOP-8LBB6V0:~$ <span class="token builtin class-name">test</span> <span class="token parameter variable">-e</span> test.sh <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">"exist"</span> <span class="token operator">||</span> <span class="token builtin class-name">echo</span> <span class="token string">"Not exist"</span>exist  <span class="token comment"># test.sh 文件存在</span>xtzy@DESKTOP-8LBB6V0:~$ <span class="token builtin class-name">test</span> <span class="token parameter variable">-e</span> test2.sh <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">"exist"</span> <span class="token operator">||</span> <span class="token builtin class-name">echo</span> <span class="token string">"Not exist"</span>Not exist  <span class="token comment"># testh2.sh 文件不存在</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文件类型判断"><a href="#文件类型判断" class="headerlink" title="文件类型判断"></a>文件类型判断</h2><p>命令格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">test</span> <span class="token parameter variable">-e</span> filename  <span class="token comment"># 判断文件是否存在</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>测试参数</th><th>代表意义</th></tr></thead><tbody><tr><td>-e</td><td>文件是否存在</td></tr><tr><td>-f</td><td>是否为文件</td></tr><tr><td>-d</td><td>是否为目录</td></tr></tbody></table><h2 id="文件权限判断"><a href="#文件权限判断" class="headerlink" title="文件权限判断"></a>文件权限判断</h2><p>命令格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">test</span> <span class="token parameter variable">-r</span> filename  <span class="token comment"># 判断文件是否可读</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>测试参数</th><th>代表意义</th></tr></thead><tbody><tr><td>-r</td><td>文件是否可读</td></tr><tr><td>-w</td><td>文件是否可写</td></tr><tr><td>-x</td><td>文件是否可执行</td></tr><tr><td>-s</td><td>是否为非空文件</td></tr></tbody></table><h2 id="整数间的比较"><a href="#整数间的比较" class="headerlink" title="整数间的比较"></a>整数间的比较</h2><p>命令格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">test</span> <span class="token variable">$a</span> <span class="token parameter variable">-eq</span> <span class="token variable">$b</span>  <span class="token comment"># a是否等于b</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>测试参数</th><th>代表意义</th></tr></thead><tbody><tr><td>-eq</td><td>a是否等于b</td></tr><tr><td>-ne</td><td>a是否不等于b</td></tr><tr><td>-gt</td><td>a是否大于b</td></tr><tr><td>-lt</td><td>a是否小于b</td></tr><tr><td>-ge</td><td>a是否大于等于b</td></tr><tr><td>-le</td><td>a是否小于等于b</td></tr></tbody></table><h2 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h2><table><thead><tr><th>测试参数</th><th>代表意义</th></tr></thead><tbody><tr><td>test -z STRING</td><td>判断STRING是否为空，如果为空，则返回true</td></tr><tr><td>test -n STRING</td><td>判断STRING是否非空，如果非空，则返回true（-n可以省略）</td></tr><tr><td>test str1 &#x3D;&#x3D; str2</td><td>判断str1是否等于str2</td></tr><tr><td>test str1 !&#x3D; str2</td><td>判断str1是否不等于str2</td></tr></tbody></table><h2 id="多重条件判定"><a href="#多重条件判定" class="headerlink" title="多重条件判定"></a>多重条件判定</h2><p>命令格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">test</span> <span class="token parameter variable">-r</span> filename <span class="token parameter variable">-a</span> <span class="token parameter variable">-x</span> filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>测试参数</th><th>代表意义</th></tr></thead><tbody><tr><td>-a</td><td>两条件是否同时成立</td></tr><tr><td>-o</td><td>两条件是否至少一个成立</td></tr><tr><td>!</td><td>取反。如 test ! -x file，当file不可执行时，返回true</td></tr></tbody></table><h2 id="判断符号"><a href="#判断符号" class="headerlink" title="判断符号[]"></a>判断符号[]</h2><p><font color="red"><code>[]</code></font>与<font color="red"><code>test</code></font>用法几乎一模一样，更常用于if语句中。另外<font color="red"><code>[[]]</code></font>是<font color="red"><code>[]</code></font>的加强版，支持的特性更多。</p><p>例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span> <span class="token number">2</span> <span class="token parameter variable">-lt</span> <span class="token number">3</span> <span class="token punctuation">]</span>  <span class="token comment"># 为真，返回值为0</span><span class="token builtin class-name">echo</span> <span class="token variable">$?</span>  <span class="token comment"># 输出上个命令的返回值，输出0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xtzy@DESKTOP-8LBB6V0:~$ <span class="token function">ls</span>  <span class="token comment"># 列出当前目录下的所有文件</span>homework  output.txt  test.sh  tmp│xtzy@DESKTOP-8LBB6V0:~$<span class="token punctuation">[</span> <span class="token parameter variable">-e</span> test.sh <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">"exist"</span> <span class="token operator">||</span> <span class="token builtin class-name">echo</span> <span class="token string">"Not exist"</span>exist  <span class="token comment"># test.sh 文件存在</span>│xtzy@DESKTOP-8LBB6V0:~$ <span class="token punctuation">[</span> <span class="token parameter variable">-e</span> test2.sh <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">"exist"</span> <span class="token operator">||</span> <span class="token builtin class-name">echo</span> <span class="token string">"Not exist"</span>Not exist  <span class="token comment"># testh2.sh 文件不存在</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><ul><li><font color="red"><code>[]</code></font>内的每一项都要用空格隔开</li><li>中括号内的变量，最好用双引号括起来</li><li>中括号内的常数，最好用单或双引号括起来</li></ul><p>例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"acwing xtzy"</span><span class="token punctuation">[</span> <span class="token variable">$name</span> <span class="token operator">==</span> <span class="token string">"acwing  xtzy"</span> <span class="token punctuation">]</span>  <span class="token comment"># 错误，等价于 [ acwing  xtzy == "acwing  xtzy" ]，参数太多</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$name</span>"</span> <span class="token operator">==</span> <span class="token string">"acwing yxc"</span> <span class="token punctuation">]</span>  <span class="token comment"># 正确</span><span class="token builtin class-name">type</span> <span class="token punctuation">[</span>    <span class="token comment"># [ 是一个命令</span><span class="token builtin class-name">type</span> <span class="token punctuation">]</span>    <span class="token comment"># ] 不是一个命令</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h1><h2 id="if…then形式"><a href="#if…then形式" class="headerlink" title="if…then形式"></a>if…then形式</h2><p>类似于<font color="red"><code>C/C++</code></font>中的<font color="red"><code>if-else</code></font>语句。</p><p>tips： if[A]</p><p>1.如果A是数字,则if[A]始终为真</p><p>2.如果A是个表达式,则用A的返回值也就是状态码,来决定if[A]的真假,不过当状态码为0时if[A]为真,当状态码为非0的时候if[A]为假</p><h3 id="单层if"><a href="#单层if" class="headerlink" title="单层if"></a><strong>单层if</strong></h3><p>命令格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> condition<span class="token keyword">then</span>    语句1    语句2    <span class="token punctuation">..</span>.<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">3</span><span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">4</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$a</span>"</span> <span class="token parameter variable">-lt</span> <span class="token string">"<span class="token variable">$b</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$a</span>"</span> <span class="token parameter variable">-gt</span> <span class="token number">2</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$&#123;a&#125;</span>在范围内<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">3在范围内<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="单层if-else"><a href="#单层if-else" class="headerlink" title="单层if-else"></a><strong>单层if-else</strong></h3><p>命令格式</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> condition<span class="token keyword">then</span>    语句1    语句2    <span class="token punctuation">..</span>.<span class="token keyword">else</span>    语句1    语句2    <span class="token punctuation">..</span>.<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">3</span><span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">4</span><span class="token keyword">if</span> <span class="token operator">!</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$a</span>"</span> <span class="token parameter variable">-lt</span> <span class="token string">"<span class="token variable">$b</span>"</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$&#123;a&#125;</span>不小于<span class="token variable">$&#123;b&#125;</span><span class="token keyword">else</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$&#123;a&#125;</span>小于<span class="token variable">$&#123;b&#125;</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">3小于4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="多层if-elif-elif-else"><a href="#多层if-elif-elif-else" class="headerlink" title="多层if-elif-elif-else"></a><strong>多层if-elif-elif-else</strong></h3><p>命令格式</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> condition<span class="token keyword">then</span>    语句1    语句2    <span class="token punctuation">..</span>.<span class="token keyword">elif</span> condition<span class="token keyword">then</span>    语句1    语句2    <span class="token punctuation">..</span>.<span class="token keyword">elif</span> condition<span class="token keyword">then</span>    语句1    语句2<span class="token keyword">else</span>    语句1    语句2    <span class="token punctuation">..</span>.<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">4</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-eq</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$&#123;a&#125;</span>等于1<span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-eq</span> <span class="token number">2</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$&#123;a&#125;</span>等于2<span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-eq</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$&#123;a&#125;</span>等于3<span class="token keyword">else</span>    <span class="token builtin class-name">echo</span> 其他<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">其他<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="case…esac形式"><a href="#case…esac形式" class="headerlink" title="case…esac形式"></a>case…esac形式</h2><p>类似于C&#x2F;C++中的switch语句。</p><p>命令格式</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">case</span> $变量名称 <span class="token keyword">in</span>    值1<span class="token punctuation">)</span>        语句1        语句2        <span class="token punctuation">..</span>.        <span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token comment"># 类似于C/C++中的break</span>    值2<span class="token punctuation">)</span>        语句1        语句2        <span class="token punctuation">..</span>.        <span class="token punctuation">;</span><span class="token punctuation">;</span>    *<span class="token punctuation">)</span>  <span class="token comment"># 类似于C/C++中的default</span>        语句1        语句2        <span class="token punctuation">..</span>.        <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">4</span><span class="token keyword">case</span> <span class="token variable">$a</span> <span class="token keyword">in</span>    <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token builtin class-name">echo</span> <span class="token variable">$&#123;a&#125;</span>等于1        <span class="token punctuation">;</span><span class="token punctuation">;</span>      <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token builtin class-name">echo</span> <span class="token variable">$&#123;a&#125;</span>等于2        <span class="token punctuation">;</span><span class="token punctuation">;</span>      <span class="token number">3</span><span class="token punctuation">)</span>                                                        <span class="token builtin class-name">echo</span> <span class="token variable">$&#123;a&#125;</span>等于3        <span class="token punctuation">;</span><span class="token punctuation">;</span>      *<span class="token punctuation">)</span>        <span class="token builtin class-name">echo</span> 其他        <span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token keyword">esac</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">其他<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><h2 id="for…in…do…done"><a href="#for…in…do…done" class="headerlink" title="for…in…do…done"></a><strong>for…in…do…done</strong></h2><p>命令格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token for-or-select variable">var</span> <span class="token keyword">in</span> val1 val2 val3<span class="token keyword">do</span>    语句1    语句2    <span class="token punctuation">..</span>.<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例1，输出a 2 cc，每个元素一行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> a <span class="token number">2</span> cc<span class="token keyword">do</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$i</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>示例2，输出当前路径下的所有文件名，每个文件名一行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token for-or-select variable">file</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">ls</span><span class="token variable">`</span></span><span class="token keyword">do</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$file</span><span class="token keyword">done</span>示例3，输出1-10<span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">seq</span> <span class="token number">1</span> <span class="token number">10</span><span class="token variable">)</span></span><span class="token keyword">do</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$i</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例4，使用<font color="red"><code>&#123;1..10&#125;</code></font> 或者 <font color="red"><code>&#123;a..z&#125;</code></font></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token punctuation">&#123;</span>a<span class="token punctuation">..</span>z<span class="token punctuation">&#125;</span><span class="token keyword">do</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$i</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="for-…-…-…-do…done"><a href="#for-…-…-…-do…done" class="headerlink" title="for ((…;…;…)) do…done"></a>for ((…;…;…)) do…done</h2><p>命令格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>expression<span class="token punctuation">;</span> condition<span class="token punctuation">;</span> expression<span class="token punctuation">))</span></span><span class="token keyword">do</span>    语句1    语句2<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例，输出1-10，每个数占一行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token keyword">do</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$i</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="while…do…done循环"><a href="#while…do…done循环" class="headerlink" title="while…do…done循环"></a>while…do…done循环</h2><p>命令格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">while</span> condition<span class="token keyword">do</span>    语句1    语句2    <span class="token punctuation">..</span>.<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例，文件结束符为<font color="red"><code>Ctrl+d</code></font>，输入文件结束符后<font color="red"><code>read</code></font>指令返回false。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">while</span> <span class="token builtin class-name">read</span> name<span class="token keyword">do</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$name</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="until…do…done循环"><a href="#until…do…done循环" class="headerlink" title="until…do…done循环"></a>until…do…done循环</h2><p>当条件为真时结束。</p><p>命令格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">until</span> condition<span class="token keyword">do</span>    语句1    语句2    <span class="token punctuation">..</span>.<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例，当用户输入yes或者YES时结束，否则一直等待读入。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">until</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$&#123;word&#125;</span>"</span> <span class="token operator">==</span> <span class="token string">"yes"</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$&#123;word&#125;</span>"</span> <span class="token operator">==</span> <span class="token string">"YES"</span> <span class="token punctuation">]</span><span class="token keyword">do</span>    <span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">"Please input yes/YES to stop this program: "</span> word<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="break命令（"><a href="#break命令（" class="headerlink" title="break命令（?)"></a>break命令（?)</h2><p>跳出当前一层循环，注意与C&#x2F;C++不同的是：break不能跳出<font color="red"><code>case</code></font>语句。</p><p><strong>break跳出的是for循环, ;;跳出的是case</strong></p><p>示例:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">while</span> <span class="token builtin class-name">read</span> name<span class="token keyword">do</span>    <span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">))</span></span>    <span class="token keyword">do</span>        <span class="token keyword">case</span> <span class="token variable">$i</span> <span class="token keyword">in</span>            <span class="token number">8</span><span class="token punctuation">)</span>                <span class="token builtin class-name">break</span>                <span class="token punctuation">;</span><span class="token punctuation">;</span>            *<span class="token punctuation">)</span>                <span class="token builtin class-name">echo</span> <span class="token variable">$i</span>                <span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token keyword">esac</span>    <span class="token keyword">done</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该示例每读入非EOF的字符串，会输出一遍1-7。<br>该程序可以输入<font color="red"><code>Ctrl+d</code></font>文件结束符来结束，也可以直接用<font color="red"><code>Ctrl+c</code></font>杀掉该进程。</p><h2 id="continue命令"><a href="#continue命令" class="headerlink" title="continue命令"></a>continue命令</h2><p>跳出当前循环。</p><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token keyword">do</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $i % <span class="token number">2</span><span class="token variable">`</span></span> <span class="token parameter variable">-eq</span> <span class="token number">0</span> <span class="token punctuation">]</span>    <span class="token keyword">then</span>        <span class="token builtin class-name">continue</span>    <span class="token keyword">fi</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$i</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该程序输出1-10中的所有奇数。</p><h2 id="死循环的处理方式"><a href="#死循环的处理方式" class="headerlink" title="死循环的处理方式"></a>死循环的处理方式</h2><p>如果Terminal可以打开该程序，则输入<font color="red"><code>Ctrl+c</code></font>即可。</p><p>否则可以直接关闭进程：</p><p>使用<font color="red"><code>top</code></font>命令找到进程的PID<br>输入<font color="red"><code>kill -9 PID</code></font>即可关掉此进程</p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p><font color="red"><code>bash</code></font>中的函数类似于<font color="red"><code>C/C++</code></font>中的函数，但return<font color="red"><code>top</code></font>的返回值与<font color="red"><code>C/C++</code></font>不同，返回的是<font color="red"><code>exit code</code></font>，取值为0-255，0表示正常结束。</p><p>如果想获取函数的输出结果，可以通过<font color="red"><code>echo</code></font>输出到<font color="red"><code>stdout</code></font>中，然后通过<font color="red"><code>$(function_name)</code></font>来获取<font color="red"><code>stdout</code></font>中的结果。</p><p>函数的<font color="red"><code>return</code></font>值可以通过<font color="red"><code>$?</code></font>来获取。</p><p>命令格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>function<span class="token punctuation">]</span> <span class="token function-name function">func_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment"># function关键字可以省略</span>    语句1    语句2    <span class="token punctuation">..</span>.<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不获取 <font color="red"><code>return</code></font>值和<font color="red"><code>stdout</code></font>值<br>示例</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token assign-left variable">name</span><span class="token operator">=</span>xtzy    <span class="token builtin class-name">echo</span> <span class="token string">"Hello <span class="token variable">$name</span>"</span><span class="token punctuation">&#125;</span>func<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Hello xtzy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获取<font color="red"><code> return</code></font>值和<font color="red"><code>stdout</code></font>值<br>不写<font color="red"><code>return</code></font>时，默认<font color="red"><code>return 0</code></font>。</p><p>示例</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token assign-left variable">name</span><span class="token operator">=</span>xtzy    <span class="token builtin class-name">echo</span> <span class="token string">"Hello <span class="token variable">$name</span>"</span><span class="token builtin class-name">return</span> <span class="token number">123</span><span class="token punctuation">&#125;</span><span class="token assign-left variable">output</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>func<span class="token variable">)</span></span><span class="token assign-left variable">ret</span><span class="token operator">=</span><span class="token variable">$?</span><span class="token builtin class-name">echo</span> <span class="token string">"output = <span class="token variable">$output</span>"</span><span class="token builtin class-name">echo</span> <span class="token string">"return = <span class="token variable">$ret</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">output <span class="token operator">=</span> Hello xtzy<span class="token builtin class-name">return</span> <span class="token operator">=</span> <span class="token number">123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="函数的输入参数"><a href="#函数的输入参数" class="headerlink" title="函数的输入参数"></a>函数的输入参数</h2><p>在函数内，<font color="red"><code>$1</code></font>表示第一个输入参数，<font color="red"><code>$2</code></font>表示第二个输入参数，依此类推。</p><p>注意：函数内的<font color="red"><code>$0</code></font>仍然是文件名，而不是函数名。</p><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$1</span> <span class="token parameter variable">-le</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token keyword">then</span><span class="token builtin class-name">echo</span> <span class="token number">0</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token keyword">fi</span><span class="token assign-left variable">sum</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>func <span class="token punctuation">$(</span>expr $1 - <span class="token number">1</span><span class="token punctuation">)</span><span class="token variable">)</span></span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">expr</span> $sum + $1<span class="token variable">)</span></span><span class="token punctuation">&#125;</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$(</span>func <span class="token number">10</span><span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment"># 递归计算 $1 + ($1 - 1) + ($1 - 2) + ... + 0</span>    <span class="token assign-left variable">word</span><span class="token operator">=</span><span class="token string">""</span>    <span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$&#123;word&#125;</span>"</span> <span class="token operator">!=</span> <span class="token string">'y'</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$&#123;word&#125;</span>"</span> <span class="token operator">!=</span> <span class="token string">'n'</span> <span class="token punctuation">]</span>    <span class="token keyword">do</span>        <span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">"要进入func(<span class="token variable">$1</span>)函数吗？请输入y/n："</span> word    <span class="token keyword">done</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$word</span>"</span> <span class="token operator">==</span> <span class="token string">'n'</span> <span class="token punctuation">]</span>    <span class="token keyword">then</span>        <span class="token builtin class-name">echo</span> <span class="token number">0</span>        <span class="token builtin class-name">return</span> <span class="token number">0</span>    <span class="token keyword">fi</span>      <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$1</span> <span class="token parameter variable">-le</span> <span class="token number">0</span> <span class="token punctuation">]</span>     <span class="token keyword">then</span>        <span class="token builtin class-name">echo</span> <span class="token number">0</span>        <span class="token builtin class-name">return</span> <span class="token number">0</span>    <span class="token keyword">fi</span>      <span class="token assign-left variable">sum</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>func <span class="token punctuation">$(</span>expr $1 - <span class="token number">1</span><span class="token punctuation">)</span><span class="token variable">)</span></span>    <span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">expr</span> $sum + $1<span class="token variable">)</span></span>   <span class="token punctuation">&#125;</span>   <span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$(</span>func <span class="token number">10</span><span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">55<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="函数内的局部变量"><a href="#函数内的局部变量" class="headerlink" title="函数内的局部变量"></a>函数内的局部变量</h2><p>可以在函数内定义局部变量，作用范围仅在当前函数内。</p><p>可以在递归函数中定义局部变量。</p><p>命令格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">local</span> 变量名<span class="token operator">=</span>变量值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token function-name function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">name</span><span class="token operator">=</span>xtzy    <span class="token builtin class-name">echo</span> <span class="token variable">$name</span><span class="token punctuation">&#125;</span>func<span class="token builtin class-name">echo</span> <span class="token variable">$name</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">xtzy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一行为函数内的name变量，第二行为函数外调用name变量，会发现此时该变量不存在。</p><h1 id="exit命令"><a href="#exit命令" class="headerlink" title="exit命令"></a>exit命令</h1><p><font color="red"><code>exit</code></font>命令用来退出当前<font color="red"><code>shell</code></font>进程，并返回一个退出状态；使用$?可以接收这个退出状态。</p><p><font color="red"><code>exit</code></font>命令可以接受一个整数值作为参数，代表退出状态。如果不指定，默认状态值是 0。</p><p><font color="red"><code>exit</code></font>退出状态只能是一个介于 0~255 之间的整数，其中只有 0 表示成功，其它值都表示失败。</p><p>示例：</p><p>创建脚本<font color="red"><code>test.sh</code></font>，内容如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$#</span> <span class="token parameter variable">-ne</span> <span class="token number">1</span> <span class="token punctuation">]</span>  <span class="token comment"># 如果传入参数个数等于1，则正常退出；否则非正常退出。</span><span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"arguments not valid"</span>    <span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token keyword">else</span>    <span class="token builtin class-name">echo</span> <span class="token string">"arguments valid"</span>    <span class="token builtin class-name">exit</span> <span class="token number">0</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行该脚本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xtzy@DESKTOP-8LBB6V0:~$ <span class="token function">chmod</span> +x test.sh xtzy@DESKTOP-8LBB6V0:~$./test.sh acwingarguments validxtzy@DESKTOP-8LBB6V0:~$ <span class="token builtin class-name">echo</span> <span class="token variable">$?</span>  <span class="token comment"># 传入一个参数，则正常退出，exit code为0</span><span class="token number">0</span>xtzy@DESKTOP-8LBB6V0:~$ ./test.sh arguments not validxtzy@DESKTOP-8LBB6V0:~<span class="token variable">$echo</span> <span class="token variable">$?</span>  <span class="token comment"># 传入参数个数不是1，则非正常退出，exit code为1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="文件重定向"><a href="#文件重定向" class="headerlink" title="文件重定向"></a>文件重定向</h1><p>每个进程默认打开3个文件描述符：</p><ul><li><font color="red"><code>stdin</code></font>标准输入，从命令行读取数据，文件描述符为0</li><li><font color="red"><code>stdout</code></font>标准输出，向命令行输出数据，文件描述符为1</li><li><font color="red"><code>stderr</code></font>标准错误输出，向命令行输出数据，文件描述符为2</li></ul><p>可以用文件重定向将这三个文件重定向到其他文件中</p><h2 id="重定向命令列表"><a href="#重定向命令列表" class="headerlink" title="重定向命令列表"></a>重定向命令列表</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><font color="red"><code>command &gt; file</code></font></td><td>将<font color="red"><code>stdout</code></font>重定向到<font color="red"><code>file</code></font>中</td></tr><tr><td><font color="red"><code>command &lt; file</code></font></td><td>将<font color="red"><code>stdin</code></font>重定向到<font color="red"><code>file</code></font>中</td></tr><tr><td><font color="red"><code>command &gt;&gt; file</code></font></td><td>将<font color="red"><code>stdout</code></font>以追加方式重定向到<font color="red"><code>file</code></font>中</td></tr><tr><td><font color="red"><code>command n&gt; file</code></font></td><td>将文件描述符<font color="red"><code>n</code></font>重定向到file<font color="red"><code>exit</code></font>中</td></tr><tr><td><font color="red"><code>command n&gt;&gt; file</code></font></td><td>将文件描述符<font color="red"><code>n</code></font>以追加方式重定向到<font color="red"><code>file</code></font>中</td></tr></tbody></table><h2 id="输入和输出重定向"><a href="#输入和输出重定向" class="headerlink" title="输入和输出重定向"></a>输入和输出重定向</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"Hello <span class="token entity" title="\c">\c</span>"</span> <span class="token operator">></span> output.txt  <span class="token comment"># 将stdout重定向到output.txt中</span><span class="token builtin class-name">echo</span> <span class="token string">"World"</span> <span class="token operator">>></span> output.txt  <span class="token comment"># 将字符串追加到output.txt中</span><span class="token builtin class-name">read</span> str <span class="token operator">&lt;</span> output.txt  <span class="token comment"># 从output.txt中读取字符串</span><span class="token builtin class-name">echo</span> <span class="token variable">$str</span>  <span class="token comment"># 输出结果：Hello World</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="同时重定向stdin和stdout"><a href="#同时重定向stdin和stdout" class="headerlink" title="同时重定向stdin和stdout"></a>同时重定向stdin和stdout</h2><p>创建bash脚本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token builtin class-name">read</span> a<span class="token builtin class-name">read</span> b<span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">expr</span> <span class="token string">"<span class="token variable">$a</span>"</span> + <span class="token string">"<span class="token variable">$b</span>"</span><span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建input.txt，里面的内容为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">3</span><span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>执行命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xtzy@DESKTOP-8LBB6V0:~$ <span class="token function">chmod</span> +x test.sh  <span class="token comment"># 添加可执行权限</span>xtzy@DESKTOP-8LBB6V0:~$ ./test.sh <span class="token operator">&lt;</span> input.txt <span class="token operator">></span> output.txt  <span class="token comment"># 从input.txt中读取内容，将输出写入output.txt中</span>xtzy@DESKTOP-8LBB6V0:~$ <span class="token function">cat</span> output.txt  <span class="token comment"># 查看output.txt中的内容</span><span class="token number">7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="引入外部脚本"><a href="#引入外部脚本" class="headerlink" title="引入外部脚本"></a>引入外部脚本</h1><p>类似于<font color="red"><code>C/C++</code></font>中的<font color="red"><code>include</code></font>操作，bash也可以引入其他文件中的代码。</p><p>语法格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">.</span> filename  <span class="token comment"># 注意点和文件名之间有一个空格</span>或<span class="token builtin class-name">source</span> filename<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例<br>创建<font color="red"><code>test1.sh</code></font>，内容为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token assign-left variable">name</span><span class="token operator">=</span>xtzy  <span class="token comment"># 定义变量name</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后创建<font color="red"><code>test2.sh</code></font>，内容为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token builtin class-name">source</span> test1.sh <span class="token comment"># 或 . test1.sh  </span><span class="token builtin class-name">echo</span> My name is: <span class="token variable">$name</span>  <span class="token comment"># 可以使用test1.sh中的变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xtzy@DESKTOP-8LBB6V0:~<span class="token variable">$chmod</span> +x test2.sh xtzy@DESKTOP-8LBB6V0:~$ ./test2.sh My name is: xtzy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux学习</title>
      <link href="/2023/08/19/linux%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/08/19/linux%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>服务器一般没有图形化界面,所有自然而然就要用到linux操作系统进行操作咯。</p><h1 id="1-1-常用文件管理命令"><a href="#1-1-常用文件管理命令" class="headerlink" title="1.1 常用文件管理命令"></a>1.1 常用文件管理命令</h1><p><font color="red"><code>bin</code></font>文件夹:  存的是一些常用的可执行命令</p><p><font color="red"><code>etc</code></font>文件夹:  存的是一些配置文件</p><p><font color="red"><code>var</code></font>文件夹:  存的是一些日志文件</p><p><font color="red"><code>lib</code></font>文件夹:  存的是一些安装包和头文件</p><p><font color="red"><code>home</code></font>文件夹:  存的是所有用户的根目录</p><p><font color="red"><code>proc</code></font>文件夹:  存的是进程相关的一些信息</p><p>回到家目录:  <font color="red"><code>cd ~/</code></font>   或者  <font color="red"><code>cd</code></font></p><p>清除本行:  <font color="red"><code>ctrl + u</code></font></p><p>ls常用参数:  <mark>-l -a -h  </mark>       <mark>  ll &#x3D; ls - la </mark> </p><p>显示当前路径：<font color="red"><code>pwd</code></font></p><p>返回上一层： <font color="red"><code>cd ..</code></font></p><p>返回上一个呆过的目录: <font color="red"><code>cd -</code></font></p><p>复制文件:   <mark>  cp 源文件 目标文件 </mark>     <font color="blue"><code>cp = 复制 + 粘贴 + 重命名</code></font>    <font color="red"><code>复制文件夹加参数 </code></font></p><p>给文件夹的名字起空格: 转义加 <mark> \ </mark> 即可</p><p>创建层级文件夹: <font color="red"><code>mkdir a/b/c -p  </code></font></p><p>创建文件: <font color="red"><code>touch xxx</code></font></p><p>查看历史指令记录; <font color="red"><code>history</code></font></p><p>删除:   <font color="red"><code>  rm xxx yyy  -r(递归删)</code></font>   删库跑路： <mark>  rm &#x2F;* -rf </mark> </p><p>取文件内容; <font color="red"><code>cat xxx</code></font></p><p>mv  cp 唯一区别 一个是直接移动 一个是复制黏贴</p><p> <mark>  top</mark>命令: 相当于windows下的任务管理器</p><h2 id="描述路径方式"><a href="#描述路径方式" class="headerlink" title="描述路径方式:"></a>描述路径方式:</h2><ul><li>绝对路径  （从根路径<mark>&#x2F;</mark>开始描述)</li><li>相对路径     (从当前路径开始描述)</li></ul><h1 id="2-1-tmux和vim"><a href="#2-1-tmux和vim" class="headerlink" title="2.1 tmux和vim"></a>2.1 tmux和vim</h1><h2 id="tmux"><a href="#tmux" class="headerlink" title="tmux"></a>tmux</h2><p>tmux最重要的两个作用: 1. <font color="red"><code>分屏</code></font>  2. <font color="red"><code>任务可以挂到云端执行</code></font></p><h3 id="安装tmux命令"><a href="#安装tmux命令" class="headerlink" title="安装tmux命令:"></a>安装tmux命令:</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> tmux<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="tmux修改ctrl-b-快捷键为ctrl-a"><a href="#tmux修改ctrl-b-快捷键为ctrl-a" class="headerlink" title="tmux修改ctrl + b 快捷键为ctrl + a"></a>tmux修改ctrl + b 快捷键为ctrl + a</h3><pre class="line-numbers language-none"><code class="language-none">vim ~&#x2F;.tmux.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="tmux操作："><a href="#tmux操作：" class="headerlink" title="tmux操作："></a>tmux操作：</h3><p>​1.tmux: 新建一个session，其中包含一个window,window中包含一个pane,pane里打开了一个shell对话框</p><p>​2.按下Ctrl + a 后手指松开,然后按<font color="red"><code>%</code></font>:  将当前pane左右半分成两个pane</p><p>​3.按下Ctrl + a  后手指松开,然后按”<font color="red"><code>代码</code></font>： 将当前pane上下半分成两个pane</p><p>​4.Ctrl + d: 关闭当前pane,如果当前windows的所有pane均以关闭,则自动关闭windows;如果当前session的所有windows均已关闭,则自动关闭session</p><p>​5.按下Ctrl + a 后手指松开,然后按方向键: 选择相邻的pane.</p><p>​6.按下Ctrl + a 的同时按方向键,可以调整pane之间分割线的位置.</p><p>​7.按下Ctrl + a 后手指松开,然后按<font color="red"><code>z</code></font>: 将当前pane全屏&#x2F;取消全屏。</p><p>​8.按下Ctrl + a 后手指松开,然后按<font color="red"><code>d</code></font>: 挂起当前session。</p><p>​9.tmux + a: 打开之前挂起的session </p><p>​10.按下Ctrl + a 后手指松开, 然后按s<font color="red"><code>代码</code></font>，选择其他session。</p><p>​方向键 - 上: 选择上一项 session&#x2F;window&#x2F;pane</p><p>​方向键 - 下: 选择下一项 session&#x2F;window&#x2F;pane</p><p>​方向键 - 右: 展开当前项 session&#x2F;window</p><p>​方向键 - 左: 闭合当前项 session&#x2F;window</p><p>​11.按下Ctrl + a  后手指松开, 然后按c,在当前session中创建一个新的window。</p><p>​12.按下Ctrl + a  后手指松开,然后按w,选择其他的window,操作方法与(10)完全相同</p><p>​13.按下Ctrl + a  后手指松开,然后按PageUp；翻阅当前pane内的内容</p><p>​14.在tmux中选中文本时，需要按住shift键.</p><p>​15.鼠标滚轮: 翻阅当前pane内的内容</p><p>​16.在tmux中选中文本时,需要按住shift键。   复制:  <mark>ctrl + insert</mark> 粘贴:  (<mark>linux)shift + insert</mark></p><h2 id="vim-命令行模式下的编辑器"><a href="#vim-命令行模式下的编辑器" class="headerlink" title="vim(命令行模式下的编辑器)"></a>vim(命令行模式下的编辑器)</h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能:"></a>功能:</h3><p>​1.命令行模式下的文本编辑器.</p><p>​2.根据文件扩展名自动判别编程语言,支持代码缩进、代码高亮等功能.</p><p>​3.使用方式: vim filename</p><p>​如果已有该文件,则打开它.</p><p>​如果没有该文件,则打开一个新的文件，并命名为filename</p><h3 id="模式"><a href="#模式" class="headerlink" title="模式:"></a>模式:</h3><p>​    1.一般命令模式</p><p>​默认模式: 命令输入方式: 类似于打游戏放技能,按不同字符，即可进行不同操作。可以复制,粘贴</p><p>删除文本等.</p><p>​2.编辑模式</p><p>​在一般命令模式下按下i，会进入编辑模式.</p><p>​按下ESC键退出编辑模式,返回到一般命令模式》</p><p>​3.命令行模式</p><p>​在一般命令模式下按下:&#x2F;?三个字母中的任意一个,会进入命令行模式,命令行在最下谜案.</p><h3 id="操作"><a href="#操作" class="headerlink" title="操作:"></a>操作:</h3><p>​1.i: 进入编辑模式</p><p>​2.ESC:  进入一般命令模式</p><p>​3.h 或 左箭头键: 光标向左移动一个字符</p><p>​4.j  或 向下箭头:  光标向下移动一个字符</p><p>​5.k 或 向上箭头:  光标向上移动一个字符</p><p>​6.l  或 向右箭头:   光表向右移动一个字符</p><p>​7.n&lt;<font color="red"><code>space&gt;</code></font>： n表示数字,按下数字后再按空格,光标会向右移动这一行的n个字符</p><p>​8.0 或 功能键[home]: 光标移动到本行开头</p><p>​9.$或 功能键[End]: 光标移动到本行末尾</p><p>​    10.G： 光标移动到最后一行</p><p>​11. :n 或 nG: n为数字,光标移动到第n行</p><p>​12. gg: 光标移动到第一行, 相当于1G</p><p>​13.n<font color="red"><code>&lt;Enter&gt;</code></font>: n为数字,光标向下移动到第n行</p><p>​14. &#x2F;word: 向光标之下寻找第一个值为word的字符串.</p><p>​15. ?word: 向光标之上寻找第一个值为word的字符串.</p><p>​16.n: 重复前一个查找操作</p><p>​17.N: 反向重复前一个查找操作</p><p>​18.:n1,n2s&#x2F;word1&#x2F;word2&#x2F;g: n1与n2为数字,在第你n1行与n2行之间寻找word1这个字符串,并将该字符串替换为word2</p><p>​19. :1,$s&#x2F;word1&#x2F;word2&#x2F;g: 将全文的word1替换为word2</p><p>​20. :1,$s&#x2F;word1&#x2F;word2&#x2F;gc: 将全文的word1替换为word2, 且在替换前要求用户确认》</p><p>​21. v: 选中文本</p><p>​22.d: 删除选中的文本</p><p>​23.dd: 删除当前行</p><p>​24.y: 复制选中的文本</p><p>​25.yy:  复制当行</p><p>​26.p: 将复制的数据在光标的下一行黏贴</p><p>​27.u: 撤销</p><p>​28.Ctrl + r: 取消撤销</p><p>​29.Shift + &gt;: 将选中的文本整体向右移动</p><p>​30.Shift + &lt;: 将选中的文本整体向左移动</p><p>​31.:w : 保存</p><p>​32: :w! : 强制保存</p><p>​33. :q: 退出</p><p>​34. :q! : 强制退出</p><p>​35. :wq : 保存并退出</p><p>​36. :set paste 设置为粘贴模式,取消代码自动缩进</p><p>​37. :set nopaste 取消粘贴模式,开启代码自动缩进</p><p>​38  :set nu 显示行号</p><p>​39. :set nonu 隐藏行号</p><p>​40. gg&#x3D;G ： 将全文代码格式化</p><p>​41. :noh  关闭查找关键词高亮</p><p>​42. Ctrl + q： 当vim卡死时,可以取消当前在执行的命令</p><p>异常处理:</p><p>​每次用vim编辑文件时,会自动创建一个.filename.swp的临时文件.</p><p>​如果打开某个文件时,该文件的swap文件已存在,则会报错.此时解决方法有两种</p><p>​1.找到正在打开该文件的程序,并退出</p><p>​2.直接删掉该swp文件即可</p><h3 id="组合连招"><a href="#组合连招" class="headerlink" title="组合连招:"></a>组合连招:</h3><p>删除全部文本: <mark>gg d G</mark></p><p>将全文代码格式化 <mark>gg &#x3D; G</mark></p><h1 id="3-1-Shell语法"><a href="#3-1-Shell语法" class="headerlink" title="3.1 Shell语法"></a>3.1 Shell语法</h1><p><a href="https://xtzy.xyz/2023/08/21/shell%E5%AD%A6%E4%B9%A0/">shell学习 | xtzyのblog</a></p><h1 id="4-1-ssh"><a href="#4-1-ssh" class="headerlink" title="4.1 ssh"></a>4.1 ssh</h1><p><a href="https://xtzy.xyz/2023/08/21/ssh%E5%AD%A6%E4%B9%A0/">ssh | xtzyのblog</a></p><h1 id="5-1-git"><a href="#5-1-git" class="headerlink" title="5.1 git"></a>5.1 git</h1><h1 id="6-1-thrift"><a href="#6-1-thrift" class="headerlink" title="6.1 thrift"></a>6.1 thrift</h1><p><a href="https://www.bilibili.com/">thrift学习</a></p><h1 id="7-1-管道、环境变量与常用命令"><a href="#7-1-管道、环境变量与常用命令" class="headerlink" title="7.1 管道、环境变量与常用命令"></a>7.1 管道、环境变量与常用命令</h1><h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>管理类似于文件重定向,可以将前一个命令的<font color="red"><code>stout</code></font>重定向到下一个命令的<font color="red"><code>stdin</code></font>.</p><h3 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h3><p>1.管理命令仅处理<font color="red"><code>stout</code></font>，会忽略<font color="red"><code>stderr</code></font></p><p>2.管道右边的命令必须能接受<font color="red"><code>stdin</code></font></p><p>3.多个管道命令可以串联</p><h3 id="与文件重定向的区别"><a href="#与文件重定向的区别" class="headerlink" title="与文件重定向的区别"></a>与文件重定向的区别</h3><ul><li>文件重定向左边为命令，右边为文件</li><li>管道左右两边均为命令，左边有<font color="red"><code>stout</code></font>，右边有<font color="red"><code>stdin</code></font></li></ul><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>统计当前目录所有python文件的总行数。其中<font color="red"><code>代码</code></font>、<font color="red"><code>代码</code></font>、<font color="red"><code>代码</code></font>等命令可以参考常用命令</p><p>统计当前目录下的所有python文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-name</span> <span class="token string">'*.py'</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">cat</span> <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span><span class="token comment"># xargs的作用: 将标准输入的内容用空格隔开 作为cat的命令行参数传给cat(将标准输入变成文件参数)</span>xrags cat: 将前面的文件用cat cat一遍 列表出前面文件的所有内容<span class="token function">wc</span> <span class="token parameter variable">-l</span> 统计标准输入的内容的总行数<span class="token comment"># 将 cat出来的文件名作为参数</span><span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-name</span> <span class="token string">'*.py'</span> <span class="token operator">|</span> <span class="token function">cat</span> <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>Linux系统中会用到很多环境变量来记录配置信息。</p><p>环境变量类似于全局变量，可以被各个进程访问到。我们可以通过修改环境变量来方便地修改系统配置。</p><h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><p>列出当前环境下的所有环境变量。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">env</span> <span class="token comment"># 显示当前用户的变量</span><span class="token builtin class-name">set</span> <span class="token comment"># 显示当前shell的变量，包括当前用户的变量</span><span class="token builtin class-name">export</span> <span class="token comment"># 显示当前导出成用户变量的shell变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>输出某个环境变量的值:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token environment constant">$PATH</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>环境变量的定义、修改、删除操作可以参考shell语法-变量这一节的内容。</p><p>为了将环境变量的修改应用到未来所有环境下、可以将修改命令放</p><p><font color="red"><code>~/.bashrc</code></font>文件中。</p><p>修改完<font color="red"><code>~/.bashrc</code></font>文件后,记得执行<font color="red"><code>source ~/.bashrc</code></font>,来将修改应用到当前的<font color="red"><code>bash</code></font>环境下.</p><p>为何将修改命令放到<font color="red"><code>~/.bashrc</code></font>,就可以确保修改会影响未来所有的环境呢?</p><ul><li>每次启动<font color="red"><code>bash</code></font>,都会先执行<font color="red"><code>~/.bashrc</code></font></li><li>每次<font color="red"><code>ssh</code></font>登录远程服务器,都会启动一个<font color="red"><code>bash</code></font>命令行给我们。</li><li>每次<font color="red"><code>tmux</code></font>新卡一个pane,都会启动一个<font color="red"><code>bash</code></font>命令行给我们。</li><li>所以未来所有新开的环境都会加载我们修改的内容。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">HOME</span></span><span class="token operator">=</span>/home/xtzy/xx文件夹 <span class="token comment"># 修改路径 退出新开bash就无效 需要在.bashrc文件夹修改才能全局应用</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="常用的环境变量"><a href="#常用的环境变量" class="headerlink" title="常用的环境变量"></a>常用的环境变量</h3><p>1.<font color="red"><code>HOME</code></font>: 用户的家目录</p><p>2.<font color="red"><code>PATH</code></font>: 可执行文件(命令)的存储路径。路径与路径之间用<font color="red"><code>:</code></font>分隔.当某个可执行文件同时出现在多个路径中时,会选择从左到右第一个路径中的执行。下列所有存储路径的环境变量,均采用从左到右的优先顺序.</p><p>3.<font color="red"><code>LD_LIBRARY_PATH</code></font>: 用于指定动态链接库(.so文件)的路径，其内容时以冒号分隔的路径列表.</p><p>4.<font color="red"><code>C_INCLUDE_PATH</code></font>： C语言的头文件路径,内容是以冒号分隔的路径列表。</p><p>5.<font color="red"><code>CPLUS_INCLUDE_PATH</code></font>: Cpp的头文件路径,内容时以冒号分隔的路径列表。3333</p><p>6.<font color="red"><code>PYTHONPATH</code></font>： Python导入包的路径，内容时以冒号分隔的路径列表.</p><p>7.<font color="red"><code>JAVA_HOME</code></font>: jdk的安装目录。</p><p>8.<font color="red"><code>CLASSPATH</code></font>: 存放Java导入类的路径,内容是冒号分隔的路径列表。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># cpu的信息</span><span class="token builtin class-name">cd</span> /proc/cpuinfo<span class="token comment"># 如何到command命令</span><span class="token comment">#  遍历PATH里的所有路径 直到找到第一个和command匹配的命令</span><span class="token comment"># 如何将一个可执行文件test变成一个命令？</span><span class="token comment"># 先pwd 把当前路径复制下来</span><span class="token comment"># 打开家目录下的.bashrc文件</span><span class="token comment"># 修改PATH</span><span class="token function">vim</span> ~/.bashrc<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>路径:<span class="token environment constant">$PATH</span><span class="token builtin class-name">source</span> ~/.bashrc<span class="token comment"># 再看path的内容就多了一个目录</span><span class="token builtin class-name">echo</span> <span class="token environment constant">$PATH</span><span class="token comment"># 退出登录以后就有了test命令</span><span class="token builtin class-name">test</span><span class="token comment"># 做完记得将.bashrc进行回滚</span><span class="token comment"># 如果动态链接库的PATH是空的 会特定找几个默认的地方</span>/usr/local/lib//usr/include/usr/include/c++g++ 在加载时 先将CPLUS_INCLUDE_PATH里的所有路径先遍历一遍<span class="token comment"># 打开python交互式解释器</span>ipython  <span class="token comment"># 支持一些bash命令 补全更完整</span><span class="token function">import</span> randomrandom.randint<span class="token punctuation">(</span><span class="token number">1,10</span><span class="token punctuation">)</span>random.randint<span class="token punctuation">(</span><span class="token number">1,10</span><span class="token punctuation">)</span>random.randint<span class="token punctuation">(</span><span class="token number">1,10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="系统状况"><a href="#系统状况" class="headerlink" title="系统状况"></a>系统状况</h2><ol><li><p><font color="red"><code>top</code></font>: 查看所有进程的信息(Linux的任务管理器)</p><ul><li>打开后,输入<font color="red"><code>M</code></font>：按使用内存排序</li><li>打开后,输入<font color="red"><code>P</code></font>：按使用CPU排序</li><li>打开后,输入<font color="red"><code>q</code></font>： 退出</li></ul></li><li><p><font color="red"><code>df -h</code></font>： 查看硬盘使用情况</p></li><li><p><font color="red"><code>free -h</code></font>： 查看内存使用情况</p></li><li><p><font color="red"><code>du -sh</code></font>: 查看当前目录占用的硬盘空间 (-ch 是详细看)</p></li><li><p><font color="red"><code>ps aux</code></font>: 查看所有进程(一般用来查某个进程)</p><ul><li><pre><code class="shell">ps aus | grep xxx # 查某个进程kill -9 pid  # 杀掉进程<pre class="line-numbers language-none"><code class="language-none">     6. &lt;font color&#x3D;&quot;red&quot;&gt;&#96;kill -9 pid&#96;&lt;&#x2F;font&gt;: 杀死编号为&lt;font color&#x3D;&quot;red&quot;&gt;&#96;pid&#96;&lt;&#x2F;font&gt;的进程   - 传递某个具体的信号: &lt;font color&#x3D;&quot;red&quot;&gt;&#96;kill -s SIGTERM pid&#96;&lt;&#x2F;font&gt;7. &lt;font color&#x3D;&quot;red&quot;&gt;&#96;netstat -nt&#96;&lt;&#x2F;font&gt;： 查看所有网络连接8. &lt;font color&#x3D;&quot;red&quot;&gt;&#96;w&#96;&lt;&#x2F;font&gt;: 列出当前登录的用户9. &lt;font color&#x3D;&quot;red&quot;&gt;&#96;ping www.baidu,com&#96;&lt;&#x2F;font&gt;：检查是否连网## 文件权限1.&lt;font color&#x3D;&quot;red&quot;&gt;&#96;chmod&#96;&lt;&#x2F;font&gt;：修改文件权限- &lt;font color&#x3D;&quot;red&quot;&gt;&#96;chmod +x xxx&#96;&lt;&#x2F;font&gt;：给&lt;font color&#x3D;&quot;red&quot;&gt;&#96;xxx&#96;&lt;&#x2F;font&gt;添加可执行权限- &lt;font color&#x3D;&quot;red&quot;&gt;&#96;chmod -x xxx&#96;&lt;&#x2F;font&gt;： 去掉&lt;font color&#x3D;&quot;red&quot;&gt;&#96;xxx&#96;&lt;&#x2F;font&gt;的可执行权限- &lt;font color&#x3D;&quot;red&quot;&gt;&#96;chmod 777 xxx&#96;&lt;&#x2F;font&gt;：将&lt;font color&#x3D;&quot;red&quot;&gt;&#96;xxx&#96;&lt;&#x2F;font&gt;的权限改成777- &lt;font color&#x3D;&quot;red&quot;&gt;&#96;chmod 777 xxx -R&#96;&lt;&#x2F;font&gt;：递归修改整个文件夹的权限## 文件检索1,&lt;font color&#x3D;&quot;red&quot;&gt;&#96;find &#x2F;path&#x2F;to&#x2F;directory&#x2F; -name &#39;*.py&#39;&#96;&lt;&#x2F;font&gt;: 搜索某个文件路径下的所有&lt;font color&#x3D;&quot;red&quot;&gt;&#96;.py&#96;&lt;&#x2F;font&gt;文件2.&lt;font color&#x3D;&quot;red&quot;&gt;&#96;grep xxx&#96;&lt;&#x2F;font&gt;: 从&lt;font color&#x3D;&quot;red&quot;&gt;&#96;stdin&#96;&lt;&#x2F;font&gt;中读入若干行数据，如果某行中包含&lt;font color&#x3D;&quot;red&quot;&gt;&#96;xxx&#96;&lt;&#x2F;font&gt;,则输出该行；否则忽略该行。- &#96;&#96;&#96;shell  # 通过find + grep 实现全文的搜索和过滤  find homework&#x2F;lesson_6 -name &#39;*.cpp&#39; | xargs cat | grep &#39;acs-x&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li></ul></li></ol><p>3.<font color="red"><code>wc</code></font>： 统计行数、单词数、字节数</p><ul><li><p>既可以从<font color="red"><code>stdin</code></font>中直接读入内容；也可以在命令行参数中传入文件名列表;</p></li><li><p><font color="red"><code>wc -l</code></font>: 统计行数</p></li><li><p><font color="red"><code>wc -w</code></font>: 统计单词数</p></li><li><p><font color="red"><code>wc -c</code></font>: 统计字节数</p></li><li><pre><code class="shell"># 既可以接收标准读入 也可以接收文件参数wcabc def ghixtzy tzy zyctrl + d结束# 统计某个文件的总行数find . name &#39;*.xx&#39; | xargs cat | wc -l</code></pre></li></ul><p>4.<font color="red"><code>tree</code></font>： 展示当前目录的文件结构</p><ul><li><font color="red"><code>tree /path/to/directory</code></font>: 展示某个目录的文件结构</li><li><font color="red"><code>tree -a</code></font>: 展示隐藏文件</li></ul><p>5.<font color="red"><code>ag xxx</code></font>：搜索当前目录下的所有文件,检索<font color="red"><code>xxx</code></font>字符串 (非常重要！！！)</p><p>6.<font color="red"><code>cut</code></font>: 分割一行内容</p><ul><li>从<font color="red"><code>stdin</code></font>中读入多行数据</li><li><font color="red"><code>echo $PATH | cut -d &#39;:&#39; -f 3,5</code></font>：输出<font color="red"><code>PATH</code></font>用<font color="red"><code>:</code></font>分割第3、5列数据</li><li><font color="red"><code>echo $PATH | cut -d &#39;:&#39; -f 3-5</code></font>：输出<font color="red"><code>PATH</code></font>用<font color="red"><code>:</code></font>分割第3-5列数据</li><li><font color="red"><code>echo $PATH | cut -c 3,5</code></font>：输出<font color="red"><code>PATH</code></font>的第3、5个字符</li><li><font color="red"><code>echo $PATH | cut -c 3-5</code></font>：输出<font color="red"><code>PATH</code></font>的第3-5个字符</li></ul><p>7.<font color="red"><code>sort</code></font>： 将每行内容按字典序排序 （可以和find一起使用)</p><ul><li>可以从<font color="red"><code>stdin</code></font>中读取多行数据</li><li>可以从命令行参数中读取文件名列表</li></ul><p>8.<font color="red"><code>xargs</code></font>: 将<font color="red"><code>stdin</code></font>中的数据用空格或回车分割成命令行参数(有些命令不接受标准输入)</p><ul><li><font color="red"><code>find . -name &#39;*.py&#39; | xargs cat | wc -l</code></font>： 统计当前目录下所有python文件的总行数</li></ul><h2 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h2><p>1.<font color="red"><code>more</code></font>: 浏览文件内容</p><ul><li>回车: 下一行</li><li>空格: 下一页</li><li><font color="red"><code>b</code></font>: 上一页</li><li><font color="red"><code>q</code></font>: 退出</li></ul><p>2.<font color="red"><code>less</code></font>:与<font color="red"><code>more</code></font>类似,功能更全(没有vim好用)</p><ul><li>回车: 下一行</li><li><font color="red"><code>y</code></font>: 上一行</li><li><font color="red"><code>Page Down</code></font>: 下一页</li><li><font color="red"><code>Page Up</code></font>: 上一页</li></ul><p>3.<font color="red"><code>head -3 xxx</code></font>: 展示<font color="red"><code>xxx</code></font>的前3行内容</p><ul><li>同时支持从 <font color="red"><code>stdin</code></font>读入内容</li></ul><p>4.<font color="red"><code>tail -3 xxx</code></font>: 展示<font color="red"><code>xxx</code></font>末尾3行内容</p><ul><li>同时支持从<font color="red"><code>stdin</code></font>读入内容</li></ul><h2 id="用户相关"><a href="#用户相关" class="headerlink" title="用户相关"></a>用户相关</h2><p>1.<font color="red"><code>history</code></font>: 展示当前用户的历史操作，内容存放在<font color="red"><code>~/.bash_history</code></font>中。</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>1.<font color="red"><code>md5sum</code></font>: 计算<font color="red"><code>md5</code></font>:哈希值 (将任意长度的文件变成一个三十二位的字符串)</p><ul><li>可以从.<font color="red"><code>stdin</code></font>读入内容</li><li>也可以在命令行参数中传入文件名列表；</li></ul><p>2: 统计<font color="red"><code>time command</code></font>:命令的执行时间</p><p>3.<font color="red"><code>ipython3</code></font>: 交互式python3环境。可以当作计算器，或者批量管理文件。</p><ul><li>.<font color="red"><code>! echo &quot;Hello World&quot;</code></font>： .<font color="red"><code>!</code></font>表示执行.<font color="red"><code>shell</code></font>脚本</li></ul><p>4..<font color="red"><code>watch -n 0.1 command</code></font>： 每0.1s执行一次.<font color="red"><code>command</code></font>命令</p><p>5.<font color="red"><code>tar</code></font>： 压缩文件</p><ul><li>.<font color="red"><code>tar -zcvf xxx.tar.gz /path/to/file/*</code></font>： 压缩</li><li>.<font color="red"><code>tar -zxvf xxx.tar.gz</code></font>： 解压缩</li></ul><p>6.<font color="red"><code>diff xxx yyy</code></font>： 查找文件<font color="red"><code>xxx</code></font>与<font color="red"><code>yyy</code></font>的不同点 </p><h3 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h3><p>1 .<font color="red"><code>sudo command</code></font>： 以<font color="red"><code>root</code></font> 身份执行<font color="red"><code>command</code></font>命令</p><p>2.<font color="red"><code>apt-get install xxx</code></font>： 安装软件</p><p>3.<font color="red"><code>pip install xxx --user -upgrade</code></font>： 安装python包</p><p><font color="red"><code>代码</code></font></p><p><font color="blue"><code>代码</code></font></p><p><mark>高亮代码</mark></p><p><a href="https://www.bilibili.com/">比例</a></p><blockquote><blockquote><blockquote></blockquote></blockquote></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>pr学习</title>
      <link href="/2023/08/05/pr/"/>
      <url>/2023/08/05/pr/</url>
      
        <content type="html"><![CDATA[<p><img src="/.xyz//..%5Cimg%5Cbg4.jpg"></p><h1 id="01-电子相册案例"><a href="#01-电子相册案例" class="headerlink" title="01 电子相册案例"></a>01 电子相册案例</h1><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p><font color="orange"><code>~</code></font> : 放大项目面板</p><p><font color="orange"><code>alt</code></font> + 滚轮: 调整素材大小</p><p><code>\</code>: 自动调整</p><p><font color="orange"><code>v</code></font> : 选择工具</p><p><font color="orange"><code>C</code></font>: 剃刀工具</p><p><font color="orange"><code>ctrl + c</code></font>: 复制</p><p><font color="orange"><code>Ctrl + alt + v</code></font>: 黏贴属性</p><h2 id="新建序列"><a href="#新建序列" class="headerlink" title="新建序列"></a>新建序列</h2><p>新建序列的参数: </p><ul><li>编辑模式: 自定义</li><li>时基: 25帧&#x2F;秒</li><li>帧大小: 1920 水平  1080 垂直</li><li>像素长宽比: 方形像素</li><li>场: 无场扫描</li></ul><h2 id="批量添加转场效果"><a href="#批量添加转场效果" class="headerlink" title="批量添加转场效果:"></a>批量添加转场效果:</h2><p>先右键 添加为 默认过度  再对素材进行框选 使用 <font color="orange"><code>Ctril + D</code></font>进行添加</p><p><font color="orange"><code>交叉溶解</code></font> 的持续时间一般16-17帧即可。</p><h2 id="批量修改效果的持续时间"><a href="#批量修改效果的持续时间" class="headerlink" title="批量修改效果的持续时间"></a>批量修改效果的持续时间</h2><p>[编辑]-&gt;[首选项]-&gt;[时间轴]</p><h2 id="相册分层-制作边框"><a href="#相册分层-制作边框" class="headerlink" title="相册分层+制作边框:"></a>相册分层+制作边框:</h2><p>选中素材 按住 <font color="orange"><code>alt</code></font>往上托,选中上面的一张图片  缩放70%左右</p><p>添加[径向阴影],拉到选中图片上,设置参数: 调整图层大小 阴影颜色改成白色 不透明度改成100%</p><p>光源参数为： <font color="orange"><code>x:1000 y:530</code></font>  投影距离: <font color="orange"><code>5左右</code></font></p><h2 id="添加效果-投影"><a href="#添加效果-投影" class="headerlink" title="添加效果:投影"></a>添加效果:投影</h2><p>[效果]里[透视]找[投影]  参数:距离(30)和柔合度调整  </p><h2 id="添加效果-高斯模糊"><a href="#添加效果-高斯模糊" class="headerlink" title="添加效果:高斯模糊"></a>添加效果:高斯模糊</h2><p><font color="orange"><code>注: 需要添加到下一层的图片上,以免相片出现模糊,再调整模糊度</code></font> </p><h2 id="批处理"><a href="#批处理" class="headerlink" title="批处理"></a>批处理</h2><p>选中已经做好的一个图片,右击复制,然后框选其他的素材,选择[粘贴属性]</p><h2 id="添加效果-立方体旋转"><a href="#添加效果-立方体旋转" class="headerlink" title="添加效果: 立方体旋转"></a>添加效果: 立方体旋转</h2><p>拖到两个素材中间自动应用,</p><h1 id="添加光晕效果"><a href="#添加光晕效果" class="headerlink" title="添加光晕效果"></a>添加光晕效果</h1><p>[添加]素材,选择不透明度,混合模式改为绿色。修改完之后将素材填满</p><h2 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h2><p>格式: <font color="orange"><code>H264</code></font> </p><p>预设: <font color="orange"><code>高比特率</code></font> </p><h1 id="04-手机-拍摄和剪辑"><a href="#04-手机-拍摄和剪辑" class="headerlink" title="04 手机 拍摄和剪辑"></a>04 手机 拍摄和剪辑</h1><blockquote><p> <font color="orange" size="7"><code>曝光三要素 </code></font> </p></blockquote><ul><li>快门</li><li>光圈</li><li>ISO</li></ul><h2 id="快门"><a href="#快门" class="headerlink" title="快门"></a>快门</h2><p>决定感光元件前幕帘的闭合快慢,数字越大,快门越慢  一般<font color="orange"><code>1/50</code></font> 即可(除非拍摄特殊画面,比如车水马龙的流光效果)</p><p>快门越慢就越亮</p><h3 id="影响"><a href="#影响" class="headerlink" title="影响:"></a>影响:</h3><ul><li>亮暗</li><li>动态模糊</li></ul><h3 id="结论"><a href="#结论" class="headerlink" title="结论:"></a>结论:</h3><p>2倍原则,即视频帧数的两倍</p><p>30Fps的视频采用1&#x2F;60的快门</p><p>24Pfs的视频采用近似的1&#x2F;50的快门</p><p>适当动态模糊,模拟人眼视觉</p><p>如果再LED光源下拍视频,录像带快门速度设为50的倍数可以繁殖频闪</p><h2 id="光圈-决定相机镜头打开的大小"><a href="#光圈-决定相机镜头打开的大小" class="headerlink" title="光圈: 决定相机镜头打开的大小"></a>光圈: 决定相机镜头打开的大小</h2><p>数字越大 光圈越小</p><p>光圈越小就越暗</p><h3 id="影响-1"><a href="#影响-1" class="headerlink" title="影响:"></a>影响:</h3><p>亮暗</p><p>景深,使背景虚化</p><h3 id="结论-1"><a href="#结论-1" class="headerlink" title="结论:"></a>结论:</h3><p>突出主体人物: F2.8大光圈、背景虚化</p><p>整体画面清晰:F4.0小光圈、背景清晰</p><p>背景虚化F2.8左右,不用虚化F5.0以上</p><p>手机的硬件条件有限,一般无法改变光圈大小</p><h2 id="ISO：相机感光元件本身的敏感度"><a href="#ISO：相机感光元件本身的敏感度" class="headerlink" title="ISO：相机感光元件本身的敏感度"></a>ISO：相机感光元件本身的敏感度</h2><p>数字越大、感光元件对光线越敏感</p><h3 id="影响-2"><a href="#影响-2" class="headerlink" title="影响:"></a>影响:</h3><p>亮暗</p><p>噪点</p><h3 id="结论-2"><a href="#结论-2" class="headerlink" title="结论:"></a>结论:</h3><p>保证正常曝光,ISO越低越好</p><p>看环境灯光,避免弱光下的噪点,ISO一般1600以下即可 画面太暗的话,需要灯光辅助,或调大光圈</p><h2 id="手机拍摄参数设置"><a href="#手机拍摄参数设置" class="headerlink" title="手机拍摄参数设置"></a>手机拍摄参数设置</h2><p>FiLMic软件(正版收费)： 视频也能调整参数</p><h2 id="手机辅助设备"><a href="#手机辅助设备" class="headerlink" title="手机辅助设备"></a>手机辅助设备</h2><ul><li><p>手机三脚架</p></li><li><p>八爪鱼</p></li><li><p>三脚架</p></li><li><p>手机稳定器</p></li><li><p>俯拍支架</p></li></ul><h2 id="手机剪辑软件"><a href="#手机剪辑软件" class="headerlink" title="手机剪辑软件"></a>手机剪辑软件</h2><ul><li>巧影</li><li>喵影工厂</li><li>InShot</li><li>剪映</li></ul>]]></content>
      
      
      <categories>
          
          <category> pr </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>springboot+vue项目-kob</title>
      <link href="/2023/08/02/king_of_bot/"/>
      <url>/2023/08/02/king_of_bot/</url>
      
        <content type="html"><![CDATA[<h2 id="1-配置git环境"><a href="#1-配置git环境" class="headerlink" title="1.配置git环境"></a>1.配置git环境</h2><p>1.安装<font color="Red"><code>Git bash</code></font></p><p>2.打开Git bash,输入cd进入家目录，执行<font color="Red"><code>ssh-keygen</code></font>,生成秘匙,一路回车</p><p>​    此时家目录多会多出几个文件<code>id_rsa.pub</code>是公钥, <code> id_rsa</code>是私钥。</p><p>3.在代码托管平台注册账号,如<code>gitee</code>、<code>github</code>、<code>Acgit</code>。</p><p>4.将<font color="Red"><code>id_rsa.pub</code></font>的内容复制到你所使用的代码托管平台上.  执行命令:<code>cat id_rsa.pub</code>  按住鼠标左键即可完成复制。 </p><h2 id="2-创建仓库"><a href="#2-创建仓库" class="headerlink" title="2.创建仓库"></a>2.创建仓库</h2><p>1.在本地初始化git</p><p>进入本地文件夹.右键点开Git bash,输入命令:<font color="Red"><code>git init</code></font>,会产生一个<code>.git文件夹</code></p><p>git常用命令:</p><pre class="line-numbers language-none"><code class="language-none">git statusgit add.git statusgit commit -m &quot;描述&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2.在云端创建一个项目,将本地项目和云端项目对应起来</p><p>按照示例一顿操作即可.</p><p>创建项目注意点: 不勾选使用自述文件初始化仓库</p><p>​如果有多个项目，不要使用–global</p><p>​git push -u origin master 默认是<code>master</code> 不是main</p><h2 id="3-创建项目后端"><a href="#3-创建项目后端" class="headerlink" title="3.创建项目后端"></a>3.创建项目后端</h2><p>注意点:Spring Boot建议不要选3以上的版本,可能会有配置问题</p><p>​依赖的话一般选Spring Web  如果要演示前后端不分离的话选上Thymeleaf</p><h2 id="4-创建项目前端"><a href="#4-创建项目前端" class="headerlink" title="4.创建项目前端"></a>4.创建项目前端</h2><p>注意点:路径里多了#号 去掉Hash</p><p>前后端通信遇到的跨域问题。</p><p>解决:</p><p>active放哪 哪来就聚焦</p><p>下拉菜单 boostrap找</p><p>导航栏都是一样的 内容不一样</p><p>每一个页面都是一个单独的组件 </p><p>网址跳转:</p><p>前端每一个页面写完，如何和网址产生关联？  router文件夹里的index.js </p><p>将每一个页面导入 import 在routes中每一个页面写一个对象</p><p>实现</p><p>当我们输入根地址时,重定向到pk页面</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"home"</span><span class="token punctuation">,</span>  <span class="token literal-property property">redirect</span><span class="token operator">:</span> <span class="token string">"/pk/"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们输入其他地址，跳转到404</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/:catchAll(.*)"</span><span class="token punctuation">,</span>    <span class="token literal-property property">redirect</span><span class="token operator">:</span> <span class="token string">"/404/"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>实现点哪个网站，跳到哪个页面, NavBar里面改一下link即可(href)</p><p>注意点:每次点完之后,页面会刷新</p><p>解决:router组件提供了一个标签,通过标签来实现 将a标签换成router-link标签即可</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"> <span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"navbar-brand"</span> href<span class="token operator">=</span><span class="token string">"/"</span><span class="token operator">></span>King Of Bots<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"navbar-brand"</span> <span class="token operator">:</span>to<span class="token operator">=</span><span class="token string">"&#123;name: 'home'&#125;"</span><span class="token operator">></span>King Of Bots<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span><span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"nav-link"</span> aria<span class="token operator">-</span>current<span class="token operator">=</span><span class="token string">"page"</span> href<span class="token operator">=</span><span class="token string">"/pk/"</span><span class="token operator">></span>对战<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"nav-link"</span> aria<span class="token operator">-</span>current<span class="token operator">=</span><span class="token string">"page"</span> <span class="token operator">:</span>to<span class="token operator">=</span><span class="token string">"&#123;name: 'pk_index'&#125;"</span><span class="token operator">></span>对战<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每一个页面的主要内容都用一个白框框起来(由于是公共组件,在components里定义ContentField.vue)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"container"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"card"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"card-body"</span><span class="token operator">></span>      content    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现显示聚焦 class 里加入active  需要判断当前在哪个页面</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span> <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useRoute <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue-router"</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> computed <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span> <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>   <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">const</span> route <span class="token operator">=</span> <span class="token function">useRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">let</span> route_name <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> route<span class="token punctuation">.</span>name<span class="token punctuation">)</span>       <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>         route_name       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>希望在某个属性里用表达式，需要加上冒号  ：就是v-bind:的简写</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"navbar-brand"</span> <span class="token operator">:</span>to<span class="token operator">=</span><span class="token string">"&#123;name: 'home'&#125;"</span><span class="token operator">></span>King Of Bots<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span><span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"route_name == 'pk_index' ? 'nav-link active' : 'nav-link'"</span> <span class="token operator">:</span>to<span class="token operator">=</span><span class="token string">"&#123;name: 'home'&#125;"</span><span class="token operator">></span>King Of Bots<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="地图"><a href="#地图" class="headerlink" title="地图"></a>地图</h2><p>为了公平,地图完全对称,包括障碍物,且障碍物的数量可以动态调整.</p><p>问题：如果两条蛇在同一时间能走到同一个格子的话 可能对优势者不利.</p><p>解决方法: 策略:调整地图 使两条蛇不会再同一时间进入同一个格子  地图变成 偶数 * 奇数 但是会导致地图不能轴对称  故应该使用中心对称</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>inner_walls_count <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cols<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">||</span> g<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>rows <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>cols <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> c<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rows <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">||</span> r <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cols <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token keyword">continue</span><span class="token punctuation">;</span>               g<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> g<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>rows <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>cols <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>               <span class="token keyword">break</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>地图在前端生成是不科学的,最后会把生成地图的逻辑移到后端，前端就不具备任何逻辑了,只是用来演示动画的.</p><p>科普:游戏里面一个物体是如何动起来的.</p><p>地图每秒钟刷新60次,每一次渲染的画面叫做帧.</p><p>动态计算物体在每一帧的位置是什么，把他渲染出来.</p><p>写一个基类，有游戏中每个物体共有的功能. 每一个物体每一秒钟都需要刷新六十次。</p><p>实现游戏对象.  1.地图   2.墙 障碍物   不管是什么对象 每一帧都要重新渲染一遍 每一个组件都是一个类</p><p>知识点: 如果是export的话 import的时候需要用大括号括起来  如果是export default的话就不用括起来</p><p>导航栏问题 待解决   缩放</p><p>地图用相对距离，不要用绝对距离。</p><p>每一个格子长度为单位1 存的是绝对距离. 未来所有坐标都是存的相对距离</p><p>居中: <code>margin: 0 auto;</code></p><p>要引用画布 需要 import { ref } from ‘vue’</p><p>引用完之后需要挂载 import { ref, onMounted } from ‘vue’</p><p>当整个组件挂载完之后,需要创建游戏对象.挂载完之后的函数入口 onMounted 当组件挂载完之后,需要执行哪些操作.</p><p>margin容器实现水平居中, flex容易实现竖直和水平居中</p><p>箭头函数没有this,会向上层指</p><p>为什么墙的颜色  怎么确定顺序呢</p><p>实现方式  GameObject 每创建一个 就push一个 </p><p>概述:</p><p>写的是前端代码,每次用户在刷新浏览器的时候都会将前端代码加载出来</p><p>加载出来之后的话，会先创建游戏地图。游戏地图每秒钟会刷新60次，所以我们看到的就是不变</p><p>然后创建完游戏地图之后,就会创建障碍物。那么障碍物先创建四周 再去随机内部障碍物 然后再去判断他是否连通 如果不连通就重新创建一次 我们会试1k次   如果都不成功就创建不出来地图 大概率都可以成功</p><p>自己实现:点击地图 就可以刷新地图</p><p>任务:实现蛇 和 两个人操作(人和人操作 以及人和AI操作)</p><p>前十步,每一步蛇的长度变长1,后面每三步变长1格</p><p>keys:  坐标轴的坐标和画布的坐标存在变换<font color="Red"><code>this.y = r + 0.5;</code></font></p><p>蛇怎么动: 计算蛇在每一帧的位置即可 为了方便可以定义蛇的速度 、</p><p><font color="Red"><code>update_move() &#123;     this.cells[0].y -= this.speed * this.timedelta / 1000; &#125; + 0.5;</code></font></p><p>连贯性</p><p>解决: 1. 中间每一个位置都不动 头和尾动  只有两个圈动  </p><p>回合制游戏</p><p>什么时候可以动</p><p>两个人都有输入之后,蛇才能动</p><p>当我们发现两天蛇都有下一步指令时，蛇才能朝着下一步的目的地移动</p><p>蛇变丰满</p><p>相邻两条蛇都用长方形覆盖一边覆盖一遍</p><h1 id="4-配置Mysql与注册登陆模块"><a href="#4-配置Mysql与注册登陆模块" class="headerlink" title="4 配置Mysql与注册登陆模块"></a>4 配置Mysql与注册登陆模块</h1><h1 id="如何让springboot操作mysql"><a href="#如何让springboot操作mysql" class="headerlink" title="如何让springboot操作mysql"></a>如何让springboot操作mysql</h1><ol><li>idea连接数据库 </li><li>配置SpringBoot</li></ol><p>​在<font color="Red"><code>pom.xml</code></font>文件中添加依赖：</p><ul><li><font color="Red"><code>Spring Boot Starter JDBC</code></font></li><li><font color="Red"><code>Project Lombok</code></font>   &#x2F;&#x2F;自动写一些构造函数 </li><li><font color="Red"><code>MySQL Connector/J</code></font></li><li><font color="Red"><code>mybatis-plus-boot-starter</code></font></li><li><font color="Red"><code>mybatis-plus-generator</code></font>  &#x2F;&#x2F;自动生成一些函数 比如说mapper</li><li><font color="Red"><code>spring-boot-starter-security</code></font></li><li><font color="Red"><code>jjwt-api</code></font></li><li><font color="Red"><code>jjwt-impl</code></font></li><li><font color="Red"><code>jjwt-jackson</code></font></li><li>在<font color="Red"><code>application.properties</code></font>&#x3D;中添加数据库配置：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>username<span class="token operator">=</span>rootspring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>password<span class="token operator">=</span>zy0201031spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>url<span class="token operator">=</span>jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>kob<span class="token operator">?</span>serverTimezone<span class="token operator">=</span><span class="token class-name">Asia</span><span class="token operator">/</span><span class="token class-name">Shanghai</span><span class="token operator">&amp;</span>useUnicode<span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">&amp;</span>characterEncoding<span class="token operator">=</span>utf<span class="token operator">-</span><span class="token number">8</span>spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>driver<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">-</span>name<span class="token operator">=</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>cj<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>Driver</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><font color="Red"><code>SpringBoot</code></font>中的常用模块 </p><ul><li><p><font color="Red"><code>pojo</code></font>层：将数据库中的表对应成<font color="Red"><code>Java</code></font>中的<font color="Red"><code>Class</code></font></p></li><li><p><font color="Red"><code>mapper</code></font>层（也叫Dao层）：将<font color="Red"><code>pojo</code></font>层的<font color="Red"><code>class</code></font>中的操作，映射成sql语句 </p></li><li><p><font color="Red"><code>service</code></font>层：写具体的业务逻辑，组合使用<font color="Red"><code>mapper</code></font>中的操作</p></li><li><p><font color="Red"><code>controller</code></font>层：负责请求转发，接受页面过来的参数，传给<font color="Red"><code>Service</code></font>处理，接到返回值，再传给页面</p></li></ul></li></ul><p>调试都写在service里  真正实现业务的时候在分开</p><p>RequestMapping会将所有的请求都映射过来，请求的类型有get和post,如果只是映射某一种，只写类型名+Maping</p><p>getMapping好调试,post还得用工具</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user/all/"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user/&#123;userId&#125;/"</span><span class="token punctuation">)</span> <span class="token comment">//springboot里传参</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getuser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> userId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        QueryWrapper&lt;User> queryWrapper = new QueryWrapper&lt;>();</span><span class="token comment">//        queryWrapper.ge("id",2).le("id",3);  //这里要返回List&lt;User>   结果是selectList</span><span class="token comment">//        return userMapper.selectOne(queryWrapper);</span><span class="token comment">//        return userMapper.selectById(userId);</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user/add/&#123;userId&#125;/&#123;username&#125;/&#123;password&#125;/"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> userId<span class="token punctuation">,</span>                          <span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> username<span class="token punctuation">,</span>                          <span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"Add User Successful"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user/delete/&#123;userId&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> userId<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        userMapper<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"Delete User Successful"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果要用到数据库里的mapping,一定要加注解@Autowired</p><h2 id="配置用户的认证操作"><a href="#配置用户的认证操作" class="headerlink" title="配置用户的认证操作"></a>配置用户的认证操作</h2><p>权限判断模块</p><p>pom.xml里配置 spring-boot-starter-security</p><p>session的验证一般和cookie是绑定在一起的。信息会存到cookie里面</p><p><strong>如何想让security对接数据库  配置security修改<font color="Red"><code>Spring Security</code></font></strong></p><ul><li><p>实现<font color="Red"><code>service.impl.UserDetailsServiceImpl</code></font>类，继承自<font color="Red"><code>UserDetailsService</code></font>接口，用来接入数据库信息</p></li><li><p>实现<font color="Red"><code>config.SecurityConfig</code></font>类，用来实现用户密码的加密存储</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token annotation punctuation">@Configuration</span> <span class="token annotation punctuation">@EnableWebSecurity</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token punctuation">&#123;</span> <span class="token annotation punctuation">@Bean</span> <span class="token keyword">public</span> <span class="token class-name">PasswordEncoder</span> <span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>实现<font color="Red"><code>utils.JwtUtil</code></font>类，为<font color="Red"><code>jwt</code></font>工具类，用来创建、解析jwt token</li><li>实现<font color="Red"><code>config.filter.JwtAuthenticationTokenFilter</code></font>类，用来验证<font color="Red"><code>jwt token</code></font>，如果验证成功，则将User信息注入上下文中</li><li>配置<font color="Red"><code>config.SecurityConfig</code></font>类，放行登录、注册等接口</li></ul></li></ul><p>登录验证成功以后，自动生成一个sessionId,存到数据库里(也可以是其他)，在发给你</p><p>client在登录成功以后,它就会将session记录到cookie里,未来每一次向后端发送请求,它就会默认自动从cookie中取出sessionid放到session里面,传给springboot。springboot查一下sessionid有没有过期,如果没有过期,就不需要判断了.</p><p>数据库中作者定义,存储的密码前面用{noop}表示的话密码就是明文存储</p><p>如果不是明文传输的话,要怎么办？</p><p>需要自己去写一个密码的加密.</p><p>密码加密基于这样一个东西.各种各样的加密算法都有一个特性.</p><p>给我们一个字符串 我们可以很快的将他变成一个新的字符串</p><p>实现<font color="Red"><code>config.SecurityConfig</code></font>类，用来实现用户密码的加密存储</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">PasswordEncoder</span> <span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现utils.JwtUtil类，为jwt工具类，用来创建、解析jwt token</p><p>将一个字符串 加上密钥 加上有效期 变成一个加密的字符串</p><p>给我们一个令牌 将userid解析出来</p><p>实现config.filter.JwtAuthenticationTokenFilter类，用来验证jwt token，如果验证成功，则将User信息注入上下文中<br>配置config.SecurityConfig类，放行登录、注册等接口</p><h2 id="传统的登陆验证模式（session验证-不方便验证）"><a href="#传统的登陆验证模式（session验证-不方便验证）" class="headerlink" title="传统的登陆验证模式（session验证 不方便验证）"></a>传统的登陆验证模式（session验证 不方便验证）</h2><p>不公开的页面需要授权才能看，不公开的页面授权时会默认读取请求里的sessionid，如果不存在或者说</p><p>sessionid对应的登录信息已经过期，那么它就不能访问这个页面，如果没有过期，就可以根据sessionid将这个用户提取出来，提取出来之后我们就可以正常访问授权链接了。</p><p>可能有多个服务器端,这种模式sessionid 如果用户想通过一个身份登录多个后端，我们就需要将sessionid复制很多份放到多台服务器上，不是很好处理、</p><h2 id="登录授权验证的一个模式-jwt验证方式"><a href="#登录授权验证的一个模式-jwt验证方式" class="headerlink" title="登录授权验证的一个模式(jwt验证方式)"></a>登录授权验证的一个模式(jwt验证方式)</h2><p>优势: </p><p>1.很好的实现跨域</p><p>2.不需要再服务器端存储</p><p>第一段存储用户信息，第二段密钥（只存在里服务器端），有很多种哈希函数和加密函数可以很方便的</p><p>将一个字符错映射到新的字符串，几乎不可逆。</p><p>jtwtoken存在于用户本地，如果被窃取就是活该！！！</p><p>首先通过login页面获取一个token,然后用户在得到这个token之后，会将它存储到浏览器里,然后我们每次在向服务器发送请求的时候,都会带上这个token,那么服务器每次接收到请求时,如果这个令牌是合法的，如果合法，那么服务器就会根据这个令牌的信息,后端会自动从数据库当中查找这个用户，把它提取到上下文当中，然后再访问授权的方法。</p><p>用户访问这个请求之后 先向Spring发送一个请求 Spring根据链接来找要访问哪个Controller 然后在逐步去看怎么修改数据库 Spring修改完数据库之后 将结果返回给前端</p><p>传统的模式都是用session验证.但是前后端分离模式会有跨域问题,所以说用jwt验证会更加容易.</p><p>tips: 数据库里存头像不会直接存文件，永远都是链接。推荐将图片存放在图床或者云服务器的云盘。</p><p>如果用户篡改自己的数据怎么办</p><p>用户改了第一段，不知道密钥是什么。 知道加密结果不能反推之前的东西</p><h2 id="utils-JwtUtil类"><a href="#utils-JwtUtil类" class="headerlink" title="utils.JwtUtil类"></a>utils.JwtUtil类</h2><p>主要作用:  将一个字符串加上密钥加上有效期变成加密之后的字符串</p><p>​给我们一个令牌 把它的userid解析出来</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span></span><span class="token class-name">Claims</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span></span><span class="token class-name">JwtBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span></span><span class="token class-name">Jwts</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span></span><span class="token class-name">SignatureAlgorithm</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span><span class="token class-name">SecretKey</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>spec<span class="token punctuation">.</span></span><span class="token class-name">SecretKeySpec</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Base64</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">UUID</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtUtil</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token constant">JWT_TTL</span> <span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000L</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">14</span><span class="token punctuation">;</span>  <span class="token comment">// 有效期14天</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">JWT_KEY</span> <span class="token operator">=</span> <span class="token string">"SDFGjhdsfalshdfHFdsjkdsfds121232131afasdfac"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">createJWT</span><span class="token punctuation">(</span><span class="token class-name">String</span> subject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">JwtBuilder</span> builder <span class="token operator">=</span> <span class="token function">getJwtBuilder</span><span class="token punctuation">(</span>subject<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token function">getUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">JwtBuilder</span> <span class="token function">getJwtBuilder</span><span class="token punctuation">(</span><span class="token class-name">String</span> subject<span class="token punctuation">,</span> <span class="token class-name">Long</span> ttlMillis<span class="token punctuation">,</span> <span class="token class-name">String</span> uuid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SignatureAlgorithm</span> signatureAlgorithm <span class="token operator">=</span> <span class="token class-name">SignatureAlgorithm</span><span class="token punctuation">.</span><span class="token constant">HS256</span><span class="token punctuation">;</span>        <span class="token class-name">SecretKey</span> secretKey <span class="token operator">=</span> <span class="token function">generalKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> nowMillis <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Date</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>nowMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ttlMillis <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ttlMillis <span class="token operator">=</span> <span class="token class-name">JwtUtil</span><span class="token punctuation">.</span><span class="token constant">JWT_TTL</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">long</span> expMillis <span class="token operator">=</span> nowMillis <span class="token operator">+</span> ttlMillis<span class="token punctuation">;</span>        <span class="token class-name">Date</span> expDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>expMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>uuid<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setIssuer</span><span class="token punctuation">(</span><span class="token string">"sg"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setIssuedAt</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span>signatureAlgorithm<span class="token punctuation">,</span> secretKey<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span>expDate<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SecretKey</span> <span class="token function">generalKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> encodeKey <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">JwtUtil</span><span class="token punctuation">.</span><span class="token constant">JWT_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SecretKeySpec</span><span class="token punctuation">(</span>encodeKey<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> encodeKey<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token string">"HmacSHA256"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Claims</span> <span class="token function">parseJWT</span><span class="token punctuation">(</span><span class="token class-name">String</span> jwt<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SecretKey</span> secretKey <span class="token operator">=</span> <span class="token function">generalKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">parserBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span>secretKey<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>jwt<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="config-filter-JwtAuthenticationTokenFilter类"><a href="#config-filter-JwtAuthenticationTokenFilter类" class="headerlink" title="config.filter.JwtAuthenticationTokenFilter类"></a>config.filter.JwtAuthenticationTokenFilter类</h2><p>作用： 验证jwt-token是不是合法的 合法的话就会自动将user提取到上下文当中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>kob<span class="token punctuation">.</span>backend<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">UserMapper</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>kob<span class="token punctuation">.</span>backend<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">User</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>kob<span class="token punctuation">.</span>backend<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">UserDetailsImpl</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>kob<span class="token punctuation">.</span>backend<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">JwtUtil</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span></span><span class="token class-name">Claims</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>jetbrains<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">NotNull</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span></span><span class="token class-name">UsernamePasswordAuthenticationToken</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SecurityContextHolder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">StringUtils</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span><span class="token class-name">OncePerRequestFilter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">FilterChain</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtAuthenticationTokenFilter</span> <span class="token keyword">extends</span> <span class="token class-name">OncePerRequestFilter</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doFilterInternal</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token annotation punctuation">@NotNull</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token annotation punctuation">@NotNull</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Authorization"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>token<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"Bearer "</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        token <span class="token operator">=</span> token<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> userid<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Claims</span> claims <span class="token operator">=</span> <span class="token class-name">JwtUtil</span><span class="token punctuation">.</span><span class="token function">parseJWT</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>            userid <span class="token operator">=</span> claims<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>userid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"用户名未登录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">UserDetailsImpl</span> loginUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDetailsImpl</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UsernamePasswordAuthenticationToken</span> authenticationToken <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAuthentication</span><span class="token punctuation">(</span>authenticationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Springboot写api一共需要三个地方</strong></p><p>1.Controller  调用接口  用来调用service</p><p>2.Service里面写一个接口  </p><p>3.Servic里的impl里面写一个具体的实现</p><p>autowire和resource区别: aotuwired按类型注入,resource按名称注入</p><p>调试的时候是Post请求，浏览器访问是Get请求，所以不能在浏览器里面进行调试</p><p>解决方法: 下Postman  或者 在前端框架调试</p><p>写注册页面</p><p>grid 用来布局</p><p>需要抄一个表单</p><p>每个页面都需要存当前登录的用户是谁，用户的信息要存全局,要用到vuex</p><pre class="line-numbers language-none"><code class="language-none">&lt;form @summit.prevent&#x3D;&quot;login&quot;&gt; &lt;!-- 阻止到默认行为 并且把提交按钮和login函数绑定 --&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>登录成功,跳到主页面的实现方法</p><p>1.将router导入到UserAccountView.vue</p><h2 id="退出怎么实现"><a href="#退出怎么实现" class="headerlink" title="退出怎么实现"></a>退出怎么实现</h2><p>token完全存在用户本地,token里存了userid以外 还存了过期时间</p><p>如果用户想退出登录的话,用户自己把token删了就行。</p><p>放到数据库注销</p><p>在user里开一列,记录当天用户当前的token是哪个，每次用户发送终端请求时都更新最新的token，验证的时候判断是不是随机token,如果不是的话就去掉</p><p>token存在浏览器的内存里,一刷新就退出了  下节课做收尾</p><p>token存在localstore里 刷新不会取消登录状态</p><h1 id="4-3-配置Mysql与注册登录模块（下）"><a href="#4-3-配置Mysql与注册登录模块（下）" class="headerlink" title="4.3 配置Mysql与注册登录模块（下）"></a>4.3 配置Mysql与注册登录模块（下）</h1><p>1.实现前端页面授权功能,没有登陆时 页面重定向到登陆页面</p><p>2.实现注册页面</p><p>3.实现登录状态的持久化    </p><p>上一节做完登陆完之后token其实是存在vuex的store里  一刷新内容就清空了</p><p>将token存在本地的一块硬盘里</p><p>1.一种是在router里面实现  需要先记录一个每个页面是不是授权页面</p><p> 有一个函数api  beforeEach(to, from, next)</p><p>当我们每次通过router进入某一个页面时，会调用这个函数。有三个参数to表示跳转到哪个页面 from表示从哪个页面跳转过去 next表示页面要不要执行下一步操作</p><p>每次我们在登录某个页面之前 我们需要判断该页面需不需要登录</p><p>如果我们打开一个需要登录的页面时,就将它定向到登陆页面</p><p>从前端接受到的map是key为账号，value为密码<br>返回给前端的map是你后端设置的提示信息<br>到后面传送数据会有规范的，统一要用json格式的</p><p>tips: </p><p>如果是export default 可以不加括号，反之。</p><h2 id="什么时候需要加表头-什么时候不需要加表头"><a href="#什么时候需要加表头-什么时候不需要加表头" class="headerlink" title="什么时候需要加表头 什么时候不需要加表头"></a>什么时候需要加表头 什么时候不需要加表头</h2><p>当访问的后端api需要授权就需要加表头,公开的就不用加表头。</p><h2 id="实现注册页面-跟登录页面比较像"><a href="#实现注册页面-跟登录页面比较像" class="headerlink" title="实现注册页面(跟登录页面比较像)"></a>实现注册页面(跟登录页面比较像)</h2><h2 id="如何實現实现登录状态的持久化"><a href="#如何實現实现登录状态的持久化" class="headerlink" title="如何實現实现登录状态的持久化"></a>如何實現实现登录状态的持久化</h2><p>將token存到瀏覽器的一小塊硬盤空間(localstorage)</p><p>如果函数内部的修改是异步的只能放在action里 同步操作放在m</p><h2 id="注册的ajax为什么不放在user-js中"><a href="#注册的ajax为什么不放在user-js中" class="headerlink" title="注册的ajax为什么不放在user.js中"></a>注册的ajax为什么不放在user.js中</h2><p>原因是因为当我们有可能会修改state的值的时候,会将我们的操作放在user里面,反之就不用放进去.</p><h2 id="3-登录状态的持久化"><a href="#3-登录状态的持久化" class="headerlink" title="3.登录状态的持久化"></a>3.登录状态的持久化</h2><p>将token存在浏览器的硬盘空间(localstore)里即可</p><h2 id="刷新之后怎么跳到首页"><a href="#刷新之后怎么跳到首页" class="headerlink" title="刷新之后怎么跳到首页"></a>刷新之后怎么跳到首页</h2><p>刷新之后是未登录状态,会自动跳到登陆页面,先从本地把token取出来，发现token存在，将token更新到内存里。从云端请求用户信息，如果可以请求到信息，表示token是有效的,表示用户是登录的,就会跳到首页</p><p>问题: 刷新后页面会闪</p><p>优化: 不让登录页面展现</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;写个变量 默认不展示let show_content &#x3D; ref(false); &#x2F;&#x2F;user.js 下面就可以删除了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>右上角Navbar会闪</p><p>solve: 同样的方法。</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;user.js加全局变量 pulling_info: true,&#x2F;&#x2F;表示我们当前是否在获取信息当中 如果在获取信息当中,就不要展示<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>action里面的函数用dispatch</p><p>反之用commit  </p><h2 id="mutations和actions的区别"><a href="#mutations和actions的区别" class="headerlink" title="mutations和actions的区别"></a>mutations和actions的区别</h2><p>如果我们的函数内部修改是异步的(比如从云端拉取信息,拉完之后才会执行)，只能放在actions里面,同步操作放在mutations里</p><h1 id="5-1-创建个人中心页面-上"><a href="#5-1-创建个人中心页面-上" class="headerlink" title="5.1 创建个人中心页面(上)"></a>5.1 创建个人中心页面(上)</h1><p>&#x2F;&#x2F;数据库里用下划线命名 java里用驼峰命名 queryMapper里用下划线</p><p>&#x2F;&#x2F;接口默认是public</p><p>&#x2F;&#x2F;主键自增不仅要在数据库里面写,还要在pojo里面写</p><p>&#x2F;&#x2F;每次创建新东西，想记下来,创建一个新的表 一个pojo 一个 mapper </p><p>&#x2F;&#x2F;这些判断前端判断不判断不可以,后端一定要判断 前端防君子 后端防小人</p><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><p>首先我们得知道插入的人是谁，取当前user</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token class-name">UsernamePasswordAuthenticationToken</span> authentication <span class="token operator">=</span>                <span class="token punctuation">(</span><span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">)</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">UserDetailsImpl</span> loginUser <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserDetailsImpl</span><span class="token punctuation">)</span> authentication<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> loginUser<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建完之后,加到数据库里,加入注解BotMapper</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 验证</span>       <span class="token literal-property property">Authorization</span><span class="token operator">:</span> <span class="token string">"Bearer "</span> <span class="token operator">+</span> store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>user<span class="token punctuation">.</span>token<span class="token punctuation">,</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>过…. 15:41:33<br>在请求头上把token传过去</p><p>过…. 15:41:52<br>后端通过请求头获取token，进行验证</p><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>删除肯定要在后端实现，要把后端对应的内容删除掉，不然用户一刷新对应的内容就来了。</p><p>删除的话前后端一定要一致。前端删除完后端一定要删掉,不然前后端不一致.</p><h2 id="为什么在自己的bot进行修改-会出现作者不是自己的情况"><a href="#为什么在自己的bot进行修改-会出现作者不是自己的情况" class="headerlink" title="为什么在自己的bot进行修改,会出现作者不是自己的情况?"></a>为什么在自己的bot进行修改,会出现作者不是自己的情况?</h2><p>&#x2F;&#x2F;前端内存里面的东西可以任意改变,后端必须考虑所有情况才是一个安全的后端</p><p>&#x2F;&#x2F;别人可以改前端代码,或者用其他工具构造一些恶意请求</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//前端调试代码</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// $.ajax(&#123;</span>    <span class="token comment">//   url: "http://localhost:3000/user/bot/add/",</span>    <span class="token comment">//   type: "post",</span>    <span class="token comment">//   data: &#123;</span>    <span class="token comment">//     title: "Bot的标题",</span>    <span class="token comment">//     description: "Bot的描述",</span>    <span class="token comment">//     content: "Bot的代码",</span>    <span class="token comment">//   &#125;,</span>    <span class="token comment">//   headers: &#123; // 验证</span>    <span class="token comment">//     Authorization: "Bearer " + store.state.user.token,</span>    <span class="token comment">//   &#125;,</span>    <span class="token comment">//   success(resp) &#123;</span>    <span class="token comment">//     console.log(resp);</span>    <span class="token comment">//   &#125;,</span>    <span class="token comment">//   error(resp) &#123;</span>    <span class="token comment">//     console.log(resp);</span>    <span class="token comment">//   &#125;</span>    <span class="token comment">// &#125;)</span>    <span class="token comment">// $.ajax(&#123;</span>    <span class="token comment">//   url: "http://localhost:3000/user/bot/remove/",</span>    <span class="token comment">//   type: "post",</span>    <span class="token comment">//   data: &#123;</span>    <span class="token comment">//     bot_id: 8,</span>    <span class="token comment">//   &#125;,</span>    <span class="token comment">//   headers: &#123; // 验证</span>    <span class="token comment">//     Authorization: "Bearer " + store.state.user.token,</span>    <span class="token comment">//   &#125;,</span>    <span class="token comment">//   success(resp) &#123;</span>    <span class="token comment">//     console.log(resp);</span>    <span class="token comment">//   &#125;,</span>    <span class="token comment">//   error(resp) &#123;</span>    <span class="token comment">//     console.log(resp);</span>    <span class="token comment">//   &#125;</span>    <span class="token comment">// &#125;)</span>    <span class="token comment">// $.ajax(&#123;</span>    <span class="token comment">//   url: "http://localhost:3000/user/bot/update/",</span>    <span class="token comment">//   type: "post",</span>    <span class="token comment">//   data: &#123;</span>    <span class="token comment">//     bot_id: 11,</span>    <span class="token comment">//     title: "Bot的标题11",</span>    <span class="token comment">//     description: "Bot的描述11",</span>    <span class="token comment">//     content: "Bot的代码11",</span>    <span class="token comment">//   &#125;,</span>    <span class="token comment">//   headers: &#123; // 验证</span>    <span class="token comment">//     Authorization: "Bearer " + store.state.user.token,</span>    <span class="token comment">//   &#125;,</span>    <span class="token comment">//   success(resp) &#123;</span>    <span class="token comment">//     console.log(resp);</span>    <span class="token comment">//   &#125;,</span>    <span class="token comment">//   error(resp) &#123;</span>    <span class="token comment">//     console.log(resp);</span>    <span class="token comment">//   &#125;</span>    <span class="token comment">// &#125;)</span>    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">"http://localhost:3000/user/bot/getlist/"</span><span class="token punctuation">,</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"get"</span><span class="token punctuation">,</span>      <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 验证</span>        <span class="token literal-property property">Authorization</span><span class="token operator">:</span> <span class="token string">"Bearer "</span> <span class="token operator">+</span> store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>user<span class="token punctuation">.</span>token<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function">success</span><span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function">error</span><span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="5-2-创建个人中心页面-下"><a href="#5-2-创建个人中心页面-下" class="headerlink" title="5.2 创建个人中心页面(下)"></a>5.2 创建个人中心页面(下)</h1><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 里面写的是字符串而不是一个表达式 加 : --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$store.state.user.photo<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法tips</title>
      <link href="/2023/07/23/algorithm/"/>
      <url>/2023/07/23/algorithm/</url>
      
        <content type="html"><![CDATA[<p>1.C++如何让输出保存四位小数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iomanip></span> <span class="token comment">//引入iomanip头文件</span></span><span class="token keyword">double</span> a<span class="token operator">=</span><span class="token number">123.4567890</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token function">setiosflags</span><span class="token punctuation">(</span>ios<span class="token double-colon punctuation">::</span>fixed<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token function">setprecision</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token comment">//输出的a就会保留四位小数了。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>·</p><p>2.如何寻找数组中有多个最大值的最小下标？·</p><p>最简单的方法:<font color="Red"><code>将原数组复制一遍到另一个数组 将原数组排序 保存最大值 将另一个数组遍历 第一次遇到最大值就输出 break；</code></font> </p><p>3.求最大公约数 和 最小公倍数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> b <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token function">gcd</span><span class="token punctuation">(</span>a <span class="token punctuation">,</span> b <span class="token operator">%</span> a<span class="token punctuation">)</span> <span class="token operator">:</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//最大公倍数</span><span class="token keyword">int</span> lcm <span class="token operator">=</span> a <span class="token operator">*</span> b <span class="token operator">/</span> <span class="token function">GCD</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//注意,这种写法可能错,因为a * b可能因为太大 超出int或者超出longlong 推荐写成int lcm = a / gcd * b</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.洛谷p1420 最大连号  （和最长上升子序列相似）</p><p>朴素方法:<font color="Red"><code>直接找每次最长的len 一旦遇到不符合要求的 直接将len 置 0   max = len 最后记得要算上 + 1</code></font> </p><p>5.C++字符串中的字母大小写转换</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>string str<span class="token punctuation">;</span>cin <span class="token operator">>></span> str<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">toupper</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//转大写 tolower(str[i]); 转小写</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>tips: <font color="Red"><code>1.遍历时 条件 需要注意 能不能加= 的问题  不然就可能出错、（多思考 多练）</code></font></p><p>​<font color="Red"><code>2.对于去除重合部分，如果没有思路的话,可以考虑一下用染色的方法(0 1来判别)  初始化全0  染过的就置为1   染过的就不能再染了(根据 != 1 判别)</code></font></p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Office学习</title>
      <link href="/2023/07/14/office%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/07/14/office%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Excel学习"><a href="#Excel学习" class="headerlink" title="Excel学习"></a>Excel学习</h1><h2 id="E01-学生会社团统计工作-必备基础操作"><a href="#E01-学生会社团统计工作-必备基础操作" class="headerlink" title="E01 学生会社团统计工作,必备基础操作"></a>E01 学生会社团统计工作,必备基础操作</h2><p>表格常见的两个种类: <font color="red"><code>清单类</code></font>、<font color="red"><code>表单类</code></font></p><h3 id="制作表单四步法"><a href="#制作表单四步法" class="headerlink" title="制作表单四步法"></a>制作表单四步法</h3><ul><li>1.先画草稿再做表</li></ul><p>tips: 打印表单的时候,Excel自带的网络线(在视图里)不会被打印</p><p>​ esc取消格式刷</p><ul><li>2.对齐文本框线少</li></ul><p>tips:设置内部框线  可以先设置为无框线 在设置外框线</p><ul><li>3.设置列宽与行高</li></ul><p>可以手动调整</p><ul><li>4.颜色填充效果好</li></ul><p>做完之后可以在做一些细节调整:如字体、字号、微调行高列宽</p><h3 id="保护表格的N种方式"><a href="#保护表格的N种方式" class="headerlink" title="保护表格的N种方式"></a>保护表格的N种方式</h3><h4 id="不让看"><a href="#不让看" class="headerlink" title="不让看"></a>不让看</h4><p>方式一:  <font color="red"><code>隐藏工作表</code></font></p><p>在[操作演示]这个工作表标签上,单击右键</p><p>方式二: <font color="red"><code> 隐藏工作表+加密</code></font></p><p>先隐藏,然后在页面上方选择[审阅],点击[保护工作簿]设置密码</p><p>方式三:  <font color="red"><code>保护工作簿+加密</code></font></p><p>单击[文件],单击[信息]，单击[保护工作簿],输入密码.</p><h4 id="不让碰"><a href="#不让碰" class="headerlink" title="不让碰"></a>不让碰</h4><p>方式一：<font color="red"><code> 保护工作表</code></font></p><p>[审阅]选项卡下单击[保护工作表]进入勾选</p><p>方式二:  <font color="red"><code> 保护单元格</code></font></p><p>单击任意单元格,ctrl+A全选整个单元格,ctrl+1打开设置单元格式框,切换到保护选项卡,取消勾选锁定,将不呢个修改的单元格全选,勾选锁定.然后在[审阅]选项卡下单击[保护工作表]，取消勾选锁定单元格</p><h3 id="打印表格的注意事项"><a href="#打印表格的注意事项" class="headerlink" title="打印表格的注意事项"></a>打印表格的注意事项</h3><ul><li>多页打印缺少标题</li></ul><p>solve: 给每页添加标题行: <font color="red"><code>打印标题-顶端标题行</code></font></p><p>单击[页面布局]-[打印标题],单击顶端标题行,选择标题行.单击[打印预览]看效果</p><ul><li>表格打印不全</li></ul><p>solve: <font color="red"><code>将表格打印到一页</code></font></p><p>1.调整页边距(适用于表格只有一小部分超出打印范围)</p><p>[页面]选项卡中选择页边距,想将更多内容放在一页中,可以将页边距缩小</p><p>2.调整分页线(适用于表格大范围超出打印范围)</p><p>[视图]选项卡中切换到[分页预览]。</p><p>ps:分页预览就是把现有表格按照最终打印出来的样式分割成多页进行预览.预览中你看到的这些蓝色线条无论是实线还是虚线都是分页线.而最边缘的这些蓝色线是打印区域分界线。分界线之外灰色区域为非打印区域。高亮区域为打印区域.</p><ul><li>不会加页码和图片LOGO</li></ul><p>solve: 添加学校名称和LOGO：<font color="red"><code>添加页眉页脚</code></font></p><p>  [页面布局]选项卡中单击[页面设置]的更多选项,切换到[页眉&#x2F;页脚]选项卡</p><p>tips[<font color="purle"><code>视图]中,单击[页面布局]能非常直观看到页眉页脚的样子,还能直接设置页眉页码</code></font></p><h2 id="E02-新生信息登记，大量输入数据怎么偷懒？"><a href="#E02-新生信息登记，大量输入数据怎么偷懒？" class="headerlink" title="E02 新生信息登记，大量输入数据怎么偷懒？"></a>E02 新生信息登记，大量输入数据怎么偷懒？</h2><h3 id="01-数据录入小技巧"><a href="#01-数据录入小技巧" class="headerlink" title="01 数据录入小技巧"></a>01 数据录入小技巧</h3><h4 id="数据录入困难的原因"><a href="#数据录入困难的原因" class="headerlink" title="数据录入困难的原因"></a>数据录入困难的原因</h4><p>第1类: 录入方法不对</p><p>tips:<font color="purle"><code>先把要需要的数据选区用鼠标选中它 使用Tab键横向移动单元格选框</code></font></p><p>第2类: 录入出现错误 </p><p>例: 身份证号码总是乱码 反复纠正效率低</p><p>​  输入序号时 数字前面的0,总是会被舍掉</p><p>slove:<font color="red"><code>把格式由常规改为文本</code></font></p><h4 id="把数字改成文本的两种方法"><a href="#把数字改成文本的两种方法" class="headerlink" title="把数字改成文本的两种方法"></a>把数字改成文本的两种方法</h4><p>第一种:在输入数字前输入英文的<font color="red"><code>单引号 </code></font>  （效率低）</p><p>ps:单引号会强制把我们后面输的所有数字转换为文本格式</p><p>第二种:[开始]选项卡，找到格式[常规]进行修改</p><h3 id="02-重复数据不用敲"><a href="#02-重复数据不用敲" class="headerlink" title="02 重复数据不用敲"></a>02 重复数据不用敲</h3><p>方法一: <font color="red"><code>数据验证制作下拉列表</code></font></p><p>[数据]选项卡选择[数据验证],[允许]选择[序列]  用逗号进行间隔</p><p>方法二:<font color="red"><code>Ctrl+Enter</code></font> 批量填充到每一个单元格</p><p>快捷键完成数据的填充</p><p>第一步 选择空白单元格</p><p>第二步 ctrl+G打开定位窗口,点击[定位条件],勾选[空值]</p><p>第三步 点击一个空白单元格按&#x3D;键,再按一个向上的箭头,然后按ctrl+Enter</p><p>tips:使用&#x3D;完成对上方数据的填充,会有隐患.</p><p>为了避免这些错误,先选中单元格,然后ctrl+c再选中[专业]位置，点击右键选择粘贴为数值,就不会影响[专业]的填充了</p><p>方法三:<font color="red"><code>Ctrl+D Ctrl+R </code></font>快速复制数据</p><p>对数据进行筛选,ctrl+D来批量填充公式（横向）</p><p>​ctrl+R来批量填充公式（纵向）</p><h3 id="03-表格制作手机通讯录"><a href="#03-表格制作手机通讯录" class="headerlink" title="03 表格制作手机通讯录"></a>03 表格制作手机通讯录</h3><p>为什么Excel无法直接导入到手机通讯录？</p><p>因为Excel文件时xlsx格式,适合在电脑上查看.</p><p>而手机通讯录可以识别的文件格式是vCard格式.</p><h4 id="如何把Excel联系方式导入到手机通讯录？"><a href="#如何把Excel联系方式导入到手机通讯录？" class="headerlink" title="如何把Excel联系方式导入到手机通讯录？"></a>如何把Excel联系方式导入到手机通讯录？</h4><p>跨平台数据导入导出用CSV格式文件、表格数据转通讯录用163邮箱</p><p>转换过程中需要两个很关键的工具：<font color="red"><code>CSV格式</code></font> 、 <font color="red"><code>网易邮箱</code></font></p><p>大致的过程:先把Excel格式另存为csv格式,然后再把csv文件导入到i网易邮箱,然后使用网易邮箱的通讯录功能,再导出vCard格式的文件,最后把文件发送到手机打开就可以了.</p><h4 id="文本文件如何导出到excel"><a href="#文本文件如何导出到excel" class="headerlink" title="文本文件如何导出到excel"></a>文本文件如何导出到excel</h4><p>全选 复制 黏贴  缺点:数据全挤在一列</p><p>solve:  tips:将第一行用作标题</p><p>1.选中整列,[数据]选项卡中选择[分列]功能 然后选择[分隔符号]</p><p>分列功能:<font color="red"><code>按照分隔符拆分数据.快速拆分数据到单独列</code></font></p><p>2.[数据]选项卡下的[从文本&#x2F;CSV]功能 设置UTF-8的编码格式  会进入到一个新的页面PowerQuery  可以对数据进行快速整理 同样的需要进行分列</p><p>好处：<font color="red"><code>可以实时的一键更新</code></font></p><h2 id="E03-核对学生数据-5分钟搞定3小时工作量"><a href="#E03-核对学生数据-5分钟搞定3小时工作量" class="headerlink" title="E03 核对学生数据,5分钟搞定3小时工作量"></a>E03 核对学生数据,5分钟搞定3小时工作量</h2><h3 id="01-数据核对妙招"><a href="#01-数据核对妙招" class="headerlink" title="01 数据核对妙招"></a>01 数据核对妙招</h3><p>数据核对三种方法:</p><p>1.条件格式</p><p>自动标记重复值</p><p>2.基于公式计算的比较运算符</p><p>快速核对两列差异</p><p>3.数据核对的快捷操作-行内容差异单元格</p><p>一键定位差异单元格</p><p>如何找一列的重复值？</p><p>选中这一列,在开始选项卡中点击条件格式选择第一项突出显示单元格规则找到重复值.</p><p>如何把重复值快速的删除？</p><p>首先选中删除重复值的数据区域,在数据选项卡中删除重复值这个功能</p><p>两列比较差异</p><p>1.在单元格里面输入一个等号,然后先选择一列数据，在输入一个&#x3D;号，在选择一列数据，回车.下拉拖拽显示全部</p><p>2.[开始选项卡]找到[查找和选择],找到定位条件.勾选行内容差异单元格.(简便)</p><p>3.ctrl + \ 快速定义差异单元格 注：只有在英文输入时的反斜杠可以</p><h3 id="02-数据核对常用公式"><a href="#02-数据核对常用公式" class="headerlink" title="02 数据核对常用公式"></a>02 数据核对常用公式</h3><p>匹配数据用公式</p><p>两个常见的核对函数: COUNTLF函数(条件计数)和VLOOKUP函数(可以将查询到的结果引用过来,放在原始数据旁边）</p><h3 id="03-高级核对技巧"><a href="#03-高级核对技巧" class="headerlink" title="03 高级核对技巧"></a>03 高级核对技巧</h3><h2 id="E04-排序筛选-学霸学渣立马显现"><a href="#E04-排序筛选-学霸学渣立马显现" class="headerlink" title="E04 排序筛选,学霸学渣立马显现"></a>E04 排序筛选,学霸学渣立马显现</h2><h2 id="E05-成绩统计分析-快帮老师搞定它"><a href="#E05-成绩统计分析-快帮老师搞定它" class="headerlink" title="E05 成绩统计分析,快帮老师搞定它"></a>E05 成绩统计分析,快帮老师搞定它</h2><h2 id="E06-会动的表格-让你的老师对你刮目相看"><a href="#E06-会动的表格-让你的老师对你刮目相看" class="headerlink" title="E06 会动的表格,让你的老师对你刮目相看"></a>E06 会动的表格,让你的老师对你刮目相看</h2><h2 id="E07-全校上万条数据-怎么准确的搞笑地查看"><a href="#E07-全校上万条数据-怎么准确的搞笑地查看" class="headerlink" title="E07 全校上万条数据,怎么准确的搞笑地查看?"></a>E07 全校上万条数据,怎么准确的搞笑地查看?</h2><h2 id="E08-新手必知的函数学习方法"><a href="#E08-新手必知的函数学习方法" class="headerlink" title="E08 新手必知的函数学习方法"></a>E08 新手必知的函数学习方法</h2><h2 id="E09-高手必会的函数速算技巧"><a href="#E09-高手必会的函数速算技巧" class="headerlink" title="E09 高手必会的函数速算技巧"></a>E09 高手必会的函数速算技巧</h2><h2 id="E10-高手必会的数据处理妙招"><a href="#E10-高手必会的数据处理妙招" class="headerlink" title="E10 高手必会的数据处理妙招"></a>E10 高手必会的数据处理妙招</h2><h1 id="Word学习"><a href="#Word学习" class="headerlink" title="Word学习"></a>Word学习</h1><h2 id="W01-打牢Word基本功-赢过打印店老板"><a href="#W01-打牢Word基本功-赢过打印店老板" class="headerlink" title="W01 打牢Word基本功,赢过打印店老板"></a>W01 打牢Word基本功,赢过打印店老板</h2><p>tips:<font color="purle"><code>先把要需要的数据选区用鼠标选中它 使用Tab键横向移动单元格选框</code></font></p><h3 id="01-文本编辑基本功"><a href="#01-文本编辑基本功" class="headerlink" title="01 文本编辑基本功"></a>01 文本编辑基本功</h3><h4 id="被滥用的空格"><a href="#被滥用的空格" class="headerlink" title="被滥用的空格"></a>被滥用的空格</h4><ul><li>使用空格实现首行缩进</li></ul><p>使用段落格式的首行缩进</p><ul><li>用空格来精确对其文本</li></ul><p>精准对其工具：<font color="red"><code>制表符</code></font></p><p>[视图]选择[标尺]</p><p>对其表格三步走</p><p>一、插入制表符 </p><p>先切换””居中式制表符“ 在标尺中间点击一下 添加制表符</p><p>再选择“左对齐式制表符” 在标尺左边偏右点击一下 添加制表符</p><p>二、添加Tab键</p><p>三、调整制表符位置</p><p>全选,在水平标尺上使用鼠标左键,是可以拖动调整制表符来调整位置的.</p><p>如果不小心插入了错误的制表符,可以直接用鼠标拖离它.</p><h4 id="被滥用的回车"><a href="#被滥用的回车" class="headerlink" title="被滥用的回车"></a>被滥用的回车</h4><ul><li>敲回车调整段落间距</li></ul><p>solve:<font color="blue"><code>使用段落间距来随心所欲设置</code></font></p><ul><li>通过敲回车来换页</li></ul><p>solve:<font color="blue"><code>使用分页符</code></font>   <font color="red"><code>ctrl+enter</code></font>(最便捷)</p><p>分页的按钮还有两个。</p><p>第一个是单击[插入]选项卡 ,单击[页面]功能组的[分页]功能</p><p>第二个入口时单击[布局]选项卡,[页面设置]功能组的[分隔符]，选择[分页符]</p><h4 id="被误解的自动编号"><a href="#被误解的自动编号" class="headerlink" title="被误解的自动编号"></a>被误解的自动编号</h4><ul><li>自动编号总是自作多情地出现</li></ul><h5 id="编号与后面文本之间的距离太长了，如何解决"><a href="#编号与后面文本之间的距离太长了，如何解决" class="headerlink" title="编号与后面文本之间的距离太长了，如何解决?"></a>编号与后面文本之间的距离太长了，如何解决?</h5><p>solve: <font color="blue"><code>在编号上右击鼠标,选择[调整列表缩进量],可以在[编号之后]下面的下拉列表中,选择编号之后为&quot;不特别标注</code></font></p><h5 id="如何取消自动编号"><a href="#如何取消自动编号" class="headerlink" title="如何取消自动编号?"></a>如何取消自动编号?</h5><p>solve：<font color="blue"><code>依次打开[文件]、[选项]、[校对]、[自动更正选项],点开[键入时自动套用格式],取消勾选[自动编号列表]。</code></font></p><h3 id="02-快捷操作基本功"><a href="#02-快捷操作基本功" class="headerlink" title="02 快捷操作基本功"></a>02 快捷操作基本功</h3><p>选择全部文本:  <font color="red"><code> ctrl + A</code></font></p><p>选择大段文本:<font color="red"><code>  shift</code></font></p><p>选择不连续文本: <font color="red"><code> ctrl</code></font></p><h4 id="高频操作建议使用快捷键"><a href="#高频操作建议使用快捷键" class="headerlink" title="高频操作建议使用快捷键"></a>高频操作建议使用快捷键</h4><p>保存:<font color="red"><code> ctrl+s</code></font></p><p>撤销:<font color="red"><code>ctrl+z </code></font></p><p>重复上一步操作:<font color="red"><code>  f4</code></font> ！！！！！</p><h4 id="快速访问工具栏"><a href="#快速访问工具栏" class="headerlink" title="快速访问工具栏"></a>快速访问工具栏</h4><p>把记不住快捷键、找不到的功能按钮放到快速访问工具栏</p><h3 id="03-文档阅读基本功"><a href="#03-文档阅读基本功" class="headerlink" title="03 文档阅读基本功"></a>03 文档阅读基本功</h3><h5 id="隐藏段落标记"><a href="#隐藏段落标记" class="headerlink" title="隐藏段落标记"></a>隐藏段落标记</h5><p>[开始]选项卡的[段落]功能组这里的[显示&#x2F;隐藏编辑标记]   (只保留了回车符)</p><h5 id="彻底去除需要去Word选项设置"><a href="#彻底去除需要去Word选项设置" class="headerlink" title="彻底去除需要去Word选项设置"></a>彻底去除需要去Word选项设置</h5><p>依次单击[文件]、[选项]、[显示]，将[段落标记]前面的勾取消掉</p><h5 id="屏幕上一次性显示多页Word"><a href="#屏幕上一次性显示多页Word" class="headerlink" title="屏幕上一次性显示多页Word"></a>屏幕上一次性显示多页Word</h5><p>[视图]选项卡中[单页]和[多页]切换</p><h4 id="折叠功能区"><a href="#折叠功能区" class="headerlink" title="折叠功能区"></a>折叠功能区</h4><p>直接点击功能区</p><h3 id="04-文档打印基本功"><a href="#04-文档打印基本功" class="headerlink" title="04 文档打印基本功"></a>04 文档打印基本功</h3><p>正反打印学会区分长边、短边翻页</p><p>打印前记得输出PDF保证不变形asd</p><p><font color="red"><code>ctrl+p </code></font> 进入打印视图</p><p>为了避免Word文档在别人电脑上出现排版混乱的情况,建议把文档转化为PDF格式</p><h2 id="W02-团队高校合作-快速搞定小组作用统稿！"><a href="#W02-团队高校合作-快速搞定小组作用统稿！" class="headerlink" title="W02 团队高校合作,快速搞定小组作用统稿！"></a>W02 团队高校合作,快速搞定小组作用统稿！</h2><h3 id="01-设定模板样式"><a href="#01-设定模板样式" class="headerlink" title="01 设定模板样式"></a>01 设定模板样式</h3><p><strong>套用样式格式化文档</strong></p><p>步骤一: 根据文档组成套用样式</p><p>步骤二: 根据格式要求修改、新建样式</p><p><strong>如何修改多alt + 1级列表</strong></p><p>步骤一:  打开定义新的多级列表</p><p>步骤二:  修改1级标题编号形式</p><p>第三步:  修改2级标题编号形式</p><h3 id="02-模板分发与使用"><a href="#02-模板分发与使用" class="headerlink" title="02 模板分发与使用"></a>02 模板分发与使用</h3><p>设置快捷键 <font color="red"><code>alt + 1 </code></font>设置文档格式</p><h3 id="03-批量合并整理文档"><a href="#03-批量合并整理文档" class="headerlink" title="03 批量合并整理文档"></a>03 批量合并整理文档</h3><p><strong>合并文档</strong></p><p>第一步: 修改文档名称</p><p>第二步: 文档批量合并</p><p>随意打开一份word文档,依次点开[插入]选项卡,[对象]按钮旁边的三角.点击[文件中的文字]</p><p>第三步: 调整文章结构</p><p><font color="purle"><code>为了方便浏览长文档,我们可以使用[导航窗格]功能,依次单击[视图]选项卡,勾选[导航窗格]</code></font></p><p><strong>tips</strong>:</p><p> 技巧一:  批量删除多余空格</p><p><font color="purle"><code>[开始]选项卡中找到[替换]按钮</code></font></p><p>技巧二: 批量删除空行、</p><p>如何在查找替换框里输入段落标记？</p><p>按<font color="red"><code>ctrl + H </code></font> 打开查找替换对话框 点[更多]里的[特殊符号]里的段落标记</p><p><strong>summary</strong>:</p><p>1.设计范本,做出一份可复用的模板</p><p>2.分工合作,套用模板，编写文档</p><p>3.小组长快速合并文档,重复操作批量造</p><h2 id="W03-表格要是填不好-你的奖助学金要飞啦"><a href="#W03-表格要是填不好-你的奖助学金要飞啦" class="headerlink" title="W03 表格要是填不好,你的奖助学金要飞啦~"></a>W03 表格要是填不好,你的奖助学金要飞啦~</h2><h2 id="W04-学生会资料批量制作-拒绝做CV工程师"><a href="#W04-学生会资料批量制作-拒绝做CV工程师" class="headerlink" title="W04 学生会资料批量制作,拒绝做CV工程师"></a>W04 学生会资料批量制作,拒绝做CV工程师</h2><h2 id="W05-论文排版有套路-四步教你轻松搞定！-上"><a href="#W05-论文排版有套路-四步教你轻松搞定！-上" class="headerlink" title="W05 论文排版有套路,四步教你轻松搞定！(上)"></a>W05 论文排版有套路,四步教你轻松搞定！(上)</h2><h2 id="W06-论文排版有套路-四步教你轻松搞定！-下"><a href="#W06-论文排版有套路-四步教你轻松搞定！-下" class="headerlink" title="W06 论文排版有套路,四步教你轻松搞定！(下)"></a>W06 论文排版有套路,四步教你轻松搞定！(下)</h2><h2 id="W07-论文图表公式多元素混排-内容不听话"><a href="#W07-论文图表公式多元素混排-内容不听话" class="headerlink" title="W07 论文图表公式多元素混排,内容不听话?"></a>W07 论文图表公式多元素混排,内容不听话?</h2><h2 id="W08-做好审阅与保护，再也不怕老师同学改文档！"><a href="#W08-做好审阅与保护，再也不怕老师同学改文档！" class="headerlink" title="W08 做好审阅与保护，再也不怕老师同学改文档！"></a>W08 做好审阅与保护，再也不怕老师同学改文档！</h2><h2 id="W09-学生党必备！文档格式超级转换技巧！"><a href="#W09-学生党必备！文档格式超级转换技巧！" class="headerlink" title="W09 学生党必备！文档格式超级转换技巧！"></a>W09 学生党必备！文档格式超级转换技巧！</h2><h2 id="W10-用Word也能做出震惊面试官的简历？！"><a href="#W10-用Word也能做出震惊面试官的简历？！" class="headerlink" title="W10 用Word也能做出震惊面试官的简历？！"></a>W10 用Word也能做出震惊面试官的简历？！</h2><h1 id="PPT学习"><a href="#PPT学习" class="headerlink" title="PPT学习"></a>PPT学习</h1><h2 id="P01-哇塞！你的个人介绍超有范！"><a href="#P01-哇塞！你的个人介绍超有范！" class="headerlink" title="P01 哇塞！你的个人介绍超有范！"></a>P01 哇塞！你的个人介绍超有范！</h2><h3 id="01白底纯字-快速打造个人介绍"><a href="#01白底纯字-快速打造个人介绍" class="headerlink" title="01白底纯字,快速打造个人介绍"></a>01白底纯字,快速打造个人介绍</h3><h4 id="1-空白演示文稿的新建"><a href="#1-空白演示文稿的新建" class="headerlink" title="1 空白演示文稿的新建"></a>1 空白演示文稿的新建</h4><p>[开始]下方幻灯片工具组中点击板式,选择空白文稿,去除软件自带的默认文本框</p><h4 id="2-插入设置文本"><a href="#2-插入设置文本" class="headerlink" title="2 插入设置文本"></a>2 插入设置文本</h4><p>插入文本框时,拉动文本框就可以得到一个自动换行的段落文本框</p><p>一般情况下,多蚊子的文本内容,填充为深灰色,设置1.2-1.3的行距 阅读起来会比较舒服</p><h4 id="3-内容对齐排版"><a href="#3-内容对齐排版" class="headerlink" title="3 内容对齐排版"></a>3 内容对齐排版</h4><p>[形状格式]中的[对齐</p><p>小结:</p><p>文本有区别,字多字少二选一</p><p>阅读要舒适,行距深灰要用上</p><p>重点要突出,加粗颜色要用好</p><p>PPT当画布,多文本框好排版</p><h3 id="02-选对字体-打造特色个人"><a href="#02-选对字体-打造特色个人" class="headerlink" title="02 选对字体,打造特色个人"></a>02 选对字体,打造特色个人</h3><h4 id="1-下载字体"><a href="#1-下载字体" class="headerlink" title="1 下载字体"></a>1 下载字体</h4><p>找字网、求字体网</p><h4 id="2-安装字体"><a href="#2-安装字体" class="headerlink" title="2 安装字体"></a>2 安装字体</h4><h4 id="3-选用字体"><a href="#3-选用字体" class="headerlink" title="3 选用字体"></a>3 选用字体</h4><h4 id="03-打破惯性-打造创意个人"><a href="#03-打破惯性-打造创意个人" class="headerlink" title="03 打破惯性,打造创意个人"></a>03 打破惯性,打造创意个人</h4><h4 id="1-背景填充"><a href="#1-背景填充" class="headerlink" title="1 背景填充"></a>1 背景填充</h4><p>页面空白区鼠标右键</p><p>tips:<font color="purle"><code>[文本效果]中添加透视阴影</code></font></p><h2 id="P02-这么丑的社团简介-你指望用它来纳新？"><a href="#P02-这么丑的社团简介-你指望用它来纳新？" class="headerlink" title="P02 这么丑的社团简介,你指望用它来纳新？"></a>P02 这么丑的社团简介,你指望用它来纳新？</h2><h3 id="01-文字排版-重点信息更突出"><a href="#01-文字排版-重点信息更突出" class="headerlink" title="01 文字排版,重点信息更突出"></a>01 文字排版,重点信息更突出</h3><p>做好三步,让ppt有逻辑有重点！</p><p>1.分层分段</p><p>2.提炼观点</p><p>3.重点突出</p><p> <font color="red"><code>ctrl + d </code></font>复制模块</p><h3 id="02-适当裁剪-合理布局更大方"><a href="#02-适当裁剪-合理布局更大方" class="headerlink" title="02 适当裁剪,合理布局更大方"></a>02 适当裁剪,合理布局更大方</h3><h4 id="01-图片裁剪-左右排版"><a href="#01-图片裁剪-左右排版" class="headerlink" title="01 图片裁剪-左右排版"></a>01 图片裁剪-左右排版</h4><p>双击图片，点击裁剪功能,拉动裁剪框</p><h4 id="02-图片裁剪-上下排版"><a href="#02-图片裁剪-上下排版" class="headerlink" title="02 图片裁剪-上下排版"></a>02 图片裁剪-上下排版</h4><h4 id="03-形状裁剪-棱形、椭圆形"><a href="#03-形状裁剪-棱形、椭圆形" class="headerlink" title="03 形状裁剪-棱形、椭圆形"></a>03 形状裁剪-棱形、椭圆形</h4><p>双击图片,点击裁剪功能下拉三角</p><h4 id="04-图片裁剪、一图多用"><a href="#04-图片裁剪、一图多用" class="headerlink" title="04 图片裁剪、一图多用"></a>04 图片裁剪、一图多用</h4><p>小结: </p><p>图片裁剪,页面布局不用怕</p><p>好图多用,整套ppt也不怕</p><h3 id="03-巧用蒙版-烂图也能高大上"><a href="#03-巧用蒙版-烂图也能高大上" class="headerlink" title="03 巧用蒙版,烂图也能高大上"></a>03 巧用蒙版,烂图也能高大上</h3><p>所谓蒙版,就是填充了透明颜色的形状</p><p>三种蒙版形式:1.纯色蒙版 2.渐变蒙版 3.光圈蒙版</p><p>1.插入矩形  拉到适合位置 轮廓设置了无轮廓 颜色填充为黑色 选择性状 鼠标右键设置形状格式,  调节纯色填充的透明度</p><p>2.渐变角度90°代表从上往下的颜色渐变 0°代表水平从左往右的渐变</p><p>小结:</p><p>文字看不清,蒙版来搞定</p><p>图片质量低,蒙版来统一</p><p>图片不够用,渐变蒙版凑</p><p>视觉想聚焦,光圈要用好</p><h2 id="P03-不套模板-也能做出好看的课堂展示ppt"><a href="#P03-不套模板-也能做出好看的课堂展示ppt" class="headerlink" title="P03 不套模板,也能做出好看的课堂展示ppt"></a>P03 不套模板,也能做出好看的课堂展示ppt</h2><h2 id="P04-电影大片级的团建相册-看完赞不绝口"><a href="#P04-电影大片级的团建相册-看完赞不绝口" class="headerlink" title="P04 电影大片级的团建相册,看完赞不绝口"></a>P04 电影大片级的团建相册,看完赞不绝口</h2><h2 id="P05-专业知识图示化-老师同学都喜欢！"><a href="#P05-专业知识图示化-老师同学都喜欢！" class="headerlink" title="P05 专业知识图示化,老师同学都喜欢！"></a>P05 专业知识图示化,老师同学都喜欢！</h2><h2 id="P06-活动总结报告-数据-图标更有说服力"><a href="#P06-活动总结报告-数据-图标更有说服力" class="headerlink" title="P06 活动总结报告,数据+图标更有说服力"></a>P06 活动总结报告,数据+图标更有说服力</h2><h2 id="P07-毕业晚会ppt-这么做才吸引眼球"><a href="#P07-毕业晚会ppt-这么做才吸引眼球" class="headerlink" title="P07 毕业晚会ppt,这么做才吸引眼球"></a>P07 毕业晚会ppt,这么做才吸引眼球</h2><h2 id="P08-用这四步美化PPT-会被辅导员夸上天"><a href="#P08-用这四步美化PPT-会被辅导员夸上天" class="headerlink" title="P08 用这四步美化PPT,会被辅导员夸上天"></a>P08 用这四步美化PPT,会被辅导员夸上天</h2><h2 id="P09-学会这些快捷操作-让你更有职场范！"><a href="#P09-学会这些快捷操作-让你更有职场范！" class="headerlink" title="P09 学会这些快捷操作,让你更有职场范！"></a>P09 学会这些快捷操作,让你更有职场范！</h2><h2 id="P10-用好这个神器，你能秒杀99-的职场人"><a href="#P10-用好这个神器，你能秒杀99-的职场人" class="headerlink" title="P10 用好这个神器，你能秒杀99%的职场人."></a>P10 用好这个神器，你能秒杀99%的职场人.</h2>]]></content>
      
      
      <categories>
          
          <category> office </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
