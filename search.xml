<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>shell学习</title>
      <link href="/2023/08/21/shell%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/08/21/shell%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="概论"><a href="#概论" class="headerlink" title="概论"></a>概论</h1><p>shell是我们通过命令行与操作系统沟通的语言。</p><p>shell脚本可以直接在命令行中执行，也可以将一套逻辑组织成一个文件，方便复用。</p><p>AC Terminal中的命令行可以看成是一个<strong>“shell脚本在逐行执行”</strong>。</p><p>Linux中常见的shell脚本有很多种，常见的有：</p><ul><li>Bourne Shell<font color="red"><code>(/usr/bin/sh或/bin/sh)</code></font></li><li>Bourne Again Shell<font color="red"><code>(/bin/bash)</code></font></li><li>C Shell<font color="red"><code>(/usr/bin/csh)</code></font></li><li>K Shell<font color="red"><code>(/usr/bin/ksh)</code></font></li><li>zsh</li></ul><p>Linux系统中一般默认使用bash，所以接下来讲解bash中的语法。<br>文件开头需要写<font color="red"><code>#! /bin/bash</code></font>，指明bash为脚本解释器。</p><p>学习技巧<br>不要死记硬背，遇到含糊不清的地方，可以在Terminal里实际运行一遍。</p><p>脚本示例<br>新建一个<font color="red"><code>test.sh</code></font>文件，内容如下：</p><p>#! &#x2F;bin&#x2F;bash<br>echo “Hello World!”<br>运行方式<br>作为可执行文件(需要权限)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xtzy@DESKTOP-8LBB6V0:~$ <span class="token function">chmod</span> +x test.sh  <span class="token comment"># 使脚本具有可执行权限</span>xtzy@DESKTOP-8LBB6V0:~$ ./test.sh  <span class="token comment"># 当前路径下执行</span>Hello World<span class="token operator">!</span>  <span class="token comment"># 脚本输出</span>xtzy@DESKTOP-8LBB6V0:~$ /home/acs/test.sh  <span class="token comment"># 绝对路径下执行</span>Hello World<span class="token operator">!</span>  <span class="token comment"># 脚本输出</span>xtzy@DESKTOP-8LBB6V0:~$ ~/test.sh  <span class="token comment"># 家目录路径下执行</span>Hello World<span class="token operator">!</span>  <span class="token comment"># 脚本输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用解释器执行(不需要权限)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xtzy@DESKTOP-8LBB6V0:~$ <span class="token function">bash</span> test.shHello World<span class="token operator">!</span>  <span class="token comment"># 脚本输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>权限: <font color="red"><code>用户本身 用户组 其他用户</code></font></p><p>增加可执行的权限： <font color="red"><code>chmod +x test.sh</code></font></p><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p><strong>单行注释</strong><br>每行中 <font color="red"><code>#</code></font>之后的内容均是注释。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 这是一行注释</span><span class="token builtin class-name">echo</span> <span class="token string">'Hello World'</span>  <span class="token comment">#  这也是注释</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>多行注释<br>格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">:<span class="token operator">&lt;&lt;</span><span class="token string">EOF第一行注释第二行注释第三行注释EOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<font color="red"><code>EOF</code></font>可以换成其它任意字符串。例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">:<span class="token operator">&lt;&lt;</span><span class="token string">abc第一行注释第二行注释第三行注释abc</span>:<span class="token operator">&lt;&lt;</span><span class="token operator">!</span>第一行注释第二行注释第三行注释<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a><strong>定义变量</strong></h2><p>定义变量，不需要加<font color="red"><code>$</code></font>符号，例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">name1</span><span class="token operator">=</span><span class="token string">'xtzy'</span>  <span class="token comment"># 单引号定义字符串</span><span class="token assign-left variable">name2</span><span class="token operator">=</span><span class="token string">"xtzy"</span>  <span class="token comment"># 双引号定义字符串</span><span class="token assign-left variable">name3</span><span class="token operator">=</span>xtzy    <span class="token comment"># 也可以不加引号，同样表示字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a><strong>使用变量</strong></h2><p>使用变量，需要加上<font color="red"><code>$</code></font>符号，或者${}<font color="red"><code>$&#123;&#125;</code></font>符号。花括号是可选的，主要为了帮助解释器识别变量边界。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">name</span><span class="token operator">=</span>xtzy<span class="token builtin class-name">echo</span> <span class="token variable">$name</span>  <span class="token comment"># 输出xtzy</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;name&#125;</span>  <span class="token comment"># 输出xtzy</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;name&#125;</span>acwing  <span class="token comment"># 输出xtzycwing</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="只读变量"><a href="#只读变量" class="headerlink" title="只读变量"></a><strong>只读变量</strong></h2><p>使用readonly或者declare可以将变量变为只读。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">name</span><span class="token operator">=</span>xtzy<span class="token builtin class-name">readonly</span> name<span class="token builtin class-name">declare</span> <span class="token parameter variable">-r</span> name  <span class="token comment"># 两种写法均可</span><span class="token assign-left variable">name</span><span class="token operator">=</span>abc  <span class="token comment"># 会报错，因为此时name只读</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a><strong>删除变量</strong></h2><p><font color="red">unset</font>可以删除变量。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">name</span><span class="token operator">=</span>xtzy<span class="token builtin class-name">unset</span> name<span class="token builtin class-name">echo</span> <span class="token variable">$name</span>  <span class="token comment"># 输出空行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a><strong>变量类型</strong></h2><p>tips: 使用<font color="red">bash</font>命令会新开到一个新的bash  退出是<font color="red">exit</font></p><p>​按<font color="red">top</font>查看进程 按<font color="red">q</font>退出</p><p>1.自定义变量（局部变量）<br>    子进程不能访问的变量<br>2.环境变量（全局变量）<br>    子进程可以访问的变量</p><h3 id="自定义变量改成环境变量："><a href="#自定义变量改成环境变量：" class="headerlink" title="自定义变量改成环境变量："></a><strong>自定义变量改成环境变量：</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xtzy@DESKTOP-8LBB6V0:~$ <span class="token assign-left variable">name</span><span class="token operator">=</span>xtzy  <span class="token comment"># 定义变量</span>xtzy@DESKTOP-8LBB6V0~$ <span class="token builtin class-name">export</span> name  <span class="token comment"># 第一种方法</span>xtzy@DESKTOP-8LBB6V0~$ <span class="token builtin class-name">declare</span> <span class="token parameter variable">-x</span> name  <span class="token comment"># 第二种方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="环境变量改为自定义变量："><a href="#环境变量改为自定义变量：" class="headerlink" title="环境变量改为自定义变量："></a><strong>环境变量改为自定义变量：</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xtzy@DESKTOP-8LBB6V0:~$ <span class="token builtin class-name">export</span> <span class="token assign-left variable">name</span><span class="token operator">=</span>xtzy  <span class="token comment"># 定义环境变量</span>xtzy@DESKTOP-8LBB6V0:~$ <span class="token builtin class-name">declare</span> +x name  <span class="token comment"># 改为自定义变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>字符串</strong><br>字符串可以用单引号，也可以用双引号，也可以不用引号。</p><p><strong>单引号与双引号的区别：</strong></p><ul><li>单引号中的内容会原样输出，不会执行、不会取变量；</li><li>双引号中的内容可以执行、可以取变量；</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">name</span><span class="token operator">=</span>xtzy  <span class="token comment"># 不用引号</span><span class="token builtin class-name">echo</span> <span class="token string">'hello, $name \"hh\"'</span>  <span class="token comment"># 单引号字符串，输出 hello, $name \"hh\"</span><span class="token builtin class-name">echo</span> <span class="token string">"hello, <span class="token variable">$name</span> <span class="token entity" title="\&quot;">\"</span>hh<span class="token entity" title="\&quot;">\"</span>"</span>  <span class="token comment"># 双引号字符串，输出 hello, xtzy "hh"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>获取字符串长度</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"xtzy"</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;<span class="token operator">#</span>name&#125;</span>  <span class="token comment"># 输出4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>提取子串</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"hello, xtzy"</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;name<span class="token operator">:</span>0<span class="token operator">:</span>5&#125;</span>  <span class="token comment"># 提取从0开始的5个字符</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="默认变量"><a href="#默认变量" class="headerlink" title="默认变量"></a>默认变量</h1><p><strong>文件参数变量</strong><br>在执行shell脚本时，可以向脚本传递参数。<font color="red">$1</font>是第一个参数，<font color="red">$2</font>是第二个参数，以此类推。特殊的，<font color="red">$0</font>是文件名（包含路径）。例如：</p><p>创建文件<font color="red">test.sh</font>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token builtin class-name">echo</span> <span class="token string">"文件名："</span><span class="token variable">$0</span><span class="token builtin class-name">echo</span> <span class="token string">"第一个参数："</span><span class="token variable">$1</span><span class="token builtin class-name">echo</span> <span class="token string">"第二个参数："</span><span class="token variable">$2</span><span class="token builtin class-name">echo</span> <span class="token string">"第三个参数："</span><span class="token variable">$3</span><span class="token builtin class-name">echo</span> <span class="token string">"第四个参数："</span><span class="token variable">$4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后执行该脚本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xtzy@DESKTOP-8LBB6V0:~$ <span class="token function">chmod</span> +x test.sh xtzy@DESKTOP-8LBB6V0:~$ ./test.sh <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span>文件名：./test.sh第一个参数：1第二个参数：2第三个参数：3第四个参数：4其它参数相关变量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>其它参数相关变量</strong></p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><font color="red">$#</font></td><td>代表文件传入的参数个数，如上例中值为4</td></tr><tr><td><font color="red">$*</font></td><td>由所有参数构成的用空格隔开的字符串，如上例中值为”$1 $2 $3 $4”</td></tr><tr><td><font color="red">$@</font></td><td>每个参数分别用双引号括起来的字符串，如上例中值为”$1” “$2” “$3” “$4”</td></tr><tr><td><font color="red">$</font></td><td>脚本当前运行的进程ID</td></tr><tr><td><font color="red">$?</font></td><td>上一条命令的退出状态（注意不是stdout，而是exit code）。0表示正常退出，其他值表示错误</td></tr><tr><td><font color="red">$(command)</font></td><td>返回command这条命令的stdout（可嵌套</td></tr><tr><td><font color="red">&#96;&#96;command 、&#96;</font></td><td>返回command这条命令的stdout（不可嵌套）</td></tr></tbody></table><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>数组中可以存放多个不同类型的值，只支持一维数组，初始化时不需要指明数组大小。<br>数组<strong>下标从0开始</strong>。</p><p><strong>定义</strong><br>数组用小括号表示，元素之间用空格隔开。例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span> abc <span class="token string">"def"</span> xtzy<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以直接定义数组中某个元素的值：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>abcarray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"def"</span>array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>xtzy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>读取数组中某个元素的值</strong><br>格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$&#123;array<span class="token punctuation">[</span>index<span class="token punctuation">]</span>&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span> abc <span class="token string">"def"</span> yxc<span class="token punctuation">)</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;array<span class="token punctuation">[</span>0<span class="token punctuation">]</span>&#125;</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;array<span class="token punctuation">[</span>1<span class="token punctuation">]</span>&#125;</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;array<span class="token punctuation">[</span>2<span class="token punctuation">]</span>&#125;</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;array<span class="token punctuation">[</span>3<span class="token punctuation">]</span>&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>读取整个数组</strong><br>格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$&#123;array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>  <span class="token comment"># 第一种写法</span><span class="token variable">$&#123;array<span class="token punctuation">[</span>*<span class="token punctuation">]</span>&#125;</span>  <span class="token comment"># 第二种写法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span> abc <span class="token string">"def"</span> xtzy<span class="token punctuation">)</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>  <span class="token comment"># 第一种写法</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;array<span class="token punctuation">[</span>*<span class="token punctuation">]</span>&#125;</span>  <span class="token comment"># 第二种写法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>数组长度</strong><br>类似于字符串</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$&#123;<span class="token operator">#</span>array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>  <span class="token comment"># 第一种写法</span><span class="token variable">$&#123;<span class="token operator">#</span>array<span class="token punctuation">[</span>*<span class="token punctuation">]</span>&#125;</span>  <span class="token comment"># 第二种写法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span> abc <span class="token string">"def"</span> xtzy<span class="token punctuation">)</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;<span class="token operator">#</span>array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>  <span class="token comment"># 第一种写法</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;<span class="token operator">#</span>array<span class="token punctuation">[</span>*<span class="token punctuation">]</span>&#125;</span>  <span class="token comment"># 第二种写法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="expr命令"><a href="#expr命令" class="headerlink" title="expr命令"></a>expr命令</h1><p><strong>(第三方命令,不是bash内部命令)</strong></p><p><font color="red"><code>expr</code></font>命令用于求表达式的值，格式为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">expr</span> 表达式<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="表达式说明："><a href="#表达式说明：" class="headerlink" title="表达式说明："></a>表达式说明：</h2><ul><li>用空格隔开每一项</li><li>用反斜杠放在shell特定的字符前面（发现表达式运行错误时，可以试试转义）</li><li>对包含空格和其他特殊字符的字符串要用引号括起来</li><li>expr会在<font color="red"><code>stdout</code></font>中输出结果。如果为逻辑关系表达式，则结果为真时，<font color="red"><code>stdout</code></font>输出1，否则输出0。</li><li>expr的<font color="red"><code>exit code</code></font>：如果为逻辑关系表达式，则结果为真时，<font color="red"><code>exit code</code></font>为0，否则为1。</li></ul><h2 id="字符串表达式"><a href="#字符串表达式" class="headerlink" title="字符串表达式"></a>字符串表达式</h2><ul><li><font color="red"><code>length STRING</code></font><br>返回<font color="red"><code>STRING</code></font>的长度</li><li><font color="red"><code>index STRING CHARSET</code></font><br><font color="red"><code>CHARSET</code></font>中任意单个字符在<font color="red"><code>STRING</code></font>中最前面的字符位置，下标从1开始。如果在STRING中完全不存在CHARSET中的字符，则返回0。</li><li><font color="red"><code>substr STRING POSITION LENGTH</code></font><br>返回<font color="red"><code>STRING</code></font>字符串中从<font color="red"><code>POSITION</code></font>开始，长度最大为<font color="red"><code>LENGTH</code></font>的子串。如果<font color="red"><code>POSITION</code></font>或<font color="red"><code>LENGTH</code></font>为负数，0或非数值，则返回空字符串。</li></ul><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">str</span><span class="token operator">=</span><span class="token string">"Hello World!"</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> length <span class="token string">"<span class="token variable">$str</span>"</span><span class="token variable">`</span></span>  <span class="token comment"># ``不是单引号，表示执行该命令，输出12</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> index <span class="token string">"<span class="token variable">$str</span>"</span> aWd<span class="token variable">`</span></span>  <span class="token comment"># 输出7，下标从1开始</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> substr <span class="token string">"<span class="token variable">$str</span>"</span> <span class="token number">2</span> <span class="token number">3</span><span class="token variable">`</span></span>  <span class="token comment"># 输出 ell</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="整数表达式"><a href="#整数表达式" class="headerlink" title="整数表达式"></a>整数表达式</h2><p><font color="red"><code>expr</code></font>支持普通的算术操作，算术表达式优先级低于字符串表达式，高于逻辑关系表达式。</p><ul><li><font color="red"><code>+ -</code></font><br>加减运算。两端参数会转换为整数，如果转换失败则报错。</li></ul><ul><li><font color="red"><code> * / %</code></font><br>乘，除，取模运算。两端参数会转换为整数，如果转换失败则报错。</li></ul><p>​<strong>乘法运算的 * 的使用除转义外，还有直接加单引号这种方式也可以</strong></p><p> <font color="red">()</font>可以改变优先级，但需要用反斜杠转义</p><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">3</span><span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">4</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a + $b<span class="token variable">`</span></span>  <span class="token comment"># 输出7</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a - $b<span class="token variable">`</span></span>  <span class="token comment"># 输出-1</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a <span class="token punctuation">\</span>* $b<span class="token variable">`</span></span>  <span class="token comment"># 输出12，*需要转义</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a / $b<span class="token variable">`</span></span>  <span class="token comment"># 输出0，整除</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a % $b<span class="token variable">`</span></span> <span class="token comment"># 输出3</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> <span class="token punctuation">\</span><span class="token punctuation">(</span> $a + <span class="token number">1</span> <span class="token punctuation">\</span><span class="token punctuation">)</span> <span class="token punctuation">\</span>* <span class="token punctuation">\</span><span class="token punctuation">(</span> $b + <span class="token number">1</span> <span class="token punctuation">\</span><span class="token punctuation">)</span><span class="token variable">`</span></span>  <span class="token comment"># 输出20，值为(a + 1) * (b + 1)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="逻辑关系表达式"><a href="#逻辑关系表达式" class="headerlink" title="逻辑关系表达式"></a><strong>逻辑关系表达式</strong></h2><ul><li><font color="red"><code>|</code></font><br>如果第一个参数非空且非0，则返回第一个参数的值，否则返回第二个参数的值，但要求第二个参数的值也是非空或非0，否则返回0。如果第一个参数是非空或非0时，不会计算第二个参数。</li><li><font color="red"><code>&amp;</code></font><br>如果第一个参数非<br>如果两个参数都非空且非0，则返回第一个参数，否则返回0。如果第一个参为0或为空，则不会计算第二个参数。</li><li><font color="red"><code>&lt; &lt;= = == != &gt;= &gt;</code></font><br>比较两端的参数，如果为true，则返回1，否则返回0。”&#x3D;&#x3D;”是”&#x3D;”的同义词。”expr”首先尝试将两端参数转换为整数，并做算术比较，如果转换失败，则按字符集排序规则做字符比较。</li><li><font color="red"><code>() </code></font>可以改变优先级，但需要用反斜杠转义</li></ul><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">3</span><span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">4</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a <span class="token punctuation">\</span><span class="token operator">></span> $b<span class="token variable">`</span></span>  <span class="token comment"># 输出0，>需要转义</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a <span class="token string">'&lt;'</span> $b<span class="token variable">`</span></span>  <span class="token comment"># 输出1，也可以将特殊字符用引号引起来</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a <span class="token string">'>='</span> $b<span class="token variable">`</span></span>  <span class="token comment"># 输出0</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a <span class="token punctuation">\</span><span class="token operator">&lt;</span><span class="token punctuation">\</span><span class="token operator">=</span> $b<span class="token variable">`</span></span>  <span class="token comment"># 输出1</span><span class="token assign-left variable">c</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">d</span><span class="token operator">=</span><span class="token number">5</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $c <span class="token punctuation">\</span><span class="token operator">&amp;</span> $d<span class="token variable">`</span></span>  <span class="token comment"># 输出0</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a <span class="token punctuation">\</span><span class="token operator">&amp;</span> $b<span class="token variable">`</span></span>  <span class="token comment"># 输出3</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $c <span class="token punctuation">\</span><span class="token operator">|</span> $d<span class="token variable">`</span></span>  <span class="token comment"># 输出5</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a <span class="token punctuation">\</span><span class="token operator">|</span> $b<span class="token variable">`</span></span>  <span class="token comment"># 输出3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="read命令"><a href="#read命令" class="headerlink" title="read命令"></a>read命令</h1><p><font color="red"><code>read </code></font>命令用于从标准输入中读取单行数据。当读到文件结束符时，<font color="red"><code>exit code</code></font>为1，否则为0。</p><p>参数说明</p><ul><li><font color="red"><code>-p</code></font>: 后面可以接提示信息</li><li><font color="red"><code>-t </code></font>：后面跟秒数，定义输入字符的等待时间，超过等待时间后会自动忽略此命令<br>实例：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xtzy@DESKTOP-8LBB6V0::~$ <span class="token builtin class-name">read</span> name  <span class="token comment"># 读入name的值</span>acwing xtzy  <span class="token comment"># 标准输入</span>xtzy@DESKTOP-8LBB6V0::~$ <span class="token builtin class-name">echo</span> <span class="token variable">$name</span>  <span class="token comment"># 输出name的值</span>acwing xtzy  <span class="token comment">#标准输出</span>xtzy@DESKTOP-8LBB6V0::~$ <span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">"Please input your name: "</span> <span class="token parameter variable">-t</span> <span class="token number">30</span> name  <span class="token comment"># 读入name的值，等待时间30秒</span>Please input your name: acwing xtzy  <span class="token comment"># 标准输入</span>xtzy@DESKTOP-8LBB6V0::~$ <span class="token builtin class-name">echo</span> <span class="token variable">$name</span>  <span class="token comment"># 输出name的值</span>acwing xtzy  <span class="token comment"># 标准输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="echo命令"><a href="#echo命令" class="headerlink" title="echo命令"></a>echo命令</h1><p><font color="red"><code>echo </code></font>用于输出字符串。命令格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> STRING<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="显示普通字符串"><a href="#显示普通字符串" class="headerlink" title="显示普通字符串"></a>显示普通字符串</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"Hello AC Terminal"</span><span class="token builtin class-name">echo</span> Hello AC Terminal  <span class="token comment"># 引号可以省略</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="显示转义字符"><a href="#显示转义字符" class="headerlink" title="显示转义字符"></a>显示转义字符</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token entity" title="\&quot;">\"</span>Hello AC Terminal<span class="token entity" title="\&quot;">\"</span>"</span>  <span class="token comment"># 注意只能使用双引号，如果使用单引号，则不转义</span><span class="token builtin class-name">echo</span> <span class="token punctuation">\</span>"Hello AC Terminal<span class="token punctuation">\</span>"  <span class="token comment"># 也可以省略双引号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="显示变量"><a href="#显示变量" class="headerlink" title="显示变量"></a>显示变量</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">name</span><span class="token operator">=</span>xtzy<span class="token builtin class-name">echo</span> <span class="token string">"My name is <span class="token variable">$name</span>"</span>  <span class="token comment"># 输出 My name is xtzy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="显示换行"><a href="#显示换行" class="headerlink" title="显示换行"></a>显示换行</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"Hi<span class="token entity" title="\n">\n</span>"</span>  <span class="token comment"># -e 开启转义</span><span class="token builtin class-name">echo</span> <span class="token string">"acwing"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Hiacwing<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="显示不换行"><a href="#显示不换行" class="headerlink" title="显示不换行"></a>显示不换行</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"Hi <span class="token entity" title="\c">\c</span>"</span> <span class="token comment"># -e 开启转义 \c 不换行</span><span class="token builtin class-name">echo</span> <span class="token string">"acwing"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Hi acwing<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="显示结果定向至文件"><a href="#显示结果定向至文件" class="headerlink" title="显示结果定向至文件"></a>显示结果定向至文件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"Hello World"</span> <span class="token operator">></span> output.txt  <span class="token comment"># 将内容以覆盖的方式输出到output.txt中</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="原样输出字符串，不进行转义或取变量-用单引号"><a href="#原样输出字符串，不进行转义或取变量-用单引号" class="headerlink" title="原样输出字符串，不进行转义或取变量(用单引号)"></a>原样输出字符串，不进行转义或取变量(用单引号)</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">name</span><span class="token operator">=</span>acwing<span class="token builtin class-name">echo</span> <span class="token string">'$name\"'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出结果</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$name</span><span class="token punctuation">\</span>"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示命令的执行结果</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">date</span><span class="token variable">`</span></span> <span class="token punctuation">(</span>两个点可以获取命令的标准输出<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Wed Sep <span class="token number">1</span> <span class="token number">11</span>:45:33 CST <span class="token number">2021</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="printf命令"><a href="#printf命令" class="headerlink" title="printf命令"></a>printf命令</h1><p><font color="red"><code>printf</code></font>命令用于格式化输出，类似于<font color="red"><code>C/C++</code></font>中的<font color="red"><code>printf </code></font>函数。</p><p>默认不会在字符串末尾添加换行符。</p><p>命令格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">printf</span> format-string <span class="token punctuation">[</span>arguments<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用法示例<br>脚本内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">printf</span> <span class="token string">"%10d.<span class="token entity" title="\n">\n</span>"</span> <span class="token number">123</span>  <span class="token comment"># 占10位，右对齐</span><span class="token builtin class-name">printf</span> <span class="token string">"%-10.2f.<span class="token entity" title="\n">\n</span>"</span> <span class="token number">123.123321</span>  <span class="token comment"># 占10位，保留2位小数，左对齐</span><span class="token builtin class-name">printf</span> <span class="token string">"My name is %s<span class="token entity" title="\n">\n</span>"</span> <span class="token string">"xtzy"</span>  <span class="token comment"># 格式化输出字符串</span><span class="token builtin class-name">printf</span> <span class="token string">"%d * %d = %d<span class="token entity" title="\n">\n</span>"</span>  <span class="token number">2</span> <span class="token number">3</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> <span class="token number">2</span> <span class="token punctuation">\</span>* <span class="token number">3</span><span class="token variable">`</span></span> <span class="token comment"># 表达式的值作为参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">   <span class="token number">123</span>.<span class="token number">123.12</span>    <span class="token builtin class-name">.</span>My name is yxc<span class="token number">2</span> * <span class="token number">3</span> <span class="token operator">=</span> <span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="test命令-shell内置命令-与判断符号"><a href="#test命令-shell内置命令-与判断符号" class="headerlink" title="test命令(shell内置命令)与判断符号[]"></a>test命令(shell内置命令)与判断符号[]</h1><h2 id="逻辑运算符-和"><a href="#逻辑运算符-和" class="headerlink" title="逻辑运算符&amp;&amp;和||"></a>逻辑运算符&amp;&amp;和||</h2><ul><li><font color="red"><code>&amp;&amp;</code></font> 表示与，<font color="red"><code>||</code></font> 表示或</li><li>二者具有短路原则：<br><font color="red"><code>expr1 &amp;&amp; expr2</code></font>：当expr1为假时，直接忽略expr2<br><font color="red"><code>expr1 || expr2</code></font>：当expr1为真时，直接忽略expr2</li><li>表达式的<font color="red"><code>exit code</code></font>为0，表示真；为非零，表示假。（与C&#x2F;C++<font color="red"><code>printf</code></font>中的定义相反）</li></ul><h2 id="test命令"><a href="#test命令" class="headerlink" title="test命令"></a>test命令</h2><p>在命令行中输入<font color="red"><code>man test</code></font>，可以查看<font color="red"><code>test</code></font>命令的用法。</p><p><font color="red"><code>test</code></font>命令用于判断文件类型，以及对变量做比较。</p><p><font color="red"><code>test</code></font>命令用<font color="red"><code>exit code</code></font>返回结果，而不是使用<font color="red"><code>stdout</code></font>。0表示真，非0表示假。</p><p>例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">test</span> <span class="token number">2</span> <span class="token parameter variable">-lt</span> <span class="token number">3</span>  <span class="token comment"># 为真，返回值为0</span><span class="token builtin class-name">echo</span> <span class="token variable">$?</span>  <span class="token comment"># 输出上个命令的返回值，输出0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xtzy@DESKTOP-8LBB6V0:~$ <span class="token function">ls</span>  <span class="token comment"># 列出当前目录下的所有文件</span>homework  output.txt  test.sh  tmpxtzy@DESKTOP-8LBB6V0:~$ <span class="token builtin class-name">test</span> <span class="token parameter variable">-e</span> test.sh <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">"exist"</span> <span class="token operator">||</span> <span class="token builtin class-name">echo</span> <span class="token string">"Not exist"</span>exist  <span class="token comment"># test.sh 文件存在</span>xtzy@DESKTOP-8LBB6V0:~$ <span class="token builtin class-name">test</span> <span class="token parameter variable">-e</span> test2.sh <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">"exist"</span> <span class="token operator">||</span> <span class="token builtin class-name">echo</span> <span class="token string">"Not exist"</span>Not exist  <span class="token comment"># testh2.sh 文件不存在</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文件类型判断"><a href="#文件类型判断" class="headerlink" title="文件类型判断"></a>文件类型判断</h2><p>命令格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">test</span> <span class="token parameter variable">-e</span> filename  <span class="token comment"># 判断文件是否存在</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>测试参数</th><th>代表意义</th></tr></thead><tbody><tr><td>-e</td><td>文件是否存在</td></tr><tr><td>-f</td><td>是否为文件</td></tr><tr><td>-d</td><td>是否为目录</td></tr></tbody></table><h2 id="文件权限判断"><a href="#文件权限判断" class="headerlink" title="文件权限判断"></a>文件权限判断</h2><p>命令格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">test</span> <span class="token parameter variable">-r</span> filename  <span class="token comment"># 判断文件是否可读</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>测试参数</th><th>代表意义</th></tr></thead><tbody><tr><td>-r</td><td>文件是否可读</td></tr><tr><td>-w</td><td>文件是否可写</td></tr><tr><td>-x</td><td>文件是否可执行</td></tr><tr><td>-s</td><td>是否为非空文件</td></tr></tbody></table><h2 id="整数间的比较"><a href="#整数间的比较" class="headerlink" title="整数间的比较"></a>整数间的比较</h2><p>命令格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">test</span> <span class="token variable">$a</span> <span class="token parameter variable">-eq</span> <span class="token variable">$b</span>  <span class="token comment"># a是否等于b</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>测试参数</th><th>代表意义</th></tr></thead><tbody><tr><td>-eq</td><td>a是否等于b</td></tr><tr><td>-ne</td><td>a是否不等于b</td></tr><tr><td>-gt</td><td>a是否大于b</td></tr><tr><td>-lt</td><td>a是否小于b</td></tr><tr><td>-ge</td><td>a是否大于等于b</td></tr><tr><td>-le</td><td>a是否小于等于b</td></tr></tbody></table><h2 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h2><table><thead><tr><th>测试参数</th><th>代表意义</th></tr></thead><tbody><tr><td>test -z STRING</td><td>判断STRING是否为空，如果为空，则返回true</td></tr><tr><td>test -n STRING</td><td>判断STRING是否非空，如果非空，则返回true（-n可以省略）</td></tr><tr><td>test str1 &#x3D;&#x3D; str2</td><td>判断str1是否等于str2</td></tr><tr><td>test str1 !&#x3D; str2</td><td>判断str1是否不等于str2</td></tr></tbody></table><h2 id="多重条件判定"><a href="#多重条件判定" class="headerlink" title="多重条件判定"></a>多重条件判定</h2><p>命令格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">test</span> <span class="token parameter variable">-r</span> filename <span class="token parameter variable">-a</span> <span class="token parameter variable">-x</span> filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>测试参数</th><th>代表意义</th></tr></thead><tbody><tr><td>-a</td><td>两条件是否同时成立</td></tr><tr><td>-o</td><td>两条件是否至少一个成立</td></tr><tr><td>!</td><td>取反。如 test ! -x file，当file不可执行时，返回true</td></tr></tbody></table><h2 id="判断符号"><a href="#判断符号" class="headerlink" title="判断符号[]"></a>判断符号[]</h2><p><font color="red"><code>[]</code></font>与<font color="red"><code>test</code></font>用法几乎一模一样，更常用于if语句中。另外<font color="red"><code>[[]]</code></font>是<font color="red"><code>[]</code></font>的加强版，支持的特性更多。</p><p>例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span> <span class="token number">2</span> <span class="token parameter variable">-lt</span> <span class="token number">3</span> <span class="token punctuation">]</span>  <span class="token comment"># 为真，返回值为0</span><span class="token builtin class-name">echo</span> <span class="token variable">$?</span>  <span class="token comment"># 输出上个命令的返回值，输出0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xtzy@DESKTOP-8LBB6V0:~$ <span class="token function">ls</span>  <span class="token comment"># 列出当前目录下的所有文件</span>homework  output.txt  test.sh  tmp│xtzy@DESKTOP-8LBB6V0:~$<span class="token punctuation">[</span> <span class="token parameter variable">-e</span> test.sh <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">"exist"</span> <span class="token operator">||</span> <span class="token builtin class-name">echo</span> <span class="token string">"Not exist"</span>exist  <span class="token comment"># test.sh 文件存在</span>│xtzy@DESKTOP-8LBB6V0:~$ <span class="token punctuation">[</span> <span class="token parameter variable">-e</span> test2.sh <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">"exist"</span> <span class="token operator">||</span> <span class="token builtin class-name">echo</span> <span class="token string">"Not exist"</span>Not exist  <span class="token comment"># testh2.sh 文件不存在</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><ul><li><font color="red"><code>[]</code></font>内的每一项都要用空格隔开</li><li>中括号内的变量，最好用双引号括起来</li><li>中括号内的常数，最好用单或双引号括起来</li></ul><p>例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"acwing xtzy"</span><span class="token punctuation">[</span> <span class="token variable">$name</span> <span class="token operator">==</span> <span class="token string">"acwing  xtzy"</span> <span class="token punctuation">]</span>  <span class="token comment"># 错误，等价于 [ acwing  xtzy == "acwing  xtzy" ]，参数太多</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$name</span>"</span> <span class="token operator">==</span> <span class="token string">"acwing yxc"</span> <span class="token punctuation">]</span>  <span class="token comment"># 正确</span><span class="token builtin class-name">type</span> <span class="token punctuation">[</span>    <span class="token comment"># [ 是一个命令</span><span class="token builtin class-name">type</span> <span class="token punctuation">]</span>    <span class="token comment"># ] 不是一个命令</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h1><h2 id="if…then形式"><a href="#if…then形式" class="headerlink" title="if…then形式"></a>if…then形式</h2><p>类似于<font color="red"><code>C/C++</code></font>中的<font color="red"><code>if-else</code></font>语句。</p><p>tips： if[A]</p><p>1.如果A是数字,则if[A]始终为真</p><p>2.如果A是个表达式,则用A的返回值也就是状态码,来决定if[A]的真假,不过当状态码为0时if[A]为真,当状态码为非0的时候if[A]为假</p><h3 id="单层if"><a href="#单层if" class="headerlink" title="单层if"></a><strong>单层if</strong></h3><p>命令格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> condition<span class="token keyword">then</span>    语句1    语句2    <span class="token punctuation">..</span>.<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">3</span><span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">4</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$a</span>"</span> <span class="token parameter variable">-lt</span> <span class="token string">"<span class="token variable">$b</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$a</span>"</span> <span class="token parameter variable">-gt</span> <span class="token number">2</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$&#123;a&#125;</span>在范围内<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">3在范围内<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="单层if-else"><a href="#单层if-else" class="headerlink" title="单层if-else"></a><strong>单层if-else</strong></h3><p>命令格式</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> condition<span class="token keyword">then</span>    语句1    语句2    <span class="token punctuation">..</span>.<span class="token keyword">else</span>    语句1    语句2    <span class="token punctuation">..</span>.<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">3</span><span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">4</span><span class="token keyword">if</span> <span class="token operator">!</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$a</span>"</span> <span class="token parameter variable">-lt</span> <span class="token string">"<span class="token variable">$b</span>"</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$&#123;a&#125;</span>不小于<span class="token variable">$&#123;b&#125;</span><span class="token keyword">else</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$&#123;a&#125;</span>小于<span class="token variable">$&#123;b&#125;</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">3小于4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="多层if-elif-elif-else"><a href="#多层if-elif-elif-else" class="headerlink" title="多层if-elif-elif-else"></a><strong>多层if-elif-elif-else</strong></h3><p>命令格式</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> condition<span class="token keyword">then</span>    语句1    语句2    <span class="token punctuation">..</span>.<span class="token keyword">elif</span> condition<span class="token keyword">then</span>    语句1    语句2    <span class="token punctuation">..</span>.<span class="token keyword">elif</span> condition<span class="token keyword">then</span>    语句1    语句2<span class="token keyword">else</span>    语句1    语句2    <span class="token punctuation">..</span>.<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">4</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-eq</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$&#123;a&#125;</span>等于1<span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-eq</span> <span class="token number">2</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$&#123;a&#125;</span>等于2<span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-eq</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$&#123;a&#125;</span>等于3<span class="token keyword">else</span>    <span class="token builtin class-name">echo</span> 其他<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">其他<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="case…esac形式"><a href="#case…esac形式" class="headerlink" title="case…esac形式"></a>case…esac形式</h2><p>类似于C&#x2F;C++中的switch语句。</p><p>命令格式</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">case</span> $变量名称 <span class="token keyword">in</span>    值1<span class="token punctuation">)</span>        语句1        语句2        <span class="token punctuation">..</span>.        <span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token comment"># 类似于C/C++中的break</span>    值2<span class="token punctuation">)</span>        语句1        语句2        <span class="token punctuation">..</span>.        <span class="token punctuation">;</span><span class="token punctuation">;</span>    *<span class="token punctuation">)</span>  <span class="token comment"># 类似于C/C++中的default</span>        语句1        语句2        <span class="token punctuation">..</span>.        <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">4</span><span class="token keyword">case</span> <span class="token variable">$a</span> <span class="token keyword">in</span>    <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token builtin class-name">echo</span> <span class="token variable">$&#123;a&#125;</span>等于1        <span class="token punctuation">;</span><span class="token punctuation">;</span>      <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token builtin class-name">echo</span> <span class="token variable">$&#123;a&#125;</span>等于2        <span class="token punctuation">;</span><span class="token punctuation">;</span>      <span class="token number">3</span><span class="token punctuation">)</span>                                                        <span class="token builtin class-name">echo</span> <span class="token variable">$&#123;a&#125;</span>等于3        <span class="token punctuation">;</span><span class="token punctuation">;</span>      *<span class="token punctuation">)</span>        <span class="token builtin class-name">echo</span> 其他        <span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token keyword">esac</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">其他<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><h2 id="for…in…do…done"><a href="#for…in…do…done" class="headerlink" title="for…in…do…done"></a><strong>for…in…do…done</strong></h2><p>命令格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token for-or-select variable">var</span> <span class="token keyword">in</span> val1 val2 val3<span class="token keyword">do</span>    语句1    语句2    <span class="token punctuation">..</span>.<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例1，输出a 2 cc，每个元素一行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> a <span class="token number">2</span> cc<span class="token keyword">do</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$i</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>示例2，输出当前路径下的所有文件名，每个文件名一行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token for-or-select variable">file</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">ls</span><span class="token variable">`</span></span><span class="token keyword">do</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$file</span><span class="token keyword">done</span>示例3，输出1-10<span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">seq</span> <span class="token number">1</span> <span class="token number">10</span><span class="token variable">)</span></span><span class="token keyword">do</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$i</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例4，使用<font color="red"><code>&#123;1..10&#125;</code></font> 或者 <font color="red"><code>&#123;a..z&#125;</code></font></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token punctuation">&#123;</span>a<span class="token punctuation">..</span>z<span class="token punctuation">&#125;</span><span class="token keyword">do</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$i</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="for-…-…-…-do…done"><a href="#for-…-…-…-do…done" class="headerlink" title="for ((…;…;…)) do…done"></a>for ((…;…;…)) do…done</h2><p>命令格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>expression<span class="token punctuation">;</span> condition<span class="token punctuation">;</span> expression<span class="token punctuation">))</span></span><span class="token keyword">do</span>    语句1    语句2<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例，输出1-10，每个数占一行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token keyword">do</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$i</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="while…do…done循环"><a href="#while…do…done循环" class="headerlink" title="while…do…done循环"></a>while…do…done循环</h2><p>命令格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">while</span> condition<span class="token keyword">do</span>    语句1    语句2    <span class="token punctuation">..</span>.<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例，文件结束符为<font color="red"><code>Ctrl+d</code></font>，输入文件结束符后<font color="red"><code>read</code></font>指令返回false。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">while</span> <span class="token builtin class-name">read</span> name<span class="token keyword">do</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$name</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="until…do…done循环"><a href="#until…do…done循环" class="headerlink" title="until…do…done循环"></a>until…do…done循环</h2><p>当条件为真时结束。</p><p>命令格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">until</span> condition<span class="token keyword">do</span>    语句1    语句2    <span class="token punctuation">..</span>.<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例，当用户输入yes或者YES时结束，否则一直等待读入。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">until</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$&#123;word&#125;</span>"</span> <span class="token operator">==</span> <span class="token string">"yes"</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$&#123;word&#125;</span>"</span> <span class="token operator">==</span> <span class="token string">"YES"</span> <span class="token punctuation">]</span><span class="token keyword">do</span>    <span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">"Please input yes/YES to stop this program: "</span> word<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="break命令（"><a href="#break命令（" class="headerlink" title="break命令（?)"></a>break命令（?)</h2><p>跳出当前一层循环，注意与C&#x2F;C++不同的是：break不能跳出<font color="red"><code>case</code></font>语句。</p><p><strong>break跳出的是for循环, ;;跳出的是case</strong></p><p>示例:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">while</span> <span class="token builtin class-name">read</span> name<span class="token keyword">do</span>    <span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">))</span></span>    <span class="token keyword">do</span>        <span class="token keyword">case</span> <span class="token variable">$i</span> <span class="token keyword">in</span>            <span class="token number">8</span><span class="token punctuation">)</span>                <span class="token builtin class-name">break</span>                <span class="token punctuation">;</span><span class="token punctuation">;</span>            *<span class="token punctuation">)</span>                <span class="token builtin class-name">echo</span> <span class="token variable">$i</span>                <span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token keyword">esac</span>    <span class="token keyword">done</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该示例每读入非EOF的字符串，会输出一遍1-7。<br>该程序可以输入<font color="red"><code>Ctrl+d</code></font>文件结束符来结束，也可以直接用<font color="red"><code>Ctrl+c</code></font>杀掉该进程。</p><h2 id="continue命令"><a href="#continue命令" class="headerlink" title="continue命令"></a>continue命令</h2><p>跳出当前循环。</p><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token keyword">do</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $i % <span class="token number">2</span><span class="token variable">`</span></span> <span class="token parameter variable">-eq</span> <span class="token number">0</span> <span class="token punctuation">]</span>    <span class="token keyword">then</span>        <span class="token builtin class-name">continue</span>    <span class="token keyword">fi</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$i</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该程序输出1-10中的所有奇数。</p><h2 id="死循环的处理方式"><a href="#死循环的处理方式" class="headerlink" title="死循环的处理方式"></a>死循环的处理方式</h2><p>如果Terminal可以打开该程序，则输入<font color="red"><code>Ctrl+c</code></font>即可。</p><p>否则可以直接关闭进程：</p><p>使用<font color="red"><code>top</code></font>命令找到进程的PID<br>输入<font color="red"><code>kill -9 PID</code></font>即可关掉此进程</p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p><font color="red"><code>bash</code></font>中的函数类似于<font color="red"><code>C/C++</code></font>中的函数，但return<font color="red"><code>top</code></font>的返回值与<font color="red"><code>C/C++</code></font>不同，返回的是<font color="red"><code>exit code</code></font>，取值为0-255，0表示正常结束。</p><p>如果想获取函数的输出结果，可以通过<font color="red"><code>echo</code></font>输出到<font color="red"><code>stdout</code></font>中，然后通过<font color="red"><code>$(function_name)</code></font>来获取<font color="red"><code>stdout</code></font>中的结果。</p><p>函数的<font color="red"><code>return</code></font>值可以通过<font color="red"><code>$?</code></font>来获取。</p><p>命令格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>function<span class="token punctuation">]</span> <span class="token function-name function">func_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment"># function关键字可以省略</span>    语句1    语句2    <span class="token punctuation">..</span>.<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不获取 <font color="red"><code>return</code></font>值和<font color="red"><code>stdout</code></font>值<br>示例</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token assign-left variable">name</span><span class="token operator">=</span>xtzy    <span class="token builtin class-name">echo</span> <span class="token string">"Hello <span class="token variable">$name</span>"</span><span class="token punctuation">&#125;</span>func<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Hello xtzy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获取<font color="red"><code> return</code></font>值和<font color="red"><code>stdout</code></font>值<br>不写<font color="red"><code>return</code></font>时，默认<font color="red"><code>return 0</code></font>。</p><p>示例</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token assign-left variable">name</span><span class="token operator">=</span>xtzy    <span class="token builtin class-name">echo</span> <span class="token string">"Hello <span class="token variable">$name</span>"</span><span class="token builtin class-name">return</span> <span class="token number">123</span><span class="token punctuation">&#125;</span><span class="token assign-left variable">output</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>func<span class="token variable">)</span></span><span class="token assign-left variable">ret</span><span class="token operator">=</span><span class="token variable">$?</span><span class="token builtin class-name">echo</span> <span class="token string">"output = <span class="token variable">$output</span>"</span><span class="token builtin class-name">echo</span> <span class="token string">"return = <span class="token variable">$ret</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">output <span class="token operator">=</span> Hello xtzy<span class="token builtin class-name">return</span> <span class="token operator">=</span> <span class="token number">123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="函数的输入参数"><a href="#函数的输入参数" class="headerlink" title="函数的输入参数"></a>函数的输入参数</h2><p>在函数内，<font color="red"><code>$1</code></font>表示第一个输入参数，<font color="red"><code>$2</code></font>表示第二个输入参数，依此类推。</p><p>注意：函数内的<font color="red"><code>$0</code></font>仍然是文件名，而不是函数名。</p><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$1</span> <span class="token parameter variable">-le</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token keyword">then</span><span class="token builtin class-name">echo</span> <span class="token number">0</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token keyword">fi</span><span class="token assign-left variable">sum</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>func <span class="token punctuation">$(</span>expr $1 - <span class="token number">1</span><span class="token punctuation">)</span><span class="token variable">)</span></span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">expr</span> $sum + $1<span class="token variable">)</span></span><span class="token punctuation">&#125;</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$(</span>func <span class="token number">10</span><span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment"># 递归计算 $1 + ($1 - 1) + ($1 - 2) + ... + 0</span>    <span class="token assign-left variable">word</span><span class="token operator">=</span><span class="token string">""</span>    <span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$&#123;word&#125;</span>"</span> <span class="token operator">!=</span> <span class="token string">'y'</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$&#123;word&#125;</span>"</span> <span class="token operator">!=</span> <span class="token string">'n'</span> <span class="token punctuation">]</span>    <span class="token keyword">do</span>        <span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">"要进入func(<span class="token variable">$1</span>)函数吗？请输入y/n："</span> word    <span class="token keyword">done</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$word</span>"</span> <span class="token operator">==</span> <span class="token string">'n'</span> <span class="token punctuation">]</span>    <span class="token keyword">then</span>        <span class="token builtin class-name">echo</span> <span class="token number">0</span>        <span class="token builtin class-name">return</span> <span class="token number">0</span>    <span class="token keyword">fi</span>      <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$1</span> <span class="token parameter variable">-le</span> <span class="token number">0</span> <span class="token punctuation">]</span>     <span class="token keyword">then</span>        <span class="token builtin class-name">echo</span> <span class="token number">0</span>        <span class="token builtin class-name">return</span> <span class="token number">0</span>    <span class="token keyword">fi</span>      <span class="token assign-left variable">sum</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>func <span class="token punctuation">$(</span>expr $1 - <span class="token number">1</span><span class="token punctuation">)</span><span class="token variable">)</span></span>    <span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">expr</span> $sum + $1<span class="token variable">)</span></span>   <span class="token punctuation">&#125;</span>   <span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$(</span>func <span class="token number">10</span><span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">55<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="函数内的局部变量"><a href="#函数内的局部变量" class="headerlink" title="函数内的局部变量"></a>函数内的局部变量</h2><p>可以在函数内定义局部变量，作用范围仅在当前函数内。</p><p>可以在递归函数中定义局部变量。</p><p>命令格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">local</span> 变量名<span class="token operator">=</span>变量值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token function-name function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">name</span><span class="token operator">=</span>xtzy    <span class="token builtin class-name">echo</span> <span class="token variable">$name</span><span class="token punctuation">&#125;</span>func<span class="token builtin class-name">echo</span> <span class="token variable">$name</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">xtzy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一行为函数内的name变量，第二行为函数外调用name变量，会发现此时该变量不存在。</p><h1 id="exit命令"><a href="#exit命令" class="headerlink" title="exit命令"></a>exit命令</h1><p><font color="red"><code>exit</code></font>命令用来退出当前<font color="red"><code>shell</code></font>进程，并返回一个退出状态；使用$?可以接收这个退出状态。</p><p><font color="red"><code>exit</code></font>命令可以接受一个整数值作为参数，代表退出状态。如果不指定，默认状态值是 0。</p><p><font color="red"><code>exit</code></font>退出状态只能是一个介于 0~255 之间的整数，其中只有 0 表示成功，其它值都表示失败。</p><p>示例：</p><p>创建脚本<font color="red"><code>test.sh</code></font>，内容如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$#</span> <span class="token parameter variable">-ne</span> <span class="token number">1</span> <span class="token punctuation">]</span>  <span class="token comment"># 如果传入参数个数等于1，则正常退出；否则非正常退出。</span><span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"arguments not valid"</span>    <span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token keyword">else</span>    <span class="token builtin class-name">echo</span> <span class="token string">"arguments valid"</span>    <span class="token builtin class-name">exit</span> <span class="token number">0</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行该脚本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xtzy@DESKTOP-8LBB6V0:~$ <span class="token function">chmod</span> +x test.sh xtzy@DESKTOP-8LBB6V0:~$./test.sh acwingarguments validxtzy@DESKTOP-8LBB6V0:~$ <span class="token builtin class-name">echo</span> <span class="token variable">$?</span>  <span class="token comment"># 传入一个参数，则正常退出，exit code为0</span><span class="token number">0</span>xtzy@DESKTOP-8LBB6V0:~$ ./test.sh arguments not validxtzy@DESKTOP-8LBB6V0:~<span class="token variable">$echo</span> <span class="token variable">$?</span>  <span class="token comment"># 传入参数个数不是1，则非正常退出，exit code为1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="文件重定向"><a href="#文件重定向" class="headerlink" title="文件重定向"></a>文件重定向</h1><p>每个进程默认打开3个文件描述符：</p><ul><li><font color="red"><code>stdin</code></font>标准输入，从命令行读取数据，文件描述符为0</li><li><font color="red"><code>stdout</code></font>标准输出，向命令行输出数据，文件描述符为1</li><li><font color="red"><code>stderr</code></font>标准错误输出，向命令行输出数据，文件描述符为2</li></ul><p>可以用文件重定向将这三个文件重定向到其他文件中</p><h2 id="重定向命令列表"><a href="#重定向命令列表" class="headerlink" title="重定向命令列表"></a>重定向命令列表</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><font color="red"><code>command &gt; file</code></font></td><td>将<font color="red"><code>stdout</code></font>重定向到<font color="red"><code>file</code></font>中</td></tr><tr><td><font color="red"><code>command &lt; file</code></font></td><td>将<font color="red"><code>stdin</code></font>重定向到<font color="red"><code>file</code></font>中</td></tr><tr><td><font color="red"><code>command &gt;&gt; file</code></font></td><td>将<font color="red"><code>stdout</code></font>以追加方式重定向到<font color="red"><code>file</code></font>中</td></tr><tr><td><font color="red"><code>command n&gt; file</code></font></td><td>将文件描述符<font color="red"><code>n</code></font>重定向到file<font color="red"><code>exit</code></font>中</td></tr><tr><td><font color="red"><code>command n&gt;&gt; file</code></font></td><td>将文件描述符<font color="red"><code>n</code></font>以追加方式重定向到<font color="red"><code>file</code></font>中</td></tr></tbody></table><h2 id="输入和输出重定向"><a href="#输入和输出重定向" class="headerlink" title="输入和输出重定向"></a>输入和输出重定向</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"Hello <span class="token entity" title="\c">\c</span>"</span> <span class="token operator">></span> output.txt  <span class="token comment"># 将stdout重定向到output.txt中</span><span class="token builtin class-name">echo</span> <span class="token string">"World"</span> <span class="token operator">>></span> output.txt  <span class="token comment"># 将字符串追加到output.txt中</span><span class="token builtin class-name">read</span> str <span class="token operator">&lt;</span> output.txt  <span class="token comment"># 从output.txt中读取字符串</span><span class="token builtin class-name">echo</span> <span class="token variable">$str</span>  <span class="token comment"># 输出结果：Hello World</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="同时重定向stdin和stdout"><a href="#同时重定向stdin和stdout" class="headerlink" title="同时重定向stdin和stdout"></a>同时重定向stdin和stdout</h2><p>创建bash脚本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token builtin class-name">read</span> a<span class="token builtin class-name">read</span> b<span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">expr</span> <span class="token string">"<span class="token variable">$a</span>"</span> + <span class="token string">"<span class="token variable">$b</span>"</span><span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建input.txt，里面的内容为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">3</span><span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>执行命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xtzy@DESKTOP-8LBB6V0:~$ <span class="token function">chmod</span> +x test.sh  <span class="token comment"># 添加可执行权限</span>xtzy@DESKTOP-8LBB6V0:~$ ./test.sh <span class="token operator">&lt;</span> input.txt <span class="token operator">></span> output.txt  <span class="token comment"># 从input.txt中读取内容，将输出写入output.txt中</span>xtzy@DESKTOP-8LBB6V0:~$ <span class="token function">cat</span> output.txt  <span class="token comment"># 查看output.txt中的内容</span><span class="token number">7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="引入外部脚本"><a href="#引入外部脚本" class="headerlink" title="引入外部脚本"></a>引入外部脚本</h1><p>类似于<font color="red"><code>C/C++</code></font>中的<font color="red"><code>include</code></font>操作，bash也可以引入其他文件中的代码。</p><p>语法格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">.</span> filename  <span class="token comment"># 注意点和文件名之间有一个空格</span>或<span class="token builtin class-name">source</span> filename<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例<br>创建<font color="red"><code>test1.sh</code></font>，内容为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token assign-left variable">name</span><span class="token operator">=</span>xtzy  <span class="token comment"># 定义变量name</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后创建<font color="red"><code>test2.sh</code></font>，内容为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token builtin class-name">source</span> test1.sh <span class="token comment"># 或 . test1.sh  </span><span class="token builtin class-name">echo</span> My name is: <span class="token variable">$name</span>  <span class="token comment"># 可以使用test1.sh中的变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xtzy@DESKTOP-8LBB6V0:~<span class="token variable">$chmod</span> +x test2.sh xtzy@DESKTOP-8LBB6V0:~$ ./test2.sh My name is: xtzy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux学习</title>
      <link href="/2023/08/19/linux%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/08/19/linux%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>服务器一般没有图形化界面,所有自然而然就要用到linux操作系统进行操作咯。</p><h1 id="1-1-常用文件管理命令"><a href="#1-1-常用文件管理命令" class="headerlink" title="1.1 常用文件管理命令"></a>1.1 常用文件管理命令</h1><p><font color="red"><code>bin</code></font>文件夹:  存的是一些常用的可执行命令</p><p><font color="red"><code>etc</code></font>文件夹:  存的是一些配置文件</p><p><font color="red"><code>var</code></font>文件夹:  存的是一些日志文件</p><p><font color="red"><code>lib</code></font>文件夹:  存的是一些安装包和头文件</p><p><font color="red"><code>home</code></font>文件夹:  存的是所有用户的根目录</p><p><font color="red"><code>proc</code></font>文件夹:  存的是进程相关的一些信息</p><p>回到家目录:  <font color="red"><code>cd ~/</code></font>   或者  <font color="red"><code>cd</code></font></p><p>清除本行:  <font color="red"><code>ctrl + u</code></font></p><p>ls常用参数:  <mark>-l -a -h  </mark>       <mark>  ll &#x3D; ls - la </mark> </p><p>显示当前路径：<font color="red"><code>pwd</code></font></p><p>返回上一层： <font color="red"><code>cd ..</code></font></p><p>返回上一个呆过的目录: <font color="red"><code>cd -</code></font></p><p>复制文件:   <mark>  cp 源文件 目标文件 </mark>     <font color="blue"><code>cp = 复制 + 粘贴 + 重命名</code></font>    <font color="red"><code>复制文件夹加参数 </code></font></p><p>给文件夹的名字起空格: 转义加 <mark> \ </mark> 即可</p><p>创建层级文件夹: <font color="red"><code>mkdir a/b/c -p  </code></font></p><p>创建文件: <font color="red"><code>touch xxx</code></font></p><p>查看历史指令记录; <font color="red"><code>history</code></font></p><p>删除:   <font color="red"><code>  rm xxx yyy  -r(递归删)</code></font>   删库跑路： <mark>  rm &#x2F;* -rf </mark> </p><p>取文件内容; <font color="red"><code>cat xxx</code></font></p><p>mv  cp 唯一区别 一个是直接移动 一个是复制黏贴</p><p> <mark>  top</mark>命令: 相当于windows下的任务管理器</p><h2 id="描述路径方式"><a href="#描述路径方式" class="headerlink" title="描述路径方式:"></a>描述路径方式:</h2><ul><li>绝对路径  （从根路径<mark>&#x2F;</mark>开始描述)</li><li>相对路径     (从当前路径开始描述)</li></ul><h1 id="2-1-tmux和vim"><a href="#2-1-tmux和vim" class="headerlink" title="2.1 tmux和vim"></a>2.1 tmux和vim</h1><h2 id="tmux"><a href="#tmux" class="headerlink" title="tmux"></a>tmux</h2><p>tmux最重要的两个作用: 1. <font color="red"><code>分屏</code></font>  2. <font color="red"><code>任务可以挂到云端执行</code></font></p><h3 id="安装tmux命令"><a href="#安装tmux命令" class="headerlink" title="安装tmux命令:"></a>安装tmux命令:</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> tmux<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="tmux修改ctrl-b-快捷键为ctrl-a"><a href="#tmux修改ctrl-b-快捷键为ctrl-a" class="headerlink" title="tmux修改ctrl + b 快捷键为ctrl + a"></a>tmux修改ctrl + b 快捷键为ctrl + a</h3><pre class="line-numbers language-none"><code class="language-none">vim ~&#x2F;.tmux.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="tmux操作："><a href="#tmux操作：" class="headerlink" title="tmux操作："></a>tmux操作：</h3><p>​1.tmux: 新建一个session，其中包含一个window,window中包含一个pane,pane里打开了一个shell对话框</p><p>​2.按下Ctrl + a 后手指松开,然后按<font color="red"><code>%</code></font>:  将当前pane左右半分成两个pane</p><p>​3.按下Ctrl + a  后手指松开,然后按”<font color="red"><code>代码</code></font>： 将当前pane上下半分成两个pane</p><p>​4.Ctrl + d: 关闭当前pane,如果当前windows的所有pane均以关闭,则自动关闭windows;如果当前session的所有windows均已关闭,则自动关闭session</p><p>​5.按下Ctrl + a 后手指松开,然后按方向键: 选择相邻的pane.</p><p>​6.按下Ctrl + a 的同时按方向键,可以调整pane之间分割线的位置.</p><p>​7.按下Ctrl + a 后手指松开,然后按<font color="red"><code>z</code></font>: 将当前pane全屏&#x2F;取消全屏。</p><p>​8.按下Ctrl + a 后手指松开,然后按<font color="red"><code>d</code></font>: 挂起当前session。</p><p>​9.tmux + a: 打开之前挂起的session </p><p>​10.按下Ctrl + a 后手指松开, 然后按s<font color="red"><code>代码</code></font>，选择其他session。</p><p>​方向键 - 上: 选择上一项 session&#x2F;window&#x2F;pane</p><p>​方向键 - 下: 选择下一项 session&#x2F;window&#x2F;pane</p><p>​方向键 - 右: 展开当前项 session&#x2F;window</p><p>​方向键 - 左: 闭合当前项 session&#x2F;window</p><p>​11.按下Ctrl + a  后手指松开, 然后按c,在当前session中创建一个新的window。</p><p>​12.按下Ctrl + a  后手指松开,然后按w,选择其他的window,操作方法与(10)完全相同</p><p>​13.按下Ctrl + a  后手指松开,然后按PageUp；翻阅当前pane内的内容</p><p>​14.在tmux中选中文本时，需要按住shift键.</p><p>​15.鼠标滚轮: 翻阅当前pane内的内容</p><p>​16.在tmux中选中文本时,需要按住shift键。   复制:  <mark>ctrl + insert</mark> 粘贴:  (<mark>linux)shift + insert</mark></p><h2 id="vim-命令行模式下的编辑器"><a href="#vim-命令行模式下的编辑器" class="headerlink" title="vim(命令行模式下的编辑器)"></a>vim(命令行模式下的编辑器)</h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能:"></a>功能:</h3><p>​1.命令行模式下的文本编辑器.</p><p>​2.根据文件扩展名自动判别编程语言,支持代码缩进、代码高亮等功能.</p><p>​3.使用方式: vim filename</p><p>​如果已有该文件,则打开它.</p><p>​如果没有该文件,则打开一个新的文件，并命名为filename</p><h3 id="模式"><a href="#模式" class="headerlink" title="模式:"></a>模式:</h3><p>​    1.一般命令模式</p><p>​默认模式: 命令输入方式: 类似于打游戏放技能,按不同字符，即可进行不同操作。可以复制,粘贴</p><p>删除文本等.</p><p>​2.编辑模式</p><p>​在一般命令模式下按下i，会进入编辑模式.</p><p>​按下ESC键退出编辑模式,返回到一般命令模式》</p><p>​3.命令行模式</p><p>​在一般命令模式下按下:&#x2F;?三个字母中的任意一个,会进入命令行模式,命令行在最下谜案.</p><h3 id="操作"><a href="#操作" class="headerlink" title="操作:"></a>操作:</h3><p>​1.i: 进入编辑模式</p><p>​2.ESC:  进入一般命令模式</p><p>​3.h 或 左箭头键: 光标向左移动一个字符</p><p>​4.j  或 向下箭头:  光标向下移动一个字符</p><p>​5.k 或 向上箭头:  光标向上移动一个字符</p><p>​6.l  或 向右箭头:   光表向右移动一个字符</p><p>​7.n&lt;<font color="red"><code>space&gt;</code></font>： n表示数字,按下数字后再按空格,光标会向右移动这一行的n个字符</p><p>​8.0 或 功能键[home]: 光标移动到本行开头</p><p>​9.$或 功能键[End]: 光标移动到本行末尾</p><p>​    10.G： 光标移动到最后一行</p><p>​11. :n 或 nG: n为数字,光标移动到第n行</p><p>​12. gg: 光标移动到第一行, 相当于1G</p><p>​13.n<font color="red"><code>&lt;Enter&gt;</code></font>: n为数字,光标向下移动到第n行</p><p>​14. &#x2F;word: 向光标之下寻找第一个值为word的字符串.</p><p>​15. ?word: 向光标之上寻找第一个值为word的字符串.</p><p>​16.n: 重复前一个查找操作</p><p>​17.N: 反向重复前一个查找操作</p><p>​18.:n1,n2s&#x2F;word1&#x2F;word2&#x2F;g: n1与n2为数字,在第你n1行与n2行之间寻找word1这个字符串,并将该字符串替换为word2</p><p>​19. :1,$s&#x2F;word1&#x2F;word2&#x2F;g: 将全文的word1替换为word2</p><p>​20. :1,$s&#x2F;word1&#x2F;word2&#x2F;gc: 将全文的word1替换为word2, 且在替换前要求用户确认》</p><p>​21. v: 选中文本</p><p>​22.d: 删除选中的文本</p><p>​23.dd: 删除当前行</p><p>​24.y: 复制选中的文本</p><p>​25.yy:  复制当行</p><p>​26.p: 将复制的数据在光标的下一行黏贴</p><p>​27.u: 撤销</p><p>​28.Ctrl + r: 取消撤销</p><p>​29.Shift + &gt;: 将选中的文本整体向右移动</p><p>​30.Shift + &lt;: 将选中的文本整体向左移动</p><p>​31.:w : 保存</p><p>​32: :w! : 强制保存</p><p>​33. :q: 退出</p><p>​34. :q! : 强制退出</p><p>​35. :wq : 保存并退出</p><p>​36. :set paste 设置为粘贴模式,取消代码自动缩进</p><p>​37. :set nopaste 取消粘贴模式,开启代码自动缩进</p><p>​38  :set nu 显示行号</p><p>​39. :set nonu 隐藏行号</p><p>​40. gg&#x3D;G ： 将全文代码格式化</p><p>​41. :noh  关闭查找关键词高亮</p><p>​42. Ctrl + q： 当vim卡死时,可以取消当前在执行的命令</p><p>异常处理:</p><p>​每次用vim编辑文件时,会自动创建一个.filename.swp的临时文件.</p><p>​如果打开某个文件时,该文件的swap文件已存在,则会报错.此时解决方法有两种</p><p>​1.找到正在打开该文件的程序,并退出</p><p>​2.直接删掉该swp文件即可</p><h3 id="组合连招"><a href="#组合连招" class="headerlink" title="组合连招:"></a>组合连招:</h3><p>删除全部文本: <mark>gg d G</mark></p><p>将全文代码格式化 <mark>gg &#x3D; G</mark></p><h1 id="3-1-Shell语法"><a href="#3-1-Shell语法" class="headerlink" title="3.1 Shell语法"></a>3.1 Shell语法</h1><p><font color="red"><code>代码</code></font></p><p><font color="blue"><code>代码</code></font></p><p><mark>高亮代码</mark></p><p><a href="https://www.bilibili.com/">比例</a></p><blockquote><blockquote><blockquote></blockquote></blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pr学习</title>
      <link href="/2023/08/05/pr/"/>
      <url>/2023/08/05/pr/</url>
      
        <content type="html"><![CDATA[<p><img src="/.xyz//..%5Cimg%5Cbg4.jpg"></p><h1 id="01-电子相册案例"><a href="#01-电子相册案例" class="headerlink" title="01 电子相册案例"></a>01 电子相册案例</h1><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p><font color="orange"><code>~</code></font> : 放大项目面板</p><p><font color="orange"><code>alt</code></font> + 滚轮: 调整素材大小</p><p><code>\</code>: 自动调整</p><p><font color="orange"><code>v</code></font> : 选择工具</p><p><font color="orange"><code>C</code></font>: 剃刀工具</p><p><font color="orange"><code>ctrl + c</code></font>: 复制</p><p><font color="orange"><code>Ctrl + alt + v</code></font>: 黏贴属性</p><h2 id="新建序列"><a href="#新建序列" class="headerlink" title="新建序列"></a>新建序列</h2><p>新建序列的参数: </p><ul><li>编辑模式: 自定义</li><li>时基: 25帧&#x2F;秒</li><li>帧大小: 1920 水平  1080 垂直</li><li>像素长宽比: 方形像素</li><li>场: 无场扫描</li></ul><h2 id="批量添加转场效果"><a href="#批量添加转场效果" class="headerlink" title="批量添加转场效果:"></a>批量添加转场效果:</h2><p>先右键 添加为 默认过度  再对素材进行框选 使用 <font color="orange"><code>Ctril + D</code></font>进行添加</p><p><font color="orange"><code>交叉溶解</code></font> 的持续时间一般16-17帧即可。</p><h2 id="批量修改效果的持续时间"><a href="#批量修改效果的持续时间" class="headerlink" title="批量修改效果的持续时间"></a>批量修改效果的持续时间</h2><p>[编辑]-&gt;[首选项]-&gt;[时间轴]</p><h2 id="相册分层-制作边框"><a href="#相册分层-制作边框" class="headerlink" title="相册分层+制作边框:"></a>相册分层+制作边框:</h2><p>选中素材 按住 <font color="orange"><code>alt</code></font>往上托,选中上面的一张图片  缩放70%左右</p><p>添加[径向阴影],拉到选中图片上,设置参数: 调整图层大小 阴影颜色改成白色 不透明度改成100%</p><p>光源参数为： <font color="orange"><code>x:1000 y:530</code></font>  投影距离: <font color="orange"><code>5左右</code></font></p><h2 id="添加效果-投影"><a href="#添加效果-投影" class="headerlink" title="添加效果:投影"></a>添加效果:投影</h2><p>[效果]里[透视]找[投影]  参数:距离(30)和柔合度调整  </p><h2 id="添加效果-高斯模糊"><a href="#添加效果-高斯模糊" class="headerlink" title="添加效果:高斯模糊"></a>添加效果:高斯模糊</h2><p><font color="orange"><code>注: 需要添加到下一层的图片上,以免相片出现模糊,再调整模糊度</code></font> </p><h2 id="批处理"><a href="#批处理" class="headerlink" title="批处理"></a>批处理</h2><p>选中已经做好的一个图片,右击复制,然后框选其他的素材,选择[粘贴属性]</p><h2 id="添加效果-立方体旋转"><a href="#添加效果-立方体旋转" class="headerlink" title="添加效果: 立方体旋转"></a>添加效果: 立方体旋转</h2><p>拖到两个素材中间自动应用,</p><h1 id="添加光晕效果"><a href="#添加光晕效果" class="headerlink" title="添加光晕效果"></a>添加光晕效果</h1><p>[添加]素材,选择不透明度,混合模式改为绿色。修改完之后将素材填满</p><h2 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h2><p>格式: <font color="orange"><code>H264</code></font> </p><p>预设: <font color="orange"><code>高比特率</code></font> </p><h1 id="04-手机-拍摄和剪辑"><a href="#04-手机-拍摄和剪辑" class="headerlink" title="04 手机 拍摄和剪辑"></a>04 手机 拍摄和剪辑</h1><blockquote><p> <font color="orange" size="7"><code>曝光三要素 </code></font> </p></blockquote><ul><li>快门</li><li>光圈</li><li>ISO</li></ul><h2 id="快门"><a href="#快门" class="headerlink" title="快门"></a>快门</h2><p>决定感光元件前幕帘的闭合快慢,数字越大,快门越慢  一般<font color="orange"><code>1/50</code></font> 即可(除非拍摄特殊画面,比如车水马龙的流光效果)</p><p>快门越慢就越亮</p><h3 id="影响"><a href="#影响" class="headerlink" title="影响:"></a>影响:</h3><ul><li>亮暗</li><li>动态模糊</li></ul><h3 id="结论"><a href="#结论" class="headerlink" title="结论:"></a>结论:</h3><p>2倍原则,即视频帧数的两倍</p><p>30Fps的视频采用1&#x2F;60的快门</p><p>24Pfs的视频采用近似的1&#x2F;50的快门</p><p>适当动态模糊,模拟人眼视觉</p><p>如果再LED光源下拍视频,录像带快门速度设为50的倍数可以繁殖频闪</p><h2 id="光圈-决定相机镜头打开的大小"><a href="#光圈-决定相机镜头打开的大小" class="headerlink" title="光圈: 决定相机镜头打开的大小"></a>光圈: 决定相机镜头打开的大小</h2><p>数字越大 光圈越小</p><p>光圈越小就越暗</p><h3 id="影响-1"><a href="#影响-1" class="headerlink" title="影响:"></a>影响:</h3><p>亮暗</p><p>景深,使背景虚化</p><h3 id="结论-1"><a href="#结论-1" class="headerlink" title="结论:"></a>结论:</h3><p>突出主体人物: F2.8大光圈、背景虚化</p><p>整体画面清晰:F4.0小光圈、背景清晰</p><p>背景虚化F2.8左右,不用虚化F5.0以上</p><p>手机的硬件条件有限,一般无法改变光圈大小</p><h2 id="ISO：相机感光元件本身的敏感度"><a href="#ISO：相机感光元件本身的敏感度" class="headerlink" title="ISO：相机感光元件本身的敏感度"></a>ISO：相机感光元件本身的敏感度</h2><p>数字越大、感光元件对光线越敏感</p><h3 id="影响-2"><a href="#影响-2" class="headerlink" title="影响:"></a>影响:</h3><p>亮暗</p><p>噪点</p><h3 id="结论-2"><a href="#结论-2" class="headerlink" title="结论:"></a>结论:</h3><p>保证正常曝光,ISO越低越好</p><p>看环境灯光,避免弱光下的噪点,ISO一般1600以下即可 画面太暗的话,需要灯光辅助,或调大光圈</p><h2 id="手机拍摄参数设置"><a href="#手机拍摄参数设置" class="headerlink" title="手机拍摄参数设置"></a>手机拍摄参数设置</h2><p>FiLMic软件(正版收费)： 视频也能调整参数</p><h2 id="手机辅助设备"><a href="#手机辅助设备" class="headerlink" title="手机辅助设备"></a>手机辅助设备</h2><ul><li><p>手机三脚架</p></li><li><p>八爪鱼</p></li><li><p>三脚架</p></li><li><p>手机稳定器</p></li><li><p>俯拍支架</p></li></ul><h2 id="手机剪辑软件"><a href="#手机剪辑软件" class="headerlink" title="手机剪辑软件"></a>手机剪辑软件</h2><ul><li>巧影</li><li>喵影工厂</li><li>InShot</li><li>剪映</li></ul>]]></content>
      
      
      <categories>
          
          <category> pr </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>算法tips</title>
      <link href="/2023/07/23/algorithm/"/>
      <url>/2023/07/23/algorithm/</url>
      
        <content type="html"><![CDATA[<p>1.C++如何让输出保存四位小数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iomanip></span> <span class="token comment">//引入iomanip头文件</span></span><span class="token keyword">double</span> a<span class="token operator">=</span><span class="token number">123.4567890</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token function">setiosflags</span><span class="token punctuation">(</span>ios<span class="token double-colon punctuation">::</span>fixed<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token function">setprecision</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token comment">//输出的a就会保留四位小数了。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>·</p><p>2.如何寻找数组中有多个最大值的最小下标？·</p><p>最简单的方法:<font color="Red"><code>将原数组复制一遍到另一个数组 将原数组排序 保存最大值 将另一个数组遍历 第一次遇到最大值就输出 break；</code></font> </p><p>3.求最大公约数 和 最小公倍数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> b <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token function">gcd</span><span class="token punctuation">(</span>a <span class="token punctuation">,</span> b <span class="token operator">%</span> a<span class="token punctuation">)</span> <span class="token operator">:</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//最大公倍数</span><span class="token keyword">int</span> lcm <span class="token operator">=</span> a <span class="token operator">*</span> b <span class="token operator">/</span> <span class="token function">GCD</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//注意,这种写法可能错,因为a * b可能因为太大 超出int或者超出longlong 推荐写成int lcm = a / gcd * b</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.洛谷p1420 最大连号  （和最长上升子序列相似）</p><p>朴素方法:<font color="Red"><code>直接找每次最长的len 一旦遇到不符合要求的 直接将len 置 0   max = len 最后记得要算上 + 1</code></font> </p><p>5.C++字符串中的字母大小写转换</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>string str<span class="token punctuation">;</span>cin <span class="token operator">>></span> str<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">toupper</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//转大写 tolower(str[i]); 转小写</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>tips: <font color="Red"><code>1.遍历时 条件 需要注意 能不能加= 的问题  不然就可能出错、（多思考 多练）</code></font></p><p>​<font color="Red"><code>2.对于去除重合部分，如果没有思路的话,可以考虑一下用染色的方法(0 1来判别)  初始化全0  染过的就置为1   染过的就不能再染了(根据 != 1 判别)</code></font></p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Office学习</title>
      <link href="/2023/07/14/office%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/07/14/office%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Excel学习"><a href="#Excel学习" class="headerlink" title="Excel学习"></a>Excel学习</h1><h2 id="E01-学生会社团统计工作-必备基础操作"><a href="#E01-学生会社团统计工作-必备基础操作" class="headerlink" title="E01 学生会社团统计工作,必备基础操作"></a>E01 学生会社团统计工作,必备基础操作</h2><p>表格常见的两个种类: <font color="red"><code>清单类</code></font>、<font color="red"><code>表单类</code></font></p><h3 id="制作表单四步法"><a href="#制作表单四步法" class="headerlink" title="制作表单四步法"></a>制作表单四步法</h3><ul><li>1.先画草稿再做表</li></ul><p>tips: 打印表单的时候,Excel自带的网络线(在视图里)不会被打印</p><p>​ esc取消格式刷</p><ul><li>2.对齐文本框线少</li></ul><p>tips:设置内部框线  可以先设置为无框线 在设置外框线</p><ul><li>3.设置列宽与行高</li></ul><p>可以手动调整</p><ul><li>4.颜色填充效果好</li></ul><p>做完之后可以在做一些细节调整:如字体、字号、微调行高列宽</p><h3 id="保护表格的N种方式"><a href="#保护表格的N种方式" class="headerlink" title="保护表格的N种方式"></a>保护表格的N种方式</h3><h4 id="不让看"><a href="#不让看" class="headerlink" title="不让看"></a>不让看</h4><p>方式一:  <font color="red"><code>隐藏工作表</code></font></p><p>在[操作演示]这个工作表标签上,单击右键</p><p>方式二: <font color="red"><code> 隐藏工作表+加密</code></font></p><p>先隐藏,然后在页面上方选择[审阅],点击[保护工作簿]设置密码</p><p>方式三:  <font color="red"><code>保护工作簿+加密</code></font></p><p>单击[文件],单击[信息]，单击[保护工作簿],输入密码.</p><h4 id="不让碰"><a href="#不让碰" class="headerlink" title="不让碰"></a>不让碰</h4><p>方式一：<font color="red"><code> 保护工作表</code></font></p><p>[审阅]选项卡下单击[保护工作表]进入勾选</p><p>方式二:  <font color="red"><code> 保护单元格</code></font></p><p>单击任意单元格,ctrl+A全选整个单元格,ctrl+1打开设置单元格式框,切换到保护选项卡,取消勾选锁定,将不呢个修改的单元格全选,勾选锁定.然后在[审阅]选项卡下单击[保护工作表]，取消勾选锁定单元格</p><h3 id="打印表格的注意事项"><a href="#打印表格的注意事项" class="headerlink" title="打印表格的注意事项"></a>打印表格的注意事项</h3><ul><li>多页打印缺少标题</li></ul><p>solve: 给每页添加标题行: <font color="red"><code>打印标题-顶端标题行</code></font></p><p>单击[页面布局]-[打印标题],单击顶端标题行,选择标题行.单击[打印预览]看效果</p><ul><li>表格打印不全</li></ul><p>solve: <font color="red"><code>将表格打印到一页</code></font></p><p>1.调整页边距(适用于表格只有一小部分超出打印范围)</p><p>[页面]选项卡中选择页边距,想将更多内容放在一页中,可以将页边距缩小</p><p>2.调整分页线(适用于表格大范围超出打印范围)</p><p>[视图]选项卡中切换到[分页预览]。</p><p>ps:分页预览就是把现有表格按照最终打印出来的样式分割成多页进行预览.预览中你看到的这些蓝色线条无论是实线还是虚线都是分页线.而最边缘的这些蓝色线是打印区域分界线。分界线之外灰色区域为非打印区域。高亮区域为打印区域.</p><ul><li>不会加页码和图片LOGO</li></ul><p>solve: 添加学校名称和LOGO：<font color="red"><code>添加页眉页脚</code></font></p><p>  [页面布局]选项卡中单击[页面设置]的更多选项,切换到[页眉&#x2F;页脚]选项卡</p><p>tips[<font color="purle"><code>视图]中,单击[页面布局]能非常直观看到页眉页脚的样子,还能直接设置页眉页码</code></font></p><h2 id="E02-新生信息登记，大量输入数据怎么偷懒？"><a href="#E02-新生信息登记，大量输入数据怎么偷懒？" class="headerlink" title="E02 新生信息登记，大量输入数据怎么偷懒？"></a>E02 新生信息登记，大量输入数据怎么偷懒？</h2><h3 id="01-数据录入小技巧"><a href="#01-数据录入小技巧" class="headerlink" title="01 数据录入小技巧"></a>01 数据录入小技巧</h3><h4 id="数据录入困难的原因"><a href="#数据录入困难的原因" class="headerlink" title="数据录入困难的原因"></a>数据录入困难的原因</h4><p>第1类: 录入方法不对</p><p>tips:<font color="purle"><code>先把要需要的数据选区用鼠标选中它 使用Tab键横向移动单元格选框</code></font></p><p>第2类: 录入出现错误 </p><p>例: 身份证号码总是乱码 反复纠正效率低</p><p>​  输入序号时 数字前面的0,总是会被舍掉</p><p>slove:<font color="red"><code>把格式由常规改为文本</code></font></p><h4 id="把数字改成文本的两种方法"><a href="#把数字改成文本的两种方法" class="headerlink" title="把数字改成文本的两种方法"></a>把数字改成文本的两种方法</h4><p>第一种:在输入数字前输入英文的<font color="red"><code>单引号 </code></font>  （效率低）</p><p>ps:单引号会强制把我们后面输的所有数字转换为文本格式</p><p>第二种:[开始]选项卡，找到格式[常规]进行修改</p><h3 id="02-重复数据不用敲"><a href="#02-重复数据不用敲" class="headerlink" title="02 重复数据不用敲"></a>02 重复数据不用敲</h3><p>方法一: <font color="red"><code>数据验证制作下拉列表</code></font></p><p>[数据]选项卡选择[数据验证],[允许]选择[序列]  用逗号进行间隔</p><p>方法二:<font color="red"><code>Ctrl+Enter</code></font> 批量填充到每一个单元格</p><p>快捷键完成数据的填充</p><p>第一步 选择空白单元格</p><p>第二步 ctrl+G打开定位窗口,点击[定位条件],勾选[空值]</p><p>第三步 点击一个空白单元格按&#x3D;键,再按一个向上的箭头,然后按ctrl+Enter</p><p>tips:使用&#x3D;完成对上方数据的填充,会有隐患.</p><p>为了避免这些错误,先选中单元格,然后ctrl+c再选中[专业]位置，点击右键选择粘贴为数值,就不会影响[专业]的填充了</p><p>方法三:<font color="red"><code>Ctrl+D Ctrl+R </code></font>快速复制数据</p><p>对数据进行筛选,ctrl+D来批量填充公式（横向）</p><p>​ctrl+R来批量填充公式（纵向）</p><h3 id="03-表格制作手机通讯录"><a href="#03-表格制作手机通讯录" class="headerlink" title="03 表格制作手机通讯录"></a>03 表格制作手机通讯录</h3><p>为什么Excel无法直接导入到手机通讯录？</p><p>因为Excel文件时xlsx格式,适合在电脑上查看.</p><p>而手机通讯录可以识别的文件格式是vCard格式.</p><h4 id="如何把Excel联系方式导入到手机通讯录？"><a href="#如何把Excel联系方式导入到手机通讯录？" class="headerlink" title="如何把Excel联系方式导入到手机通讯录？"></a>如何把Excel联系方式导入到手机通讯录？</h4><p>跨平台数据导入导出用CSV格式文件、表格数据转通讯录用163邮箱</p><p>转换过程中需要两个很关键的工具：<font color="red"><code>CSV格式</code></font> 、 <font color="red"><code>网易邮箱</code></font></p><p>大致的过程:先把Excel格式另存为csv格式,然后再把csv文件导入到i网易邮箱,然后使用网易邮箱的通讯录功能,再导出vCard格式的文件,最后把文件发送到手机打开就可以了.</p><h4 id="文本文件如何导出到excel"><a href="#文本文件如何导出到excel" class="headerlink" title="文本文件如何导出到excel"></a>文本文件如何导出到excel</h4><p>全选 复制 黏贴  缺点:数据全挤在一列</p><p>solve:  tips:将第一行用作标题</p><p>1.选中整列,[数据]选项卡中选择[分列]功能 然后选择[分隔符号]</p><p>分列功能:<font color="red"><code>按照分隔符拆分数据.快速拆分数据到单独列</code></font></p><p>2.[数据]选项卡下的[从文本&#x2F;CSV]功能 设置UTF-8的编码格式  会进入到一个新的页面PowerQuery  可以对数据进行快速整理 同样的需要进行分列</p><p>好处：<font color="red"><code>可以实时的一键更新</code></font></p><h2 id="E03-核对学生数据-5分钟搞定3小时工作量"><a href="#E03-核对学生数据-5分钟搞定3小时工作量" class="headerlink" title="E03 核对学生数据,5分钟搞定3小时工作量"></a>E03 核对学生数据,5分钟搞定3小时工作量</h2><h3 id="01-数据核对妙招"><a href="#01-数据核对妙招" class="headerlink" title="01 数据核对妙招"></a>01 数据核对妙招</h3><p>数据核对三种方法:</p><p>1.条件格式</p><p>自动标记重复值</p><p>2.基于公式计算的比较运算符</p><p>快速核对两列差异</p><p>3.数据核对的快捷操作-行内容差异单元格</p><p>一键定位差异单元格</p><p>如何找一列的重复值？</p><p>选中这一列,在开始选项卡中点击条件格式选择第一项突出显示单元格规则找到重复值.</p><p>如何把重复值快速的删除？</p><p>首先选中删除重复值的数据区域,在数据选项卡中删除重复值这个功能</p><p>两列比较差异</p><p>1.在单元格里面输入一个等号,然后先选择一列数据，在输入一个&#x3D;号，在选择一列数据，回车.下拉拖拽显示全部</p><p>2.[开始选项卡]找到[查找和选择],找到定位条件.勾选行内容差异单元格.(简便)</p><p>3.ctrl + \ 快速定义差异单元格 注：只有在英文输入时的反斜杠可以</p><h3 id="02-数据核对常用公式"><a href="#02-数据核对常用公式" class="headerlink" title="02 数据核对常用公式"></a>02 数据核对常用公式</h3><p>匹配数据用公式</p><p>两个常见的核对函数: COUNTLF函数(条件计数)和VLOOKUP函数(可以将查询到的结果引用过来,放在原始数据旁边）</p><h3 id="03-高级核对技巧"><a href="#03-高级核对技巧" class="headerlink" title="03 高级核对技巧"></a>03 高级核对技巧</h3><h2 id="E04-排序筛选-学霸学渣立马显现"><a href="#E04-排序筛选-学霸学渣立马显现" class="headerlink" title="E04 排序筛选,学霸学渣立马显现"></a>E04 排序筛选,学霸学渣立马显现</h2><h2 id="E05-成绩统计分析-快帮老师搞定它"><a href="#E05-成绩统计分析-快帮老师搞定它" class="headerlink" title="E05 成绩统计分析,快帮老师搞定它"></a>E05 成绩统计分析,快帮老师搞定它</h2><h2 id="E06-会动的表格-让你的老师对你刮目相看"><a href="#E06-会动的表格-让你的老师对你刮目相看" class="headerlink" title="E06 会动的表格,让你的老师对你刮目相看"></a>E06 会动的表格,让你的老师对你刮目相看</h2><h2 id="E07-全校上万条数据-怎么准确的搞笑地查看"><a href="#E07-全校上万条数据-怎么准确的搞笑地查看" class="headerlink" title="E07 全校上万条数据,怎么准确的搞笑地查看?"></a>E07 全校上万条数据,怎么准确的搞笑地查看?</h2><h2 id="E08-新手必知的函数学习方法"><a href="#E08-新手必知的函数学习方法" class="headerlink" title="E08 新手必知的函数学习方法"></a>E08 新手必知的函数学习方法</h2><h2 id="E09-高手必会的函数速算技巧"><a href="#E09-高手必会的函数速算技巧" class="headerlink" title="E09 高手必会的函数速算技巧"></a>E09 高手必会的函数速算技巧</h2><h2 id="E10-高手必会的数据处理妙招"><a href="#E10-高手必会的数据处理妙招" class="headerlink" title="E10 高手必会的数据处理妙招"></a>E10 高手必会的数据处理妙招</h2><h1 id="Word学习"><a href="#Word学习" class="headerlink" title="Word学习"></a>Word学习</h1><h2 id="W01-打牢Word基本功-赢过打印店老板"><a href="#W01-打牢Word基本功-赢过打印店老板" class="headerlink" title="W01 打牢Word基本功,赢过打印店老板"></a>W01 打牢Word基本功,赢过打印店老板</h2><p>tips:<font color="purle"><code>先把要需要的数据选区用鼠标选中它 使用Tab键横向移动单元格选框</code></font></p><h3 id="01-文本编辑基本功"><a href="#01-文本编辑基本功" class="headerlink" title="01 文本编辑基本功"></a>01 文本编辑基本功</h3><h4 id="被滥用的空格"><a href="#被滥用的空格" class="headerlink" title="被滥用的空格"></a>被滥用的空格</h4><ul><li>使用空格实现首行缩进</li></ul><p>使用段落格式的首行缩进</p><ul><li>用空格来精确对其文本</li></ul><p>精准对其工具：<font color="red"><code>制表符</code></font></p><p>[视图]选择[标尺]</p><p>对其表格三步走</p><p>一、插入制表符 </p><p>先切换””居中式制表符“ 在标尺中间点击一下 添加制表符</p><p>再选择“左对齐式制表符” 在标尺左边偏右点击一下 添加制表符</p><p>二、添加Tab键</p><p>三、调整制表符位置</p><p>全选,在水平标尺上使用鼠标左键,是可以拖动调整制表符来调整位置的.</p><p>如果不小心插入了错误的制表符,可以直接用鼠标拖离它.</p><h4 id="被滥用的回车"><a href="#被滥用的回车" class="headerlink" title="被滥用的回车"></a>被滥用的回车</h4><ul><li>敲回车调整段落间距</li></ul><p>solve:<font color="blue"><code>使用段落间距来随心所欲设置</code></font></p><ul><li>通过敲回车来换页</li></ul><p>solve:<font color="blue"><code>使用分页符</code></font>   <font color="red"><code>ctrl+enter</code></font>(最便捷)</p><p>分页的按钮还有两个。</p><p>第一个是单击[插入]选项卡 ,单击[页面]功能组的[分页]功能</p><p>第二个入口时单击[布局]选项卡,[页面设置]功能组的[分隔符]，选择[分页符]</p><h4 id="被误解的自动编号"><a href="#被误解的自动编号" class="headerlink" title="被误解的自动编号"></a>被误解的自动编号</h4><ul><li>自动编号总是自作多情地出现</li></ul><h5 id="编号与后面文本之间的距离太长了，如何解决"><a href="#编号与后面文本之间的距离太长了，如何解决" class="headerlink" title="编号与后面文本之间的距离太长了，如何解决?"></a>编号与后面文本之间的距离太长了，如何解决?</h5><p>solve: <font color="blue"><code>在编号上右击鼠标,选择[调整列表缩进量],可以在[编号之后]下面的下拉列表中,选择编号之后为&quot;不特别标注</code></font></p><h5 id="如何取消自动编号"><a href="#如何取消自动编号" class="headerlink" title="如何取消自动编号?"></a>如何取消自动编号?</h5><p>solve：<font color="blue"><code>依次打开[文件]、[选项]、[校对]、[自动更正选项],点开[键入时自动套用格式],取消勾选[自动编号列表]。</code></font></p><h3 id="02-快捷操作基本功"><a href="#02-快捷操作基本功" class="headerlink" title="02 快捷操作基本功"></a>02 快捷操作基本功</h3><p>选择全部文本:  <font color="red"><code> ctrl + A</code></font></p><p>选择大段文本:<font color="red"><code>  shift</code></font></p><p>选择不连续文本: <font color="red"><code> ctrl</code></font></p><h4 id="高频操作建议使用快捷键"><a href="#高频操作建议使用快捷键" class="headerlink" title="高频操作建议使用快捷键"></a>高频操作建议使用快捷键</h4><p>保存:<font color="red"><code> ctrl+s</code></font></p><p>撤销:<font color="red"><code>ctrl+z </code></font></p><p>重复上一步操作:<font color="red"><code>  f4</code></font> ！！！！！</p><h4 id="快速访问工具栏"><a href="#快速访问工具栏" class="headerlink" title="快速访问工具栏"></a>快速访问工具栏</h4><p>把记不住快捷键、找不到的功能按钮放到快速访问工具栏</p><h3 id="03-文档阅读基本功"><a href="#03-文档阅读基本功" class="headerlink" title="03 文档阅读基本功"></a>03 文档阅读基本功</h3><h5 id="隐藏段落标记"><a href="#隐藏段落标记" class="headerlink" title="隐藏段落标记"></a>隐藏段落标记</h5><p>[开始]选项卡的[段落]功能组这里的[显示&#x2F;隐藏编辑标记]   (只保留了回车符)</p><h5 id="彻底去除需要去Word选项设置"><a href="#彻底去除需要去Word选项设置" class="headerlink" title="彻底去除需要去Word选项设置"></a>彻底去除需要去Word选项设置</h5><p>依次单击[文件]、[选项]、[显示]，将[段落标记]前面的勾取消掉</p><h5 id="屏幕上一次性显示多页Word"><a href="#屏幕上一次性显示多页Word" class="headerlink" title="屏幕上一次性显示多页Word"></a>屏幕上一次性显示多页Word</h5><p>[视图]选项卡中[单页]和[多页]切换</p><h4 id="折叠功能区"><a href="#折叠功能区" class="headerlink" title="折叠功能区"></a>折叠功能区</h4><p>直接点击功能区</p><h3 id="04-文档打印基本功"><a href="#04-文档打印基本功" class="headerlink" title="04 文档打印基本功"></a>04 文档打印基本功</h3><p>正反打印学会区分长边、短边翻页</p><p>打印前记得输出PDF保证不变形asd</p><p><font color="red"><code>ctrl+p </code></font> 进入打印视图</p><p>为了避免Word文档在别人电脑上出现排版混乱的情况,建议把文档转化为PDF格式</p><h2 id="W02-团队高校合作-快速搞定小组作用统稿！"><a href="#W02-团队高校合作-快速搞定小组作用统稿！" class="headerlink" title="W02 团队高校合作,快速搞定小组作用统稿！"></a>W02 团队高校合作,快速搞定小组作用统稿！</h2><h3 id="01-设定模板样式"><a href="#01-设定模板样式" class="headerlink" title="01 设定模板样式"></a>01 设定模板样式</h3><p><strong>套用样式格式化文档</strong></p><p>步骤一: 根据文档组成套用样式</p><p>步骤二: 根据格式要求修改、新建样式</p><p><strong>如何修改多alt + 1级列表</strong></p><p>步骤一:  打开定义新的多级列表</p><p>步骤二:  修改1级标题编号形式</p><p>第三步:  修改2级标题编号形式</p><h3 id="02-模板分发与使用"><a href="#02-模板分发与使用" class="headerlink" title="02 模板分发与使用"></a>02 模板分发与使用</h3><p>设置快捷键 <font color="red"><code>alt + 1 </code></font>设置文档格式</p><h3 id="03-批量合并整理文档"><a href="#03-批量合并整理文档" class="headerlink" title="03 批量合并整理文档"></a>03 批量合并整理文档</h3><p><strong>合并文档</strong></p><p>第一步: 修改文档名称</p><p>第二步: 文档批量合并</p><p>随意打开一份word文档,依次点开[插入]选项卡,[对象]按钮旁边的三角.点击[文件中的文字]</p><p>第三步: 调整文章结构</p><p><font color="purle"><code>为了方便浏览长文档,我们可以使用[导航窗格]功能,依次单击[视图]选项卡,勾选[导航窗格]</code></font></p><p><strong>tips</strong>:</p><p> 技巧一:  批量删除多余空格</p><p><font color="purle"><code>[开始]选项卡中找到[替换]按钮</code></font></p><p>技巧二: 批量删除空行、</p><p>如何在查找替换框里输入段落标记？</p><p>按<font color="red"><code>ctrl + H </code></font> 打开查找替换对话框 点[更多]里的[特殊符号]里的段落标记</p><p><strong>summary</strong>:</p><p>1.设计范本,做出一份可复用的模板</p><p>2.分工合作,套用模板，编写文档</p><p>3.小组长快速合并文档,重复操作批量造</p><h2 id="W03-表格要是填不好-你的奖助学金要飞啦"><a href="#W03-表格要是填不好-你的奖助学金要飞啦" class="headerlink" title="W03 表格要是填不好,你的奖助学金要飞啦~"></a>W03 表格要是填不好,你的奖助学金要飞啦~</h2><h2 id="W04-学生会资料批量制作-拒绝做CV工程师"><a href="#W04-学生会资料批量制作-拒绝做CV工程师" class="headerlink" title="W04 学生会资料批量制作,拒绝做CV工程师"></a>W04 学生会资料批量制作,拒绝做CV工程师</h2><h2 id="W05-论文排版有套路-四步教你轻松搞定！-上"><a href="#W05-论文排版有套路-四步教你轻松搞定！-上" class="headerlink" title="W05 论文排版有套路,四步教你轻松搞定！(上)"></a>W05 论文排版有套路,四步教你轻松搞定！(上)</h2><h2 id="W06-论文排版有套路-四步教你轻松搞定！-下"><a href="#W06-论文排版有套路-四步教你轻松搞定！-下" class="headerlink" title="W06 论文排版有套路,四步教你轻松搞定！(下)"></a>W06 论文排版有套路,四步教你轻松搞定！(下)</h2><h2 id="W07-论文图表公式多元素混排-内容不听话"><a href="#W07-论文图表公式多元素混排-内容不听话" class="headerlink" title="W07 论文图表公式多元素混排,内容不听话?"></a>W07 论文图表公式多元素混排,内容不听话?</h2><h2 id="W08-做好审阅与保护，再也不怕老师同学改文档！"><a href="#W08-做好审阅与保护，再也不怕老师同学改文档！" class="headerlink" title="W08 做好审阅与保护，再也不怕老师同学改文档！"></a>W08 做好审阅与保护，再也不怕老师同学改文档！</h2><h2 id="W09-学生党必备！文档格式超级转换技巧！"><a href="#W09-学生党必备！文档格式超级转换技巧！" class="headerlink" title="W09 学生党必备！文档格式超级转换技巧！"></a>W09 学生党必备！文档格式超级转换技巧！</h2><h2 id="W10-用Word也能做出震惊面试官的简历？！"><a href="#W10-用Word也能做出震惊面试官的简历？！" class="headerlink" title="W10 用Word也能做出震惊面试官的简历？！"></a>W10 用Word也能做出震惊面试官的简历？！</h2><h1 id="PPT学习"><a href="#PPT学习" class="headerlink" title="PPT学习"></a>PPT学习</h1><h2 id="P01-哇塞！你的个人介绍超有范！"><a href="#P01-哇塞！你的个人介绍超有范！" class="headerlink" title="P01 哇塞！你的个人介绍超有范！"></a>P01 哇塞！你的个人介绍超有范！</h2><h3 id="01白底纯字-快速打造个人介绍"><a href="#01白底纯字-快速打造个人介绍" class="headerlink" title="01白底纯字,快速打造个人介绍"></a>01白底纯字,快速打造个人介绍</h3><h4 id="1-空白演示文稿的新建"><a href="#1-空白演示文稿的新建" class="headerlink" title="1 空白演示文稿的新建"></a>1 空白演示文稿的新建</h4><p>[开始]下方幻灯片工具组中点击板式,选择空白文稿,去除软件自带的默认文本框</p><h4 id="2-插入设置文本"><a href="#2-插入设置文本" class="headerlink" title="2 插入设置文本"></a>2 插入设置文本</h4><p>插入文本框时,拉动文本框就可以得到一个自动换行的段落文本框</p><p>一般情况下,多蚊子的文本内容,填充为深灰色,设置1.2-1.3的行距 阅读起来会比较舒服</p><h4 id="3-内容对齐排版"><a href="#3-内容对齐排版" class="headerlink" title="3 内容对齐排版"></a>3 内容对齐排版</h4><p>[形状格式]中的[对齐</p><p>小结:</p><p>文本有区别,字多字少二选一</p><p>阅读要舒适,行距深灰要用上</p><p>重点要突出,加粗颜色要用好</p><p>PPT当画布,多文本框好排版</p><h3 id="02-选对字体-打造特色个人"><a href="#02-选对字体-打造特色个人" class="headerlink" title="02 选对字体,打造特色个人"></a>02 选对字体,打造特色个人</h3><h4 id="1-下载字体"><a href="#1-下载字体" class="headerlink" title="1 下载字体"></a>1 下载字体</h4><p>找字网、求字体网</p><h4 id="2-安装字体"><a href="#2-安装字体" class="headerlink" title="2 安装字体"></a>2 安装字体</h4><h4 id="3-选用字体"><a href="#3-选用字体" class="headerlink" title="3 选用字体"></a>3 选用字体</h4><h4 id="03-打破惯性-打造创意个人"><a href="#03-打破惯性-打造创意个人" class="headerlink" title="03 打破惯性,打造创意个人"></a>03 打破惯性,打造创意个人</h4><h4 id="1-背景填充"><a href="#1-背景填充" class="headerlink" title="1 背景填充"></a>1 背景填充</h4><p>页面空白区鼠标右键</p><p>tips:<font color="purle"><code>[文本效果]中添加透视阴影</code></font></p><h2 id="P02-这么丑的社团简介-你指望用它来纳新？"><a href="#P02-这么丑的社团简介-你指望用它来纳新？" class="headerlink" title="P02 这么丑的社团简介,你指望用它来纳新？"></a>P02 这么丑的社团简介,你指望用它来纳新？</h2><h3 id="01-文字排版-重点信息更突出"><a href="#01-文字排版-重点信息更突出" class="headerlink" title="01 文字排版,重点信息更突出"></a>01 文字排版,重点信息更突出</h3><p>做好三步,让ppt有逻辑有重点！</p><p>1.分层分段</p><p>2.提炼观点</p><p>3.重点突出</p><p> <font color="red"><code>ctrl + d </code></font>复制模块</p><h3 id="02-适当裁剪-合理布局更大方"><a href="#02-适当裁剪-合理布局更大方" class="headerlink" title="02 适当裁剪,合理布局更大方"></a>02 适当裁剪,合理布局更大方</h3><h4 id="01-图片裁剪-左右排版"><a href="#01-图片裁剪-左右排版" class="headerlink" title="01 图片裁剪-左右排版"></a>01 图片裁剪-左右排版</h4><p>双击图片，点击裁剪功能,拉动裁剪框</p><h4 id="02-图片裁剪-上下排版"><a href="#02-图片裁剪-上下排版" class="headerlink" title="02 图片裁剪-上下排版"></a>02 图片裁剪-上下排版</h4><h4 id="03-形状裁剪-棱形、椭圆形"><a href="#03-形状裁剪-棱形、椭圆形" class="headerlink" title="03 形状裁剪-棱形、椭圆形"></a>03 形状裁剪-棱形、椭圆形</h4><p>双击图片,点击裁剪功能下拉三角</p><h4 id="04-图片裁剪、一图多用"><a href="#04-图片裁剪、一图多用" class="headerlink" title="04 图片裁剪、一图多用"></a>04 图片裁剪、一图多用</h4><p>小结: </p><p>图片裁剪,页面布局不用怕</p><p>好图多用,整套ppt也不怕</p><h3 id="03-巧用蒙版-烂图也能高大上"><a href="#03-巧用蒙版-烂图也能高大上" class="headerlink" title="03 巧用蒙版,烂图也能高大上"></a>03 巧用蒙版,烂图也能高大上</h3><p>所谓蒙版,就是填充了透明颜色的形状</p><p>三种蒙版形式:1.纯色蒙版 2.渐变蒙版 3.光圈蒙版</p><p>1.插入矩形  拉到适合位置 轮廓设置了无轮廓 颜色填充为黑色 选择性状 鼠标右键设置形状格式,  调节纯色填充的透明度</p><p>2.渐变角度90°代表从上往下的颜色渐变 0°代表水平从左往右的渐变</p><p>小结:</p><p>文字看不清,蒙版来搞定</p><p>图片质量低,蒙版来统一</p><p>图片不够用,渐变蒙版凑</p><p>视觉想聚焦,光圈要用好</p><h2 id="P03-不套模板-也能做出好看的课堂展示ppt"><a href="#P03-不套模板-也能做出好看的课堂展示ppt" class="headerlink" title="P03 不套模板,也能做出好看的课堂展示ppt"></a>P03 不套模板,也能做出好看的课堂展示ppt</h2><h2 id="P04-电影大片级的团建相册-看完赞不绝口"><a href="#P04-电影大片级的团建相册-看完赞不绝口" class="headerlink" title="P04 电影大片级的团建相册,看完赞不绝口"></a>P04 电影大片级的团建相册,看完赞不绝口</h2><h2 id="P05-专业知识图示化-老师同学都喜欢！"><a href="#P05-专业知识图示化-老师同学都喜欢！" class="headerlink" title="P05 专业知识图示化,老师同学都喜欢！"></a>P05 专业知识图示化,老师同学都喜欢！</h2><h2 id="P06-活动总结报告-数据-图标更有说服力"><a href="#P06-活动总结报告-数据-图标更有说服力" class="headerlink" title="P06 活动总结报告,数据+图标更有说服力"></a>P06 活动总结报告,数据+图标更有说服力</h2><h2 id="P07-毕业晚会ppt-这么做才吸引眼球"><a href="#P07-毕业晚会ppt-这么做才吸引眼球" class="headerlink" title="P07 毕业晚会ppt,这么做才吸引眼球"></a>P07 毕业晚会ppt,这么做才吸引眼球</h2><h2 id="P08-用这四步美化PPT-会被辅导员夸上天"><a href="#P08-用这四步美化PPT-会被辅导员夸上天" class="headerlink" title="P08 用这四步美化PPT,会被辅导员夸上天"></a>P08 用这四步美化PPT,会被辅导员夸上天</h2><h2 id="P09-学会这些快捷操作-让你更有职场范！"><a href="#P09-学会这些快捷操作-让你更有职场范！" class="headerlink" title="P09 学会这些快捷操作,让你更有职场范！"></a>P09 学会这些快捷操作,让你更有职场范！</h2><h2 id="P10-用好这个神器，你能秒杀99-的职场人"><a href="#P10-用好这个神器，你能秒杀99-的职场人" class="headerlink" title="P10 用好这个神器，你能秒杀99%的职场人."></a>P10 用好这个神器，你能秒杀99%的职场人.</h2>]]></content>
      
      
      <categories>
          
          <category> office </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
